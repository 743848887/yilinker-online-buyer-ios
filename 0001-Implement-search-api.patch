From 396313c3a89ae67a7d7c292b5b37526494f1b50e Mon Sep 17 00:00:00 2001
From: jpChan15 <john.chan@easyshop.ph>
Date: Fri, 28 Aug 2015 04:30:49 +0800
Subject: [PATCH 01/27] Implement search api.

---
 YiLinkerOnlineBuyer.xcodeproj/project.pbxproj      | 116 ++++---
 .../resources/Helper/APIManager.swift              |   2 +
 .../resources/Model/CartProductDetailsModel.swift  | 140 +++++---
 .../resources/Model/SearchSuggestionModel.swift    |  21 +-
 .../View/CartProductAttributeTableViewCell.swift   | 123 +++++++
 .../CartProductAttributeViewController.swift       | 142 +++++---
 .../ViewController/CartViewController.swift        | 368 ++++++++++++++-------
 .../ViewController/SearchViewController.swift      |  69 +++-
 .../Xib/CartProductAttributeTableViewCell.xib      |  59 ++++
 .../Xib/CartProductAttributeViewController.xib     |   2 +-
 10 files changed, 745 insertions(+), 297 deletions(-)
 create mode 100644 YiLinkerOnlineBuyer/resources/View/CartProductAttributeTableViewCell.swift
 create mode 100644 YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeTableViewCell.xib

diff --git a/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj b/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj
index d9894c6..6889070 100644
--- a/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj
+++ b/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj
@@ -258,6 +258,8 @@
 		79A1C6F91B835BB50043AA36 /* ProductResultGridCollectionViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 79A1C6F81B835BB50043AA36 /* ProductResultGridCollectionViewCell.swift */; };
 		79A1C6FB1B83787B0043AA36 /* SellerResultCollectionViewCell.xib in Resources */ = {isa = PBXBuildFile; fileRef = 79A1C6FA1B83787B0043AA36 /* SellerResultCollectionViewCell.xib */; };
 		79A1C6FD1B8385310043AA36 /* SellerResultCollectionViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 79A1C6FC1B8385310043AA36 /* SellerResultCollectionViewCell.swift */; };
+		79AA08331B8F4DCF00AF3AA4 /* CartProductAttributeTableViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 79AA08321B8F4DCF00AF3AA4 /* CartProductAttributeTableViewCell.swift */; };
+		79AA08351B8F4E6300AF3AA4 /* CartProductAttributeTableViewCell.xib in Resources */ = {isa = PBXBuildFile; fileRef = 79AA08341B8F4E6300AF3AA4 /* CartProductAttributeTableViewCell.xib */; };
 		79E68B731B8AB900008626E4 /* ActivityLogTableViewCell.xib in Resources */ = {isa = PBXBuildFile; fileRef = 79E68B721B8AB900008626E4 /* ActivityLogTableViewCell.xib */; };
 		79E68B751B8AC390008626E4 /* ActivityLogTableViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 79E68B741B8AC390008626E4 /* ActivityLogTableViewCell.swift */; };
 		79E68B801B8AEC00008626E4 /* MyPointsTableViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 79E68B7E1B8AEC00008626E4 /* MyPointsTableViewController.swift */; };
@@ -559,6 +561,8 @@
 		79A1C6F81B835BB50043AA36 /* ProductResultGridCollectionViewCell.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = ProductResultGridCollectionViewCell.swift; path = YiLinkerOnlineBuyer/resources/View/ProductResultGridCollectionViewCell.swift; sourceTree = SOURCE_ROOT; };
 		79A1C6FA1B83787B0043AA36 /* SellerResultCollectionViewCell.xib */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.xib; path = SellerResultCollectionViewCell.xib; sourceTree = "<group>"; };
 		79A1C6FC1B8385310043AA36 /* SellerResultCollectionViewCell.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = SellerResultCollectionViewCell.swift; path = YiLinkerOnlineBuyer/resources/View/SellerResultCollectionViewCell.swift; sourceTree = SOURCE_ROOT; };
+		79AA08321B8F4DCF00AF3AA4 /* CartProductAttributeTableViewCell.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = CartProductAttributeTableViewCell.swift; path = YiLinkerOnlineBuyer/resources/View/CartProductAttributeTableViewCell.swift; sourceTree = SOURCE_ROOT; };
+		79AA08341B8F4E6300AF3AA4 /* CartProductAttributeTableViewCell.xib */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.xib; name = CartProductAttributeTableViewCell.xib; path = YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeTableViewCell.xib; sourceTree = SOURCE_ROOT; };
 		79E68B721B8AB900008626E4 /* ActivityLogTableViewCell.xib */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.xib; name = ActivityLogTableViewCell.xib; path = YiLinkerOnlineBuyer/resources/Xib/ActivityLogTableViewCell.xib; sourceTree = SOURCE_ROOT; };
 		79E68B741B8AC390008626E4 /* ActivityLogTableViewCell.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = ActivityLogTableViewCell.swift; path = YiLinkerOnlineBuyer/resources/View/ActivityLogTableViewCell.swift; sourceTree = SOURCE_ROOT; };
 		79E68B7E1B8AEC00008626E4 /* MyPointsTableViewController.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; name = MyPointsTableViewController.swift; path = YiLinkerOnlineBuyer/resources/ViewController/MyPointsTableViewController.swift; sourceTree = SOURCE_ROOT; };
@@ -783,20 +787,31 @@
 		0C99370B1B750583000D6074 /* View */ = {
 			isa = PBXGroup;
 			children = (
-				26D54FE51B86136300522398 /* TransactionTableViewCell.swift */,
-				7971F7401B861AC900322861 /* FilterTableViewCell.swift */,
+				0C5111DB1B81F21A002F0001 /* AboutSellerTableViewCell.swift */,
+				79E68B741B8AC390008626E4 /* ActivityLogTableViewCell.swift */,
+				79AA08321B8F4DCF00AF3AA4 /* CartProductAttributeTableViewCell.swift */,
 				797D490E1B7A509300617F6B /* CartTableViewCell.swift */,
 				0C6490751B7781E400F88F92 /* Category.swift */,
 				0C2F45271B85E95D00021F45 /* ChangeAddressCollectionViewCell.swift */,
 				0C5007671B861B1600BC0445 /* ChangeAddressFooterCollectionViewCell.swift */,
+				0C2F44DB1B8583EF00021F45 /* CheckoutViews.swift */,
+				0C374F501B89EC4D0050AE1D /* CustomizeSelectedCollectionViewCell.swift */,
+				0C374F4A1B8998F30050AE1D /* CustomizeShoppingCollectionViewCell.swift */,
+				0C374F4E1B89A4B70050AE1D /* CustomizeShoppingCollectionViewLayout.swift */,
+				0C374F5C1B8A2DBF0050AE1D /* CustomizeShoppingFlowLayout.swift */,
+				0C374F581B8A03CC0050AE1D /* CustomizeShoppingTableViewCell.swift */,
+				0C374F591B8A03CC0050AE1D /* CustomizeShoppingTableViewCell.xib */,
 				0C374EF21B8851C00050AE1D /* DeliverToTableViewCell.swift */,
 				0C99370C1B750583000D6074 /* DiscountLabel.swift */,
 				0C99370D1B750583000D6074 /* DynamicRoundedButton.swift */,
 				0C99370E1B750583000D6074 /* DynamicRoundedLabel.swift */,
 				0CDA117D1B764B79007B5DED /* DynamicRoundedTextField.swift */,
+				0CD103EB1B8B4769002E15F4 /* DynamicRoundedView.swift */,
 				0C329E781B7B47FF005BE2B6 /* EmptyView.swift */,
+				7971F7401B861AC900322861 /* FilterTableViewCell.swift */,
 				2632F51F1B7F8690006931E4 /* FollowedSellerTableViewCell.swift */,
 				0C99370F1B750583000D6074 /* FullImageCollectionViewCell.swift */,
+				0C5111E31B8211B6002F0001 /* GeneralRatingTableViewCell.swift */,
 				0C9937101B750583000D6074 /* GenericCollectionViewCell.swift */,
 				0C9937111B750583000D6074 /* HalfVerticalImageCollectionViewCell.swift */,
 				0C9937121B750583000D6074 /* HomePageCollectionViewLayout.swift */,
@@ -804,73 +819,63 @@
 				0C1003F21B87629400CAA17A /* NewAddressTableViewCell.swift */,
 				0C9937141B750583000D6074 /* NewSellerCollectionViewCell.swift */,
 				0C9937151B750583000D6074 /* NewSellerScrollableCollectionViewCell.swift */,
+				0C2F44D51B857F0000021F45 /* OrderSummaryTableViewCell.swift */,
 				0C10042E1B87AB9100CAA17A /* PaymentTableViewCell.swift */,
 				0C374EFE1B889D9A0050AE1D /* PlainTableViewCell.swift */,
+				79E68B8C1B8B0431008626E4 /* PointsBreakdownTableViewCell.swift */,
+				79E68B881B8AFE99008626E4 /* PointsDetailsTableViewCell.swift */,
+				79E68B841B8AF4D0008626E4 /* PointsEarnedTableViewCell.swift */,
+				79E68B921B8B0B8D008626E4 /* PointsTableViewCell.swift */,
 				26AFB3A61B79DE2900E50926 /* ProductAttributeTableViewCell.swift */,
 				26AFB3A11B79DE2900E50926 /* ProductDescriptionView.swift */,
 				26AFB3A01B79DE2900E50926 /* ProductImagesView.swift */,
+				26EC36181B7EE9DA0012B2B8 /* ProductImagesViewCollectionViewCell.swift */,
 				0C9937161B750583000D6074 /* ProductImageView.swift */,
 				0C9937171B750583000D6074 /* ProductitemWithVerticalDisplayCollectionViewCell.swift */,
+				79A1C6F81B835BB50043AA36 /* ProductResultGridCollectionViewCell.swift */,
+				79A1C6F41B8357BA0043AA36 /* ProductResultListCollectionViewCell.swift */,
 				26AFB3A31B79DE2900E50926 /* ProductReviewFooterView.swift */,
 				26AFB3A21B79DE2900E50926 /* ProductReviewHeaderView.swift */,
 				26AFB3A41B79DE2900E50926 /* ProductSellerView.swift */,
 				26AFB3A71B79DE2900E50926 /* ProductSellerViewCollectionViewCell.swift */,
+				0C5111DF1B8207C7002F0001 /* ProductsTableViewCell.swift */,
 				0C9937181B750583000D6074 /* ProductWithCenterNameCollectionViewCell.swift */,
+				79E85FB91B89DC1500428AA1 /* ProfileHeaderTableViewCell.swift */,
+				79E85FBD1B89DE1C00428AA1 /* ProfileTableViewCell.swift */,
 				26AFB3A51B79DE2900E50926 /* ReviewTableViewCell.swift */,
 				0C9937191B750583000D6074 /* RoundedButton.swift */,
 				0C99371A1B750583000D6074 /* RoundedImageView.swift */,
 				0C99371B1B750583000D6074 /* RoundedLabel.swift */,
 				0C99371C1B750583000D6074 /* ScrollableCollectionViewCell.swift */,
 				79A1C6EE1B8329390043AA36 /* SearchSuggestionTableViewCell.swift */,
+				0C5111E71B821D6F002F0001 /* SeeMoreTableViewCell.swift */,
 				0C99371D1B750583000D6074 /* SellerCollectionViewCell.swift */,
+				79A1C6FC1B8385310043AA36 /* SellerResultCollectionViewCell.swift */,
+				0C5111D71B81CEE7002F0001 /* SellerTableHeaderView.swift */,
 				0C99371E1B750583000D6074 /* SemiRoundedButton.swift */,
+				0C2F44DF1B85A0AA00021F45 /* ShipToTableViewCell.swift */,
+				7971F7481B862D6300322861 /* SortTableViewCell.swift */,
 				0C374EFA1B8862E10050AE1D /* SuccessTableHeaderViewCell.swift */,
 				0C374F061B88DC440050AE1D /* TotalTableViewCell.swift */,
-				0C99371F1B750583000D6074 /* TwoColumnGridCollectionViewCell.swift */,
-				0C9937201B750583000D6074 /* VerticalImageCollectionViewCell.swift */,
-				0C9937211B750583000D6074 /* ViewMoreFooterCollectionViewCell.swift */,
-				7987F3171B7B744A00B02DF4 /* WishlistTableViewCell.swift */,
-				0C374F4A1B8998F30050AE1D /* CustomizeShoppingCollectionViewCell.swift */,
-				0C374F4E1B89A4B70050AE1D /* CustomizeShoppingCollectionViewLayout.swift */,
-				0C374F501B89EC4D0050AE1D /* CustomizeSelectedCollectionViewCell.swift */,
-				0C374F581B8A03CC0050AE1D /* CustomizeShoppingTableViewCell.swift */,
-				0C374F5C1B8A2DBF0050AE1D /* CustomizeShoppingFlowLayout.swift */,
-				0C374F591B8A03CC0050AE1D /* CustomizeShoppingTableViewCell.xib */,
-				0CD103EB1B8B4769002E15F4 /* DynamicRoundedView.swift */,
-				26EC36181B7EE9DA0012B2B8 /* ProductImagesViewCollectionViewCell.swift */,
-				0C5111D71B81CEE7002F0001 /* SellerTableHeaderView.swift */,
-				0C5111DB1B81F21A002F0001 /* AboutSellerTableViewCell.swift */,
-				0C5111DF1B8207C7002F0001 /* ProductsTableViewCell.swift */,
-				0C5111E31B8211B6002F0001 /* GeneralRatingTableViewCell.swift */,
-				0C5111E71B821D6F002F0001 /* SeeMoreTableViewCell.swift */,
-				79A1C6F41B8357BA0043AA36 /* ProductResultListCollectionViewCell.swift */,
-				79A1C6F81B835BB50043AA36 /* ProductResultGridCollectionViewCell.swift */,
-				79A1C6FC1B8385310043AA36 /* SellerResultCollectionViewCell.swift */,
-				0C2F44D51B857F0000021F45 /* OrderSummaryTableViewCell.swift */,
-				0C2F44DB1B8583EF00021F45 /* CheckoutViews.swift */,
-				0C2F44DF1B85A0AA00021F45 /* ShipToTableViewCell.swift */,
-				268C1BB21B865AB8009FA106 /* TransactionIdView.swift */,
-				268C1BB61B865AF8009FA106 /* TransactionSellerView.swift */,
-				268C1BB81B865B09009FA106 /* TransactionDeliveryStatusView.swift */,
 				268C1BBA1B865B13009FA106 /* TransactionButtons.swift */,
+				2614E64C1B88FC5C00EE8B35 /* TransactionDeliveryLog2TableViewCell.swift */,
+				2614E64D1B88FC5C00EE8B35 /* TransactionDeliveryLog2TableViewCell.xib */,
+				2614E6481B886D3800EE8B35 /* TransactionDeliveryLogTableViewCell.swift */,
+				2614E6491B886D3800EE8B35 /* TransactionDeliveryLogTableViewCell.xib */,
+				268C1BB81B865B09009FA106 /* TransactionDeliveryStatusView.swift */,
+				26DFF63C1B87B0E9005D8EDE /* TransactionDescriptionView.swift */,
 				26B1B89F1B86D4BD006405CE /* TransactionDetailsView.swift */,
+				268C1BB21B865AB8009FA106 /* TransactionIdView.swift */,
+				26DFF6441B87BBE3005D8EDE /* TransactionProductDetailsTableViewCell.swift */,
+				26DFF63A1B87B0D7005D8EDE /* TransactionProductDetailsView.swift */,
 				26DFF6361B87B0AA005D8EDE /* TransactionProductImagesView.swift */,
 				26DFF6381B87B0C1005D8EDE /* TransactionPurchaseDetailsView.swift */,
-				26DFF63A1B87B0D7005D8EDE /* TransactionProductDetailsView.swift */,
-				26DFF63C1B87B0E9005D8EDE /* TransactionDescriptionView.swift */,
-				26DFF6441B87BBE3005D8EDE /* TransactionProductDetailsTableViewCell.swift */,
-				2614E6481B886D3800EE8B35 /* TransactionDeliveryLogTableViewCell.swift */,
-				2614E6491B886D3800EE8B35 /* TransactionDeliveryLogTableViewCell.xib */,
-				2614E64C1B88FC5C00EE8B35 /* TransactionDeliveryLog2TableViewCell.swift */,
-				2614E64D1B88FC5C00EE8B35 /* TransactionDeliveryLog2TableViewCell.xib */,
-				7971F7481B862D6300322861 /* SortTableViewCell.swift */,
-				79E85FB91B89DC1500428AA1 /* ProfileHeaderTableViewCell.swift */,
-				79E85FBD1B89DE1C00428AA1 /* ProfileTableViewCell.swift */,
-				79E68B741B8AC390008626E4 /* ActivityLogTableViewCell.swift */,
-				79E68B841B8AF4D0008626E4 /* PointsEarnedTableViewCell.swift */,
-				79E68B881B8AFE99008626E4 /* PointsDetailsTableViewCell.swift */,
-				79E68B8C1B8B0431008626E4 /* PointsBreakdownTableViewCell.swift */,
-				79E68B921B8B0B8D008626E4 /* PointsTableViewCell.swift */,
+				268C1BB61B865AF8009FA106 /* TransactionSellerView.swift */,
+				26D54FE51B86136300522398 /* TransactionTableViewCell.swift */,
+				0C99371F1B750583000D6074 /* TwoColumnGridCollectionViewCell.swift */,
+				0C9937201B750583000D6074 /* VerticalImageCollectionViewCell.swift */,
+				0C9937211B750583000D6074 /* ViewMoreFooterCollectionViewCell.swift */,
+				7987F3171B7B744A00B02DF4 /* WishlistTableViewCell.swift */,
 			);
 			path = View;
 			sourceTree = "<group>";
@@ -882,8 +887,11 @@
 				0C1003F61B87690300CAA17A /* AddAddressTableViewController.swift */,
 				79F417741B7C3ADB0047D02D /* CartProductAttributeViewController.swift */,
 				0C9937231B750583000D6074 /* CartViewController.swift */,
+				0C9937281B750583000D6074 /* WishlistViewController.swift */,
+				2689FBF51B80412D007BEA68 /* CategoriesTableViewCell.swift */,
 				0C329E8A1B7B73B7005BE2B6 /* CategoriesViewController.swift */,
 				0C2F45231B85E7CA00021F45 /* ChangeAddressViewController.swift */,
+				2689FBFD1B844A69007BEA68 /* CheckoutContainerViewController.swift */,
 				0C9937241B750583000D6074 /* CircularMenuViewController.swift */,
 				0C329E821B7B738E005BE2B6 /* CustomizeShoppingViewController.swift */,
 				0C329E941B7B7C5B005BE2B6 /* CustomTabBarController.swift */,
@@ -897,6 +905,8 @@
 				0CDA11791B760E1A007B5DED /* LoginViewController.swift */,
 				0C329E7E1B7B7376005BE2B6 /* MessagingViewController.swift */,
 				79E68B7E1B8AEC00008626E4 /* MyPointsTableViewController.swift */,
+				0C2F44AB1B848B7E00021F45 /* OverViewViewController.swift */,
+				0C2F44A71B848B5300021F45 /* PaymentViewController.swift */,
 				0C374EF61B88552E0050AE1D /* PaymentWebViewViewController.swift */,
 				26AFB3B21B79DE3800E50926 /* ProductAttributeViewController.swift */,
 				26AFB3B41B79DE3800E50926 /* ProductDescriptionViewController.swift */,
@@ -905,26 +915,21 @@
 				26AFB3B11B79DE3800E50926 /* ProductViewsViewController.swift */,
 				0CC8A63D1B7B9BF600C91425 /* ProfileViewController.swift */,
 				0CE35EB71B76711400AAA8F1 /* RegisterViewController.swift */,
+				0C5925FF1B8327BA0021EA76 /* ResultViewController.swift */,
 				0C9937271B750583000D6074 /* SearchViewController.swift */,
 				0C5111D31B81CD69002F0001 /* SellerViewController.swift */,
 				0CB9DB3A1B6A3EA100F2CA13 /* StarterContentPageViewController.swift */,
 				0CB9DB381B6A3DC700F2CA13 /* StartPageViewController.swift */,
-				0C329E861B7B73A4005BE2B6 /* TodaysPromoViewController.swift */,
-				0C9937281B750583000D6074 /* WishlistViewController.swift */,
-				2689FBF51B80412D007BEA68 /* CategoriesTableViewCell.swift */,
-				2689FBFD1B844A69007BEA68 /* CheckoutContainerViewController.swift */,
-				0C5925FF1B8327BA0021EA76 /* ResultViewController.swift */,
 				0C2F44A31B848B3A00021F45 /* SummaryViewController.swift */,
-				0C2F44A71B848B5300021F45 /* PaymentViewController.swift */,
-				0C2F44AB1B848B7E00021F45 /* OverViewViewController.swift */,
-				26D54FDD1B860CF400522398 /* TransactionViewController.swift */,
-				268C1BAA1B864D8B009FA106 /* TransactionDetailsViewController.swift */,
-				26DFF62E1B879126005D8EDE /* TransactionProductDetailsViewController.swift */,
-				26DFF6321B8791B5005D8EDE /* TransactionViews.swift */,
+				0C329E861B7B73A4005BE2B6 /* TodaysPromoViewController.swift */,
 				2614E63E1B885BFA00EE8B35 /* TransactionDeliveryLogViewController.swift */,
 				2614E63F1B885BFA00EE8B35 /* TransactionDeliveryLogViewController.xib */,
+				268C1BAA1B864D8B009FA106 /* TransactionDetailsViewController.swift */,
 				2614E6501B89051B00EE8B35 /* TransactionLeaveFeedbackViewController.swift */,
 				2614E6511B89051B00EE8B35 /* TransactionLeaveFeedbackViewController.xib */,
+				26DFF62E1B879126005D8EDE /* TransactionProductDetailsViewController.swift */,
+				26D54FDD1B860CF400522398 /* TransactionViewController.swift */,
+				26DFF6321B8791B5005D8EDE /* TransactionViews.swift */,
 			);
 			path = ViewController;
 			sourceTree = "<group>";
@@ -1019,6 +1024,7 @@
 				0C9937361B750583000D6074 /* VerticalImageCollectionViewCell.xib */,
 				0C9937371B750583000D6074 /* ViewMoreFooterCollectionViewCell.xib */,
 				7987F3191B7B746000B02DF4 /* WishlistTableViewCell.xib */,
+				79AA08341B8F4E6300AF3AA4 /* CartProductAttributeTableViewCell.xib */,
 			);
 			path = Xib;
 			sourceTree = "<group>";
@@ -1235,6 +1241,7 @@
 				0C374F341B88E3790050AE1D /* NewAddressTableViewCell.xib in Resources */,
 				0C374F331B88E3790050AE1D /* DeliverToTableViewCell.xib in Resources */,
 				0C374F3A1B88E3790050AE1D /* ProductsTableViewCell.xib in Resources */,
+				79AA08351B8F4E6300AF3AA4 /* CartProductAttributeTableViewCell.xib in Resources */,
 				0C9937681B750583000D6074 /* ProductWithCenterNameCollectionViewCell.xib in Resources */,
 				0C374F321B88E3790050AE1D /* ProfileViewController.xib in Resources */,
 				0C2F44DE1B85840F00021F45 /* CheckoutViews.xib in Resources */,
@@ -1407,6 +1414,7 @@
 				0C99374B1B750583000D6074 /* HomePageCollectionViewLayout.swift in Sources */,
 				0CD103EC1B8B4769002E15F4 /* DynamicRoundedView.swift in Sources */,
 				0C9937451B750583000D6074 /* DiscountLabel.swift in Sources */,
+				79AA08331B8F4DCF00AF3AA4 /* CartProductAttributeTableViewCell.swift in Sources */,
 				0C374F5D1B8A2DBF0050AE1D /* CustomizeShoppingFlowLayout.swift in Sources */,
 				0C329E881B7B73A4005BE2B6 /* TodaysPromoViewController.swift in Sources */,
 				0C5111D81B81CEE7002F0001 /* SellerTableHeaderView.swift in Sources */,
diff --git a/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift b/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift
index 5e25530..612e7f5 100644
--- a/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift
+++ b/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift
@@ -33,9 +33,11 @@ struct APIAtlas {
     static let cartUrl = "auth/cart/getCart"
     static let wishlistUrl = "auth/cart/getCart"
     static let updateWishlistUrl = "auth/cart/updateCartItem"
+    static let updateCartUrl = "auth/cart/updateCartItem"
     static let getSellerUrl = "v1/get-seller"
     static let productReviewUrl = "v1/product-review"
     static let productPageUrl = "v1/get-product"
+    static let searchUrl = "product/getSearchKeywords"
     static let baseUrl = APIEnvironment.baseUrl()
 }
 
diff --git a/YiLinkerOnlineBuyer/resources/Model/CartProductDetailsModel.swift b/YiLinkerOnlineBuyer/resources/Model/CartProductDetailsModel.swift
index f7bf666..7096119 100644
--- a/YiLinkerOnlineBuyer/resources/Model/CartProductDetailsModel.swift
+++ b/YiLinkerOnlineBuyer/resources/Model/CartProductDetailsModel.swift
@@ -1,65 +1,83 @@
 //
-//  CartProductDetailsModel.swift
+//  ProductDetailsModel.swift
 //  YiLinkerOnlineBuyer
 //
-//  Created by John Paul Chan on 8/12/15.
+//  Created by Rj Constantino on 8/7/15.
 //  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
 //
 
-import UIKit
+import Foundation
 
-class CartProductDetailsModel: NSObject {
+class CartProductDetailsModel {
     
-    var id: Int = 0
+    var selected: Bool = false
+    
+    var id: String = ""
     var title: String = ""
-    var image: NSURL = NSURL(string: "")!
+    var slug: String = ""
+    var image: String = ""
+    var images: [String] = []
     var shortDescription: String = ""
     var fullDescription: String = ""
     var sellerId: Int = 0
-    var originalPrice: Float = 0
-    var newPrice: Float = 0
-    var discount: Float = 0
-    var details: [String] = []
     
-    var attributes: [ProductAttributeModel] = []
-    var combinations: [ProductAvailableAttributeCombinationModel] = []
+    var attributes: [ProductAttributeModel] = [] //done
+    var productUnits: [ProductUnitsModel] = []
     
-    init(id: Int, title: String, image: NSURL, originalPrice: Float, newPrice: Float, discount: Float, shortDescription: String, fullDescription: String, sellerId: Int, details: NSArray, attributes: NSArray, combinations: NSArray) {
-        
+    var unitId: String = ""
+    var itemId: Int = 0
+    var quantity: Int = 0
+    
+    //DETAILS ???
+    //BADGES  ???
+    
+    init(selected: Bool, id: String, title: String, slug: String, image: String, images: NSArray, shortDescription: String, fullDescription: String, sellerId: Int, attributes: NSArray, productUnits: NSArray, unitId: String, itemId: Int, quantity: Int) {
+        self.selected = selected
         self.id = id
         self.title = title
+        self.slug = slug
         self.image = image
-        self.originalPrice = originalPrice
-        self.newPrice = newPrice
-        self.discount = discount
+        self.images = images as! [String]
         self.shortDescription = shortDescription
         self.fullDescription = fullDescription
         self.sellerId = sellerId
+        
         self.attributes = attributes as! [ProductAttributeModel]
-        self.combinations = combinations as! [ProductAvailableAttributeCombinationModel]
+        self.productUnits = productUnits as! [ProductUnitsModel]
+        
+        self.unitId = unitId
+        self.itemId = itemId
+        self.quantity = quantity
     }
     
     class func parseDataWithDictionary(dictionary: AnyObject) -> CartProductDetailsModel {
         
-        var message: String = ""
-        var isSuccessful: String = ""
-        
-        var id: Int = 0
+        var selected: Bool = false
+        var id: String = ""
         var title: String = ""
-        var image: NSURL = NSURL(string: "")!
+        var slug: String = ""
+        var image: String = ""
+        var images: [String] = []
         var shortDescription: String = ""
         var fullDescription: String = ""
         var sellerId: Int = 0
-        var originalPrice: Float = 0
-        var newPrice: Float = 0
-        var discount: Float = 0
-        var details: [String] = []
         
-        var attributes: [ProductAttributeModel] = []
+        var attributes: [ProductAttributeModel] = [] //done
+        var productUnits: [ProductUnitsModel] = []
+        
+        var unitId: String = ""
+        var itemId: Int = 0
+        var quantity: Int = 0
+        
+        //DETAILS ???
+        //BADGES  ???
+        
+        // ----
         var combinations: [ProductAvailableAttributeCombinationModel] = []
         
         if dictionary.isKindOfClass(NSDictionary) {
-            if let tempVar = dictionary["id"] as? Int {
+            
+            if let tempVar = dictionary["id"] as? String {
                 id = tempVar
             }
             
@@ -67,8 +85,17 @@ class CartProductDetailsModel: NSObject {
                 title = tempVar
             }
             
+            if let tempVar = dictionary["slug"] as? String {
+                slug = tempVar
+            }
+            
+            
             if let tempVar = dictionary["image"] as? String {
-                image = NSURL(string: tempVar)!
+                image = tempVar
+            }
+            
+            if let tempVar = dictionary["images"] as? NSArray {
+                images = tempVar as! [String]
             }
             
             if let tempVar = dictionary["shortDescription"] as? String {
@@ -83,45 +110,48 @@ class CartProductDetailsModel: NSObject {
                 sellerId = tempVar
             }
             
-            if let tempVar = dictionary["originalPrice"] as? Float {
-                originalPrice = tempVar
+            for subValue in dictionary["attributes"] as! NSArray {
+                let model: ProductAttributeModel = ProductAttributeModel.parseAttribute(subValue as! NSDictionary)
+                attributes.append(model)
             }
             
-            if let tempVar = dictionary["newPrice"] as? Float {
-                newPrice = tempVar
+            for subValue in dictionary["productUnits"] as! NSArray {
+                let model: ProductUnitsModel = ProductUnitsModel.parseProductUnits(subValue as! NSDictionary)
+                productUnits.append(model)
             }
             
-            if let tempVar = dictionary["discount"] as? Float {
-                discount = tempVar
+            if let tempVar = dictionary["unitId"] as? String {
+                unitId = tempVar
             }
             
-            for subValue in dictionary["attributes"] as! NSArray {
-                let model: ProductAttributeModel = ProductAttributeModel.parseAttribute(subValue as! NSDictionary)
-                attributes.append(model)
+            if let tempVar = dictionary["itemId"] as? Int {
+                itemId = tempVar
             }
             
-            for subValue in dictionary["availableAttributeCombi"] as! NSArray {
-                let model: ProductAvailableAttributeCombinationModel = ProductAvailableAttributeCombinationModel.parseCombination(subValue as! NSDictionary)
-                
-                combinations.append(model)
-                
-                
+            if let tempVar = dictionary["quantity"] as? Int {
+                quantity = tempVar
             }
-        } // end if dictionary
+            
+            // data
+        } // dictionary
         
-        return  CartProductDetailsModel(id: id,
-            title: title, image: image,
-            originalPrice: originalPrice,
-            newPrice: newPrice,
-            discount: discount,
+        return CartProductDetailsModel(
+            selected: selected,
+            id: id,
+            title: title,
+            slug: slug,
+            image: image,
+            images: images,
             shortDescription: shortDescription,
             fullDescription: fullDescription,
             sellerId: sellerId,
-            details: details,
             attributes: attributes,
-            combinations: combinations)
+            productUnits: productUnits,
+            unitId: unitId,
+            itemId: itemId,
+            quantity: quantity)
         
         
-    }// parseDataWithDictionary
+    } // parseDataWithDictionary
     
-}
+}
\ No newline at end of file
diff --git a/YiLinkerOnlineBuyer/resources/Model/SearchSuggestionModel.swift b/YiLinkerOnlineBuyer/resources/Model/SearchSuggestionModel.swift
index 2c2f3a7..512d114 100644
--- a/YiLinkerOnlineBuyer/resources/Model/SearchSuggestionModel.swift
+++ b/YiLinkerOnlineBuyer/resources/Model/SearchSuggestionModel.swift
@@ -12,9 +12,28 @@ class SearchSuggestionModel: NSObject {
    
     var suggestion: String = ""
     var imageURL: String = ""
+    var searchUrl: String = ""
     
-    init(suggestion: String, imageURL: String) {
+    init(suggestion: String, imageURL: String, searchUrl: String) {
         self.suggestion = suggestion
         self.imageURL = imageURL
+        self.searchUrl = searchUrl
+    }
+    
+    class func parseDataFromDictionary(dictionary: NSDictionary) -> SearchSuggestionModel {
+        var suggestion: String = ""
+        var imageURL: String = "SearchBrowseCategory"
+        var searchUrl: String = ""
+        
+        
+        if let tempVar = dictionary["keyword"] as? String {
+            suggestion = tempVar
+        }
+        
+        if let tempVar = dictionary["searchUrl"] as? String {
+            searchUrl = tempVar
+        }
+        
+        return SearchSuggestionModel(suggestion: suggestion, imageURL: imageURL, searchUrl: searchUrl)
     }
 }
diff --git a/YiLinkerOnlineBuyer/resources/View/CartProductAttributeTableViewCell.swift b/YiLinkerOnlineBuyer/resources/View/CartProductAttributeTableViewCell.swift
new file mode 100644
index 0000000..5e09fdc
--- /dev/null
+++ b/YiLinkerOnlineBuyer/resources/View/CartProductAttributeTableViewCell.swift
@@ -0,0 +1,123 @@
+//
+//  ProductAttributeTableViewCell.swift
+//  YiLinkerOnlineBuyer
+//
+//  Created by Rj Constantino on 8/5/15.
+//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
+//
+
+import UIKit
+
+protocol CartProductAttributeTableViewCellDelegate {
+    func selectedAttribute(attributeId: String)
+    func deselectedAttribute(attributeId: String)
+}
+
+class CartProductAttributeTableViewCell: UITableViewCell {
+    
+    var delegate: CartProductAttributeTableViewCellDelegate?
+    
+    @IBOutlet weak var attributeLabel: UILabel!
+    @IBOutlet weak var scrollView: UIScrollView!
+    
+    var filter: FilterAttributeModel!
+    var productAttribute: ProductAttributeModel!
+    var productUnit: ProductUnitsModel!
+    
+    var attributeIDs: [String] = []
+    var unitIDs: [String] = []
+    
+    var availableCombinations = [String: [String]]()
+    
+    override func awakeFromNib() {
+        super.awakeFromNib()
+    }
+    
+    
+    func passModel(model: ProductAttributeModel, selectedProductUnit: ProductUnitsModel, availableCombination: [String: [String]], unitID: [String]){
+        productAttribute = model
+        filter = FilterAttributeModel(title: model.attributeName, attributes: model.valueName)
+        productUnit = selectedProductUnit
+        
+        attributeIDs = productAttribute.valueId
+        
+        unitIDs = unitID
+        initializeScrollView()
+    }
+    
+    func initializeScrollView() {
+        attributeLabel.text = filter.title
+        
+        var x: Int = 0
+        var contentWidth = 0
+        println(filter.attributes.count)
+        for var i = 0; i < filter.attributes.count; i++ {
+            var width = (count(filter.attributes[i]) * 10) + 20
+            
+            var button = UIButton(frame: CGRectMake(CGFloat(x), CGFloat(10), CGFloat(width), scrollView.frame.height/1.5))
+            button.setTitle(filter.attributes[i] as String, forState: .Normal)
+            button.titleLabel?.font = UIFont.boldSystemFontOfSize(15.0)
+            button.setTitleColor(UIColor.darkGrayColor(), forState: .Normal)
+            button.layer.borderWidth = 1.2
+            button.layer.borderColor = UIColor.darkGrayColor().CGColor
+            button.layer.cornerRadius = button.frame.height/2
+            button.backgroundColor = UIColor.whiteColor()
+            button.tag = attributeIDs[i].toInt()!
+            button.addTarget(self, action: "clickedAttribute:", forControlEvents: .TouchUpInside)
+            
+            x += width + 10
+            
+            if contains(productUnit.combination, attributeIDs[i]){
+                SelectButton(button)
+            }
+            
+            scrollView.addSubview(button)
+        }
+        
+        scrollView.contentSize = CGSize(width: CGFloat(x), height: scrollView.frame.size.height)
+    }
+    
+    
+    func clickedAttribute(sender: UIButton!) {
+        
+        if sender.selected {
+            DeselectButton(sender)
+        } else {
+            for view in scrollView.subviews as! [UIView]{
+                if let button = view as? UIButton {
+                    DeselectButton(button)
+                }
+            }
+            SelectButton(sender)
+            
+            delegate?.selectedAttribute("\(sender.tag)")
+        }
+    }
+    
+    func DeselectButton(button: UIButton) {
+        button.selected = false
+        button.layer.borderColor = UIColor.darkGrayColor().CGColor
+        button.backgroundColor = UIColor.whiteColor()
+        button.setTitleColor(UIColor.darkGrayColor(), forState: .Normal)
+        
+        delegate?.deselectedAttribute("\(button.tag)")
+    }
+    
+    func SelectButton(button: UIButton) {
+        button.selected = true
+        button.layer.borderColor = UIColor.purpleColor().CGColor
+        button.backgroundColor = UIColor.purpleColor()
+        button.setTitleColor(UIColor.whiteColor(), forState: .Normal)
+    }
+
+    func enableButton(button: UIButton) {
+        button.alpha = 1.0
+        button.enabled = true
+    }
+    
+    func disableButton(button: UIButton) {
+        button.alpha = 0.3
+        button.enabled = false
+    }
+    
+}
diff --git a/YiLinkerOnlineBuyer/resources/ViewController/CartProductAttributeViewController.swift b/YiLinkerOnlineBuyer/resources/ViewController/CartProductAttributeViewController.swift
index e6bf4ac..433d4fc 100644
--- a/YiLinkerOnlineBuyer/resources/ViewController/CartProductAttributeViewController.swift
+++ b/YiLinkerOnlineBuyer/resources/ViewController/CartProductAttributeViewController.swift
@@ -13,7 +13,7 @@ protocol CartProductAttributeViewControllerDelegate {
     func pressedDoneAttribute(controller: CartProductAttributeViewController)
 }
 
-class CartProductAttributeViewController: UIViewController, UITableViewDelegate, ProductAttributeTableViewCellDelegate {
+class CartProductAttributeViewController: UIViewController, UITableViewDelegate, CartProductAttributeTableViewCellDelegate {
     
     var manager = APIManager()
     
@@ -35,12 +35,14 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
     var maximumStock = 1
     var stocks: Int = 0
     
-    var cartModel : CartModel?
     var productDetailModel: CartProductDetailsModel?
-    var attributes: [ProductAttributeModel] = []
-    var availableCombinations: [ProductAvailableAttributeCombinationModel] = []
-    var selectedValue: [String] = []
-    var selectedCombination: [Int] = []
+    var selectedProductUnit: ProductUnitsModel!
+    
+    var availableCombinations = [String: [String]]()
+    
+    var selectedCombinations: [String] = []
+    
+    var unitIDs: [String] = []
     
     override func viewDidLoad() {
         super.viewDidLoad()
@@ -49,8 +51,8 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
         stocksLabel.layer.borderColor = UIColor.grayColor().CGColor
         stocksLabel.layer.cornerRadius = 5
         
-        let nib = UINib(nibName: "ProductAttributeTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "AttributeTableCell")
+        let nib = UINib(nibName: "CartProductAttributeTableViewCell", bundle: nil)
+        self.tableView.registerNib(nib, forCellReuseIdentifier: "CartProductAttributeTableViewCell")
         
         let tap = UITapGestureRecognizer()
         tap.numberOfTapsRequired = 1
@@ -63,10 +65,10 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
         
         var params = Dictionary<String, String>()
         
-        params["access_token"] = "access_token"
-        params["productId"] = "\(cartModel?.productDetails.id)"
-        params["unitId"] = "\(cartModel?.unitId)"
-        params["quantity"] = "\(quantity)"
+        params["access_token"] = SessionManager.accessToken()
+        params["productId"] = "\(productDetailModel?.id)"
+        params["unitId"] = "\(productDetailModel?.unitId)"
+        params["quantity"] = "\(productDetailModel?.quantity)"
         
         showLoader()
         manager.GET(url, parameters: params, success: {
@@ -88,18 +90,15 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
     // MARK: - Table View Data Source
     
     func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return attributes.count
+        return productDetailModel!.attributes.count
     }
     
     func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: ProductAttributeTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("AttributeTableCell") as! ProductAttributeTableViewCell
-        
-//        cell.delegate = self
-//        cell.passAvailableCombination(availableCombinations)
-        
-//        cell.tag = indexPath.row
-//        cell.setAttribute(name: attributes[indexPath.row].attributeName, values: attributes[indexPath.row].valueName, id: attributes[indexPath.row].valueId, selectedValue: selectedValue)
+        let cell: CartProductAttributeTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("CartProductAttributeTableViewCell") as! CartProductAttributeTableViewCell
         
+        var productAttribute: ProductAttributeModel = productDetailModel!.attributes[indexPath.row]
+        cell.delegate = self
+        cell.passModel(productAttribute, selectedProductUnit: selectedProductUnit, availableCombination: availableCombinations, unitID: unitIDs)
         return cell
     }
     
@@ -121,8 +120,6 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
     
     @IBAction func cancelAction(sender: AnyObject!) {
         self.dismissViewControllerAnimated(true, completion: nil)
-        println(attributes.count)
-        println(availableCombinations.count)
         if let delegate = self.delegate {
             delegate.pressedCancelAttribute(self)
         }
@@ -134,42 +131,79 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
     
     // MARK: - Methods
     
-    func passModel(#cartModel: CartModel, combinationModel: [ProductAvailableAttributeCombinationModel], selectedValue: NSArray, quantity: Int) {
-        //setDetail("\(cartModel.productDetails.image)", title: cartModel.productDetails.title, price: cartModel.productDetails.newPrice)
-        self.cartModel = cartModel
-        self.attributes = cartModel.productDetails.attributes as [ProductAttributeModel]
-        self.availableCombinations = combinationModel
-        self.selectedValue = selectedValue as! [String]
-        self.selectedCombination = combinationModel[0].combination
-        self.maximumStock = combinationModel[0].quantity
+    func passModel(#cartModel: CartProductDetailsModel, selectedProductUnits: ProductUnitsModel) {
+        productDetailModel = cartModel
+        setDetail(productDetailModel!.image, title: productDetailModel!.title, price: selectedProductUnits.discountedPrice)
+        self.maximumStock = selectedProductUnits.quantity
+        stocks = cartModel.quantity
+        checkStock(stocks)
+        selectedProductUnit = selectedProductUnits
+        self.availabilityStocksLabel.text = "Available stocks : " + String(maximumStock)
         
-        stocks = quantity
+        selectedCombinations = selectedProductUnit.combination
         
-        checkStock(stocks)
+        getAvailableCombinations()
     }
     
-    func selectedAttribute(controller: ProductAttributeTableViewCell, attributeIndex: Int, attributeValue: String!, attributeId: Int) {
-        stocks = 0
-        checkStock(stocks)
-        self.selectedValue[attributeIndex + 1] = String(attributeValue)
-//        self.selectedCombination[attributeIndex] = attributeId
-        
-        maximumStock = availableStock(selectedCombination)
-        self.availabilityStocksLabel.text = "Available stocks : " + String(availableStock(selectedCombination))
-        
-        checkStock(stocks)
+    func selectedAttribute(attributeId: String){
+        println(selectedCombinations)
+        if !contains(selectedCombinations, attributeId) {
+            selectedCombinations.append(attributeId)
+            println(checkSelectedIfAvailable(selectedCombinations))
+            updateDetails(checkSelectedIfAvailable(selectedCombinations))
+        }
+        println(selectedCombinations)
     }
     
-    func availableStock(combination: NSArray) -> Int {
-        
-        for i in 0..<availableCombinations.count {
-            println(selectedCombination)
-            if availableCombinations[i].combination == selectedCombination {
-                println("benga! > \(availableCombinations[i].quantity)")
-                return availableCombinations[i].quantity
+    func deselectedAttribute(attributeId: String) {
+        println(selectedCombinations)
+        for var i = 0; i < selectedCombinations.count; i++ {
+            if selectedCombinations[i] == attributeId {
+                selectedCombinations.removeAtIndex(i)
+                break
             }
         }
-        return 0
+        updateDetails(checkSelectedIfAvailable(selectedCombinations))
+        println(selectedCombinations)
+    }
+    
+    func getAvailableCombinations() {
+        for var i = 0; i < productDetailModel!.productUnits.count; i++ {
+            unitIDs.append(productDetailModel!.productUnits[i].productUnitId)
+            availableCombinations[productDetailModel!.productUnits[i].productUnitId] = productDetailModel!.productUnits[i].combination
+        }
+    }
+    
+    func checkSelectedIfAvailable(selectedValues: [String]) -> String {
+        var checker: [Bool] = []
+        for var i = 0; i < availableCombinations.count; i++ {
+            let tempProductUnitId: String = self.productDetailModel!.productUnits[i].productUnitId
+            if sorted(selectedValues, <) == sorted(availableCombinations[tempProductUnitId]!, <) {
+                return tempProductUnitId
+            }
+        }
+        return ""
+    }
+    
+    func updateDetails(unitId: String) {
+        if !unitId.isEmpty {
+            for tempProductUnit in productDetailModel!.productUnits {
+                if unitId == tempProductUnit.productUnitId {
+                    selectedProductUnit = tempProductUnit
+                }
+            }
+            
+            self.maximumStock = selectedProductUnit.quantity
+            stocks = productDetailModel!.quantity
+            checkStock(stocks)
+            self.availabilityStocksLabel.text = "Available stocks : " + String(maximumStock)
+        } else {
+            self.maximumStock = 0
+            stocks = 0
+            checkStock(stocks)
+            self.availabilityStocksLabel.text = "Available stocks : " + String(0)
+        }
+        
     }
     
     func checkStock(stocks: Int) {
@@ -180,11 +214,11 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
             stocksLabel.text = String(stringInterpolationSegment: stocks)
         }
         
-        if stocks == 0  && maximumStock != 0 {
+        if stocks == 1  && maximumStock != 0 {
             enableButton(increaseButton)
             disableButton(decreaseButton)
             stocksLabel.alpha = 1.0
-        } else if stocks == 0  && maximumStock == 0{
+        } else if stocks == 1  && maximumStock == 0{
             stocksLabel.alpha = 0.3
             disableButton(increaseButton)
         } else if stocks == maximumStock {
@@ -199,11 +233,11 @@ class CartProductAttributeViewController: UIViewController, UITableViewDelegate,
         }
     }
     
-    func setDetail(image: String, title: String, price: Float) {
+    func setDetail(image: String, title: String, price: String) {
         
         productImageView.sd_setImageWithURL(NSURL(string: image), placeholderImage: UIImage(named: "dummy-placeholder"))
         nameLabel.text = title
-        priceLabel.text = String(format: "P %.2f", price)
+        priceLabel.text = price
     }
     
     func disableButton(button: UIButton) {
diff --git a/YiLinkerOnlineBuyer/resources/ViewController/CartViewController.swift b/YiLinkerOnlineBuyer/resources/ViewController/CartViewController.swift
index 20ca9aa..3580014 100644
--- a/YiLinkerOnlineBuyer/resources/ViewController/CartViewController.swift
+++ b/YiLinkerOnlineBuyer/resources/ViewController/CartViewController.swift
@@ -8,7 +8,7 @@
 
 import UIKit
 
-class CartViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, CartTableViewCellDelegate, CartProductAttributeViewControllerDelegate {
+class CartViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, CartTableViewCellDelegate, CartProductAttributeViewControllerDelegate, EmptyViewDelegate {
     
     var manager = APIManager()
     
@@ -20,12 +20,14 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
     
     @IBOutlet var checkoutButton: UIButton!
     
-    var tableData: [CartModel] = []
+    var tableData: [CartProductDetailsModel] = []
     var selectedValue: [String] = []
     
     //formatter of Text to remove trailing decimal
     let formatter = NSNumberFormatter()
     
+     var emptyView: EmptyView?
+    
     override func viewDidLoad() {
         super.viewDidLoad()
         manager = APIManager.sharedInstance
@@ -50,117 +52,107 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
     
     override func viewDidAppear(animated: Bool) {
         super.viewDidAppear(true)
+        if emptyView != nil {
+            emptyView?.hidden = true
+        }
+        NSNotificationCenter.defaultCenter().postNotificationName("SwipeForOptionsCellEnclosingTableViewDidBeginScrollingNotification", object: self)
         
-        populateWishListTableView()
+        getCartData()
     }
     
     @IBAction func buttonClicked(sender: AnyObject) {
     }
     
+    //REST API request
+    //
+    
+    func getCartData() {
+        tableData = []
+        cartTableView.reloadData()
+        cartCounterLabel.text = ""
+        
+        if Reachability.isConnectedToNetwork() {
+            requestProductDetails(APIAtlas.cartUrl, params: NSDictionary(dictionary: ["access_token": SessionManager.accessToken()]))
+        } else {
+            addEmptyView()
+        }
+    }
+    
     func fireDeleteCartItem(url: String, params: NSDictionary!) {
         showLoader()
-        manager.DELETE(url, parameters: params, success: {
-                (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                print(responseObject as! NSDictionary)
-                self.updateCounterLabel()
-                self.dismissLoader()
+        manager.POST(url, parameters: params, success: {
+            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in print(responseObject as! NSDictionary)
+            if responseObject.objectForKey("error") != nil {
+                self.requestRefreshToken("getCart", url: url, params: params)
+            } else {
+                self.populateTableView(responseObject)
+            }
+            
             }, failure: {
                 (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
+                self.showAlert("Error", message: "Something went wrong. . .")
                 self.dismissLoader()
         })
     }
     
-    func requestProductDetails(url: String, params: NSDictionary!) {
+    func fireAddToCartItem(url: String, params: NSDictionary!) {
         showLoader()
-        manager.GET(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            //print(responseObject as! NSDictionary)
-            
-            if let value: AnyObject = responseObject["data"] {
-                for subValue in value["cartItems"] as! NSArray {
-                    
-                    let model: CartModel = CartModel.parseDataWithDictionary(subValue as! NSDictionary)
-                    
-                    self.tableData.append(model)
-                }
-                self.cartTableView.reloadData()
+        manager.POST(url, parameters: params, success: {
+            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in print(responseObject as! NSDictionary)
+            if responseObject.objectForKey("error") != nil {
+                self.requestRefreshToken("editToCart", url: url, params: params)
             }
-            self.updateCounterLabel()
             self.dismissLoader()
-            
             }, failure: {
                 (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
+                self.showAlert("Error", message: "Something went wrong. . .")
                 self.dismissLoader()
         })
     }
     
-    func fireDeleteCartItem(url: String, index: Int!) {
-        
-        var params = Dictionary<String, String>()
-        
-        var cartModelTemp = tableData[index]
-        
-        params["access_token"] = "access_token"
-        params["productId"] = "\(cartModelTemp.productDetails.id)"
-        params["unitId"] = "\(cartModelTemp.unitId)"
-        params["quantity"] = "\(0)"
-        
+    func requestProductDetails(url: String, params: NSDictionary!) {
         showLoader()
+        
         manager.GET(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            self.dismissLoader()
-            self.populateWishListTableView()
+            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in print(responseObject as! NSDictionary)
+            if responseObject.objectForKey("error") != nil {
+                self.requestRefreshToken("getCart", url: url, params: params)
+            } else {
+                self.populateTableView(responseObject)
+            }
             }, failure: {
                 (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
+                self.showAlert("Error", message: "Something went wrong. . .")
+                self.updateCounterLabel()
                 self.dismissLoader()
         })
     }
     
-    func seeMoreAttribute(index: Int) {
-        
-        var tempModel: CartModel = tableData[index]
-        
-        selectedValue = []
-        //selectedValue.append(String(tempModel.productDetails.combinations[0].quantity) + "x")
-        
-        var tempAttributeId: [Int] = []
-        var tempAttributeName: [String] = []
-        
-//        for tempAttribute in tempModel.productDetails.attributes{
-//            tempAttributeId += tempAttribute.valueId
-//            tempAttributeName += tempAttribute.valueName
-//        }
-        
-        for tempId in tempModel.selectedAttributes {
-            if let index = find(tempAttributeId, tempId) {
-                selectedValue.append(tempAttributeName[index])
+    func populateTableView(responseObject: AnyObject) {
+        tableData.removeAll(keepCapacity: false)
+        if let value: AnyObject = responseObject["data"] {
+            for subValue in value["items"] as! NSArray {
+                println(subValue)
+                let model: CartProductDetailsModel = CartProductDetailsModel.parseDataWithDictionary(subValue as! NSDictionary)
+                
+                self.tableData.append(model)
             }
+            self.cartTableView.reloadData()
         }
-        
-        println(selectedValue)
-        
-        var attributeModal = CartProductAttributeViewController(nibName: "CartProductAttributeViewController", bundle: nil)
-        attributeModal.delegate = self
-        attributeModal.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext
-        attributeModal.providesPresentationContextTransitionStyle = true
-        attributeModal.definesPresentationContext = true
-        attributeModal.view.backgroundColor = UIColor.clearColor()
-        attributeModal.view.frame.origin.y = attributeModal.view.frame.size.height
-       // attributeModal.passModel(cartModel: tableData[index], combinationModel: tempModel.productDetails.combinations, selectedValue: selectedValue, quantity: tempModel.quantity)
-        //        self.navigationController?.presentViewController(attributeModal, animated: true, completion: nil)
-        self.tabBarController?.presentViewController(attributeModal, animated: true, completion: nil)
-        
-        UIView.animateWithDuration(0.3, animations: {
-            self.dimView.alpha = 0.5
-            self.view.transform = CGAffineTransformMakeScale(0.92, 0.95)
-            self.navigationController?.navigationBar.alpha = 0.0
-        })
-
+        self.updateCounterLabel()
+        self.calculateTotalPrice()
+        self.dismissLoader()
     }
     
+    func updateCounterLabel() {
+        if tableData.count < 2 {
+            cartCounterLabel.text = "You have \(tableData.count) item in your cart"
+        } else {
+            cartCounterLabel.text = "You have \(tableData.count) items in your cart"
+        }
+    }
+    
+    
     //Loader function
     func showLoader() {
         SVProgressHUD.show()
@@ -171,31 +163,24 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
         SVProgressHUD.dismiss()
     }
     
-    // MARK: Methods Updating Values
-    func populateWishListTableView () {
-        tableData = []
-        //requestProductDetails(APIAtlas.cartUrl, params: nil)
-        requestProductDetails("http://demo3526363.mockable.io/api/v1/auth/cart/getCart", params: nil)
-    }
-    
-    func updateCounterLabel() {
-        if tableData.count < 2 {
-            cartCounterLabel.text = "You have \(tableData.count) item in your cart"
-        } else{
-            cartCounterLabel.text = "You have \(tableData.count) items in your cart"
-        }
-    }
-    
     func calculateTotalPrice() {
         var totalPrice: Double = 0.0
         for tempModel in tableData {
             if tempModel.selected {
-                //totalPrice += (Double(tempModel.productDetails.newPrice) * Double(tempModel.quantity))
+                for tempProductUnit in tempModel.productUnits {
+                     if tempModel.unitId == tempProductUnit.productUnitId {
+                        let discountedPrice = (tempProductUnit.discountedPrice as NSString).doubleValue
+                        let quantity = Double(tempModel.quantity)
+                        totalPrice = totalPrice + (quantity * discountedPrice)
+                    }
+                }
             }
         }
         totalPriceLabel.text = "P \(formatter.stringFromNumber(totalPrice)!)"
     }
     
+    
+
     // MARK: - Table View Delegate
     func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
         return self.tableData.count
@@ -203,41 +188,40 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
     
     func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell 	{
         var cell:CartTableViewCell = self.cartTableView.dequeueReusableCellWithIdentifier("CartTableViewCell") as! CartTableViewCell
-        
-        
         //Set cell data
-        var tempModel: CartModel = tableData[indexPath.row]
+        var tempModel: CartProductDetailsModel = tableData[indexPath.row]
         
-        for selectedProductUnit in tempModel.selectedAttributes {
-            for tempProductUnit in tempModel.productDetails.productUnits {
-                if selectedProductUnit == tempProductUnit.productUnitId.toInt() {
-                    if tempProductUnit.imageIds.count == 0 {
-                        cell.productItemImageView.sd_setImageWithURL(NSURL(string: tempModel.productDetails.image), placeholderImage: UIImage(named: "dummy-placeholder"))
-                    } else {
-                        cell.productItemImageView.sd_setImageWithURL(NSURL(string: tempProductUnit.imageIds[0]), placeholderImage: UIImage(named: "dummy-placeholder"))
-                    }
-                    
-                    var tempAttributesText: String = ""
-                    for tempId in tempProductUnit.combination {
-                        for tempAttributes in tempModel.productDetails.attributes {
-                            if let index = find(tempAttributes.valueId, tempId) {
-                                if tempAttributesText.isEmpty {
-                                    tempAttributesText = tempAttributes.valueName[index]
-                                } else {
-                                    tempAttributesText += " | " + tempAttributes.valueName[index]
-                                }
+        cell.checkBox.selected = false
+        cell.checkBox.backgroundColor = UIColor.whiteColor()
+        cell.checkBox.layer.borderWidth = 1
+        cell.checkBox.layer.borderColor = UIColor.darkGrayColor().CGColor
+        
+        for tempProductUnit in tempModel.productUnits {
+            if tempModel.unitId == tempProductUnit.productUnitId {
+                if tempProductUnit.imageIds.count == 0 {
+                    cell.productItemImageView.sd_setImageWithURL(NSURL(string: tempModel.image), placeholderImage: UIImage(named: "dummy-placeholder"))
+                } else {
+                    cell.productItemImageView.sd_setImageWithURL(NSURL(string: tempProductUnit.imageIds[0]), placeholderImage: UIImage(named: "dummy-placeholder"))
+                }
+                
+                var tempAttributesText: String = ""
+                for tempId in tempProductUnit.combination {
+                    for tempAttributes in tempModel.attributes {
+                        if let index = find(tempAttributes.valueId, tempId) {
+                            if tempAttributesText.isEmpty {
+                                tempAttributesText = tempAttributes.valueName[index]
+                            } else {
+                                tempAttributesText += " | " + tempAttributes.valueName[index]
                             }
                         }
                     }
-                    cell.productDetailsLabel?.text = tempAttributesText
-                    
-                    
-                    cell.productPriceLabel.text = "P" + tempProductUnit.discountedPrice + " x\(tempModel.quantity)"
                 }
+                cell.productDetailsLabel?.text = tempAttributesText
+                cell.productPriceLabel.text = "P " + tempProductUnit.discountedPrice + " x \(tempModel.quantity)"
             }
         }
         
-        cell.productNameLabel.text = tempModel.productDetails.title
+        cell.productNameLabel.text = tempModel.title
         
         cell.delegate = self
         return cell
@@ -254,14 +238,78 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
     
     // MARK: - Wishlist Table View Delegate
     func deleteButtonActionForIndex(sender: AnyObject){
-        var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
-        var rowOfTheCell: Int = pathOfTheCell.row
-        fireDeleteCartItem("https://demo3526363.mockable.io/api/v1/auth/cart/updateCartItem", index: rowOfTheCell)
+        if Reachability.isConnectedToNetwork() {
+            var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
+            var rowOfTheCell: Int = pathOfTheCell.row
+            
+            let tempModel: CartProductDetailsModel = tableData[rowOfTheCell]
+            
+            var params: NSDictionary = ["access_token": SessionManager.accessToken(),
+                "productId": tempModel.id,
+                "unitId": tempModel.unitId,
+                "quantity": 0,
+            ]
+            fireDeleteCartItem(APIAtlas.updateCartUrl, params: params)
+        } else {
+            showAlert("Connection Unreachable", message: "Cannot retrieve data. Please check your internet connection.")
+        }
+    }
+    
+    func seeMoreAttribute(index: Int) {
+        
+        var tempModel: CartProductDetailsModel = tableData[index]
+        var selectedProductUnits: ProductUnitsModel?
+        
+        for tempProductUnit in tempModel.productUnits {
+            if tempModel.unitId == tempProductUnit.productUnitId {
+                selectedProductUnits = tempProductUnit
+            }
+        }
+
+        
+        println(selectedValue)
+        
+        var attributeModal = CartProductAttributeViewController(nibName: "CartProductAttributeViewController", bundle: nil)
+        attributeModal.delegate = self
+        attributeModal.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext
+        attributeModal.providesPresentationContextTransitionStyle = true
+        attributeModal.definesPresentationContext = true
+        attributeModal.view.backgroundColor = UIColor.clearColor()
+        attributeModal.view.frame.origin.y = attributeModal.view.frame.size.height
+        attributeModal.passModel(cartModel: tempModel, selectedProductUnits: selectedProductUnits!)
+        self.tabBarController?.presentViewController(attributeModal, animated: true, completion: nil)
+        
+        UIView.animateWithDuration(0.3, animations: {
+            self.dimView.alpha = 0.5
+            self.view.transform = CGAffineTransformMakeScale(0.92, 0.95)
+            self.navigationController?.navigationBar.alpha = 0.0
+        })
+        
     }
     
     func editButtonActionForIndex(sender: AnyObject){
+        /*
+        if Reachability.isConnectedToNetwork() {
+            var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
+            var rowOfTheCell: Int = pathOfTheCell.row
+            
+            let tempModel: CartProductDetailsModel = tableData[rowOfTheCell]
+            
+            var params: NSDictionary = ["access_token": SessionManager.accessToken(),
+                "wishlist": "true",
+                "productId": tempModel.id,
+                "unitId": tempModel.unitId,
+                "quantity": tempModel.quantity
+            ]
+            
+            fireAddToCartItem(APIAtlas.updateCartUrl, params: params)
+        } else {
+            showAlert("Connection Unreachable", message: "Cannot retrieve data. Please check your internet connection.")
+        }*/
+        
         var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
         var rowOfTheCell: Int = pathOfTheCell.row
+
         seeMoreAttribute(rowOfTheCell)
     }
     
@@ -269,8 +317,7 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
         var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
         var rowOfTheCell: Int = pathOfTheCell.row
         
-        var tempModel: CartModel = tableData[rowOfTheCell]
-        tempModel.selected = state
+        tableData[rowOfTheCell].selected = state
 
         calculateTotalPrice()
     }
@@ -294,10 +341,79 @@ class CartViewController: UIViewController, UITableViewDelegate, UITableViewData
             self.dimView.alpha = 0
             self.navigationController?.navigationBar.alpha = 1.0
         })
+    }
+    
+    func didTapReload() {
+        emptyView?.hidden = true
+        getCartData()
+    }
+    
+    func addEmptyView() {
+        if self.emptyView == nil {
+            self.emptyView = UIView.loadFromNibNamed("EmptyView", bundle: nil) as? EmptyView
+            self.emptyView?.frame = self.view.frame
+            self.emptyView!.delegate = self
+            self.view.addSubview(self.emptyView!)
+        } else {
+            self.emptyView!.hidden = false
+        }
+    }
+    
+    func showAlert(title: String, message: String) {
+        let alertController = UIAlertController(title: title, message: message, preferredStyle: .Alert)
         
-        populateWishListTableView()
+        let OKAction = UIAlertAction(title: "OK", style: .Default) { (action) in
+            alertController.dismissViewControllerAnimated(true, completion: nil)
+            
+            let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
+            appDelegate.changeRootToHomeView()
+        }
+        
+        alertController.addAction(OKAction)
+        
+        self.presentViewController(alertController, animated: true) {
+            
+        }
     }
     
+    func requestRefreshToken(type: String, url: String, params: NSDictionary!) {
+        let url: String = "http://online.api.easydeal.ph/api/v1/login"
+        let params: NSDictionary = ["client_id": Constants.Credentials.clientID,
+            "client_secret": Constants.Credentials.clientSecret,
+            "grant_type": Constants.Credentials.grantRefreshToken,
+            "refresh_token": SessionManager.refreshToken()]
+        
+        let manager = APIManager.sharedInstance
+        manager.POST(url, parameters: params, success: {
+            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
+            
+            SVProgressHUD.dismiss()
+            
+            if (responseObject["isSuccessful"] as! Bool) {
+                SessionManager.parseTokensFromResponseObject(responseObject as! NSDictionary)
+                
+                if type == "getCart" {
+                    self.requestProductDetails(url, params: params)
+                } else if type == "editToCart" {
+                    self.fireAddToCartItem(url, params: params)
+                } else if type == "deleteWishlist" {
+                    self.fireDeleteCartItem(url, params: params)
+                }
+            } else {
+                self.showAlert("Error", message: responseObject["message"] as! String)
+            }
+            
+            }, failure: {
+                (task: NSURLSessionDataTask!, error: NSError!) in
+                SVProgressHUD.dismiss()
+                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
+                
+                self.showAlert("Something went wrong", message: "")
+                
+        })
+    }
+
+    
     /*
     // MARK: - Navigation
     
diff --git a/YiLinkerOnlineBuyer/resources/ViewController/SearchViewController.swift b/YiLinkerOnlineBuyer/resources/ViewController/SearchViewController.swift
index 1482096..a2529bb 100644
--- a/YiLinkerOnlineBuyer/resources/ViewController/SearchViewController.swift
+++ b/YiLinkerOnlineBuyer/resources/ViewController/SearchViewController.swift
@@ -9,6 +9,8 @@
 import UIKit
 
 class SearchViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate {
+    
+    let manager = APIManager.sharedInstance
 
     let viewControllerIndex = 1
     
@@ -53,13 +55,45 @@ class SearchViewController: UIViewController, UITableViewDelegate, UITableViewDa
         var nib = UINib(nibName: "SearchSuggestionTableViewCell", bundle: nil)
         searchResultTableView.registerNib(nib, forCellReuseIdentifier: "SearchSuggestionTableViewCell")
         
+        addBrowseCategory()
+    }
+    
+    func requestSearch(url: String, params: NSDictionary!) {
+        manager.operationQueue.cancelAllOperations()
+        manager.GET(url, parameters: params, success: {
+            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in print(responseObject as! NSDictionary)
+            if responseObject.objectForKey("error") != nil {
+            } else {
+                self.populateTableView(responseObject)
+            }
+            }, failure: {
+                (task: NSURLSessionDataTask!, error: NSError!) in
+                println(error)
+                self.showAlert("Error", message: "Something went wrong. . .")
+        })
+    }
+    
+    func populateTableView(responseObject: AnyObject) {
+        tableData.removeAll(keepCapacity: false)
+        if let value: AnyObject = responseObject["data"] {
+            for subValue in value as! NSArray {
+                let model: SearchSuggestionModel = SearchSuggestionModel.parseDataFromDictionary(subValue as! NSDictionary)
+                
+                self.tableData.append(model)
+            }
+            self.searchResultTableView.reloadData()
+        }
+        
+        addBrowseCategory()
+    }
+    
+    func addBrowseCategory() {
         if(self.tableData.isEmpty) {
-            var temp: SearchSuggestionModel = SearchSuggestionModel(suggestion: "Browse by Category", imageURL: "SearchBrowseCategory") as SearchSuggestionModel
+            var temp: SearchSuggestionModel = SearchSuggestionModel(suggestion: "Browse by Category", imageURL: "SearchBrowseCategory", searchUrl: "") as SearchSuggestionModel
             
             tableData.append(temp)
             self.searchResultTableView.reloadData()
         }
-
     }
     
     // Mark: - UISearchBarDelegate
@@ -72,6 +106,14 @@ class SearchViewController: UIViewController, UITableViewDelegate, UITableViewDa
         return true
     }
     
+    func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {
+        if count(searchText) > 2 {
+            if Reachability.isConnectedToNetwork(){
+                requestSearch(APIAtlas.searchUrl, params: NSDictionary(dictionary: ["queryString" : searchText]))
+            }
+        }
+    }
+    
     func searchBarShouldEndEditing(searchBar: UISearchBar) -> Bool {
         self.searchBar.showsScopeBar = false
         self.searchBar.sizeToFit()
@@ -79,12 +121,13 @@ class SearchViewController: UIViewController, UITableViewDelegate, UITableViewDa
         return true
     }
     
-    func searchBarCancelButtonClicked(searchBar: UISearchBar) {
-        self.searchBar.resignFirstResponder()
+    func searchBarSearchButtonClicked(searchBar: UISearchBar) {
+        var resultController = ResultViewController(nibName: "ResultViewController", bundle: nil)
+        self.navigationController?.pushViewController(resultController, animated:true);
     }
     
-    func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {
-        self.searchResultTableView.reloadData()
+    func searchBarCancelButtonClicked(searchBar: UISearchBar) {
+        self.searchBar.resignFirstResponder()
     }
     
     // Mark: - UITableViewDataSource methods
@@ -116,5 +159,19 @@ class SearchViewController: UIViewController, UITableViewDelegate, UITableViewDa
         var resultController = ResultViewController(nibName: "ResultViewController", bundle: nil)
         self.navigationController?.pushViewController(resultController, animated:true);
     }
+    
+    func showAlert(title: String, message: String) {
+        let alertController = UIAlertController(title: title, message: message, preferredStyle: .Alert)
+        
+        let OKAction = UIAlertAction(title: "OK", style: .Default) { (action) in
+            alertController.dismissViewControllerAnimated(true, completion: nil)
+        }
+        
+        alertController.addAction(OKAction)
+        
+        self.presentViewController(alertController, animated: true) {
+            
+        }
+    }
 
 }
diff --git a/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeTableViewCell.xib b/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeTableViewCell.xib
new file mode 100644
index 0000000..715c8ee
--- /dev/null
+++ b/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeTableViewCell.xib
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7706" systemVersion="14E46" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7703"/>
+        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
+    </dependencies>
+    <objects>
+        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner"/>
+        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
+        <tableViewCell contentMode="scaleToFill" selectionStyle="default" indentationWidth="10" reuseIdentifier="CartProductAttributeTableViewCell" rowHeight="104" id="HAD-JW-Pbd" customClass="CartProductAttributeTableViewCell" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
+            <rect key="frame" x="0.0" y="0.0" width="375" height="104"/>
+            <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
+            <tableViewCellContentView key="contentView" opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" tableViewCell="HAD-JW-Pbd" id="Fbv-wJ-UBe">
+                <rect key="frame" x="0.0" y="0.0" width="320" height="43"/>
+                <autoresizingMask key="autoresizingMask"/>
+                <subviews>
+                    <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="wgc-ni-1Sz" userLabel="Separator">
+                        <rect key="frame" x="0.0" y="103" width="375" height="1"/>
+                        <color key="backgroundColor" red="0.7019608021" green="0.7019608021" blue="0.7019608021" alpha="1" colorSpace="calibratedRGB"/>
+                        <constraints>
+                            <constraint firstAttribute="height" constant="1" id="gpP-5l-J8h"/>
+                        </constraints>
+                    </view>
+                    <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Select Texture" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="77J-A0-UmY">
+                        <rect key="frame" x="8" y="10" width="359" height="21"/>
+                        <constraints>
+                            <constraint firstAttribute="height" constant="21" id="eIG-i0-yJ1"/>
+                        </constraints>
+                        <fontDescription key="fontDescription" type="system" pointSize="14"/>
+                        <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
+                        <nil key="highlightedColor"/>
+                    </label>
+                    <scrollView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="30z-pk-wUf">
+                        <rect key="frame" x="8" y="39" width="359" height="50"/>
+                        <constraints>
+                            <constraint firstAttribute="height" constant="50" id="hZn-Ph-Mof"/>
+                        </constraints>
+                    </scrollView>
+                </subviews>
+                <constraints>
+                    <constraint firstItem="77J-A0-UmY" firstAttribute="leading" secondItem="Fbv-wJ-UBe" secondAttribute="leadingMargin" id="Oer-RU-Y0P"/>
+                    <constraint firstItem="30z-pk-wUf" firstAttribute="leading" secondItem="Fbv-wJ-UBe" secondAttribute="leadingMargin" id="UeK-Rt-5BY"/>
+                    <constraint firstItem="30z-pk-wUf" firstAttribute="trailing" secondItem="Fbv-wJ-UBe" secondAttribute="trailingMargin" id="ZWg-3t-8IV"/>
+                    <constraint firstAttribute="bottom" secondItem="wgc-ni-1Sz" secondAttribute="bottom" constant="-1" id="dXD-1o-qOA"/>
+                    <constraint firstItem="77J-A0-UmY" firstAttribute="top" secondItem="Fbv-wJ-UBe" secondAttribute="topMargin" constant="2" id="oD0-IC-ncp"/>
+                    <constraint firstAttribute="trailingMargin" secondItem="77J-A0-UmY" secondAttribute="trailing" id="obJ-QP-PDR"/>
+                    <constraint firstItem="30z-pk-wUf" firstAttribute="top" secondItem="77J-A0-UmY" secondAttribute="bottom" constant="8" id="tfm-iz-496"/>
+                    <constraint firstAttribute="trailing" secondItem="wgc-ni-1Sz" secondAttribute="trailing" id="twh-uF-gLj"/>
+                    <constraint firstItem="wgc-ni-1Sz" firstAttribute="leading" secondItem="Fbv-wJ-UBe" secondAttribute="leading" id="urt-EG-iuW"/>
+                </constraints>
+            </tableViewCellContentView>
+            <connections>
+                <outlet property="attributeLabel" destination="77J-A0-UmY" id="IcZ-Fd-6dg"/>
+                <outlet property="scrollView" destination="30z-pk-wUf" id="lbZ-um-Oe3"/>
+            </connections>
+            <point key="canvasLocation" x="383.5" y="234"/>
+        </tableViewCell>
+    </objects>
+</document>
diff --git a/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeViewController.xib b/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeViewController.xib
index e86d638..d153995 100644
--- a/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeViewController.xib
+++ b/YiLinkerOnlineBuyer/resources/Xib/CartProductAttributeViewController.xib
@@ -87,7 +87,7 @@
                 <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="ZJd-92-WTH" userLabel="Name">
                     <rect key="frame" x="0.0" y="176" width="375" height="110"/>
                     <subviews>
-                        <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="dummy-placeholder" translatesAutoresizingMaskIntoConstraints="NO" id="6zb-Vh-jzf">
+                        <imageView clipsSubviews="YES" userInteractionEnabled="NO" contentMode="scaleAspectFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="dummy-placeholder" translatesAutoresizingMaskIntoConstraints="NO" id="6zb-Vh-jzf">
                             <rect key="frame" x="10" y="6" width="100" height="97"/>
                             <constraints>
                                 <constraint firstAttribute="height" constant="97" id="n7e-6V-ks6"/>
-- 
2.3.2 (Apple Git-55)

