From 1abdb10b800e7323c1e73cb12b1e77bbfa860907 Mon Sep 17 00:00:00 2001
From: ajtandoc <alvin.tandoc@easyshop.ph>
Date: Mon, 31 Aug 2015 13:06:56 +0800
Subject: [PATCH 26/27] Resolved invalid credential error and removed
 duplicated viewcontroller folder. (issue #150)

---
 YiLinkerOnlineBuyer.xcodeproj/project.pbxproj      |   4 +
 .../resources/Helper/APIManager.swift              |   1 +
 .../resources/Helper/JSONResponseSerializer.swift  |  36 +
 .../CartProductAttributeViewController.xib         |   0
 .../ViewController/CategoriesTableViewCell.xib     |   0
 .../ViewController/CategoriesViewController.xib    |   0
 .../CheckoutContainerViewController.xib            |   0
 .../CustomizeShoppingViewController.xib            |   0
 .../ViewController/FollowedSellerTableViewCell.xib |   0
 .../FollowedSellerViewController.xib               |   0
 .../ViewController/HelpViewController.xib          |   0
 .../ViewController/LoginViewController.swift       |   7 +
 .../ViewController/MessagingViewController.xib     |   0
 .../ViewController/OverViewViewController.xib      |   0
 .../ViewController/PaymentViewController.xib       |   0
 .../ViewController/ProfileViewController.xib       |   0
 .../ViewController/ResultViewController.xib        |   0
 .../ViewController/SellerViewController.xib        |   0
 .../ViewController/SummaryViewController.xib       |   0
 .../ViewController/TodaysPromoViewController.xib   |   0
 .../CartProductAttributeViewController.swift       | 236 ------
 .../Xib/ViewController/CartViewController.swift    | 302 --------
 .../ViewController/CategoriesTableViewCell.swift   |  32 -
 .../ViewController/CategoriesViewController.swift  | 145 ----
 .../CheckoutContainerViewController.swift          | 166 -----
 .../CircularMenuViewController.swift               | 400 ----------
 .../ViewController/CustomTabBarController.swift    |  26 -
 .../CustomizeShoppingViewController.swift          |  35 -
 .../FollowedSellerTableViewCell.swift              |  50 --
 .../FollowedSellerViewController.swift             |  91 ---
 .../Xib/ViewController/HelpViewController.swift    |  35 -
 .../Xib/ViewController/HiddenViewController.swift  | 139 ----
 .../HomeContainerViewController.swift              | 323 --------
 .../HomePageCollectionViewController.swift         | 587 ---------------
 .../LoginAndRegisterContentViewController.swift    | 127 ----
 .../Xib/ViewController/LoginViewController.swift   | 317 --------
 .../ViewController/MessagingViewController.swift   |  35 -
 .../ViewController/OverViewViewController.swift    |  35 -
 .../Xib/ViewController/PaymentViewController.swift |  35 -
 .../ProductAttributeViewController.swift           | 510 -------------
 .../ProductDescriptionViewController.swift         |  27 -
 .../ProductReviewViewController.swift              | 148 ----
 .../Xib/ViewController/ProductViewController.swift | 822 ---------------------
 .../ProductViewsViewController.swift               |  35 -
 .../Xib/ViewController/ProfileViewController.swift |  35 -
 .../ViewController/RegisterViewController.swift    | 285 -------
 .../Xib/ViewController/ResultViewController.swift  | 154 ----
 .../Xib/ViewController/SearchViewController.swift  | 120 ---
 .../Xib/ViewController/SellerViewController.swift  | 217 ------
 .../ViewController/StartPageViewController.swift   | 206 ------
 .../StarterContentPageViewController.swift         |  37 -
 .../Xib/ViewController/SummaryViewController.swift | 106 ---
 .../ViewController/TodaysPromoViewController.swift |  35 -
 .../TransactionDetailsViewController.swift         | 211 ------
 .../TransactionDetailsViewController.xib           |  38 -
 .../TransactionProductDetailsViewController.swift  | 196 -----
 .../TransactionProductDetailsViewController.xib    |  30 -
 .../ViewController/TransactionTableViewCell.swift  |  23 -
 .../ViewController/TransactionTableViewCell.xib    |  87 ---
 .../ViewController/TransactionViewController.swift | 141 ----
 .../ViewController/TransactionViewController.xib   | 185 -----
 .../Xib/ViewController/TransactionViews.swift      |  35 -
 .../Xib/ViewController/TransactionViews.xib        | 804 --------------------
 .../ViewController/WishlistViewController.swift    | 226 ------
 64 files changed, 48 insertions(+), 7829 deletions(-)
 create mode 100644 YiLinkerOnlineBuyer/resources/Helper/JSONResponseSerializer.swift
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/CartProductAttributeViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/CategoriesTableViewCell.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/CategoriesViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/CheckoutContainerViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/CustomizeShoppingViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/FollowedSellerTableViewCell.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/FollowedSellerViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/HelpViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/MessagingViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/OverViewViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/PaymentViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/ProfileViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/ResultViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/SellerViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/SummaryViewController.xib (100%)
 rename YiLinkerOnlineBuyer/resources/{Xib => }/ViewController/TodaysPromoViewController.xib (100%)
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CartProductAttributeViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CartViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesTableViewCell.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CheckoutContainerViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CircularMenuViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomTabBarController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomizeShoppingViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerTableViewCell.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/HelpViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/HiddenViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/HomeContainerViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/HomePageCollectionViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginAndRegisterContentViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/MessagingViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/OverViewViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/PaymentViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductAttributeViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductDescriptionViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductReviewViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewsViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ProfileViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/RegisterViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/ResultViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/SearchViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/SellerViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/StartPageViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/StarterContentPageViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/SummaryViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TodaysPromoViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.xib
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.xib
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.xib
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.xib
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.swift
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.xib
 delete mode 100644 YiLinkerOnlineBuyer/resources/Xib/ViewController/WishlistViewController.swift

diff --git a/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj b/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj
index 74419da..b82b03b 100644
--- a/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj
+++ b/YiLinkerOnlineBuyer.xcodeproj/project.pbxproj
@@ -11,6 +11,7 @@
 		0C1003F81B87690300CAA17A /* AddAddressTableViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C1003F61B87690300CAA17A /* AddAddressTableViewController.swift */; };
 		0C10042D1B877F8400CAA17A /* AddAddressTableViewController.xib in Resources */ = {isa = PBXBuildFile; fileRef = 0C10042C1B877F8400CAA17A /* AddAddressTableViewController.xib */; };
 		0C1004301B87AB9100CAA17A /* PaymentTableViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C10042E1B87AB9100CAA17A /* PaymentTableViewCell.swift */; };
+		0C1C3A851B9406BD00E6180D /* JSONResponseSerializer.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C1C3A841B9406BD00E6180D /* JSONResponseSerializer.swift */; };
 		0C2670CD1B77290200394E29 /* GoogleService-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 0C2670CC1B77290200394E29 /* GoogleService-Info.plist */; };
 		0C2670CF1B772E4B00394E29 /* Enums.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C2670CE1B772E4B00394E29 /* Enums.swift */; };
 		0C2F44A51B848B3A00021F45 /* SummaryViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 0C2F44A31B848B3A00021F45 /* SummaryViewController.swift */; };
@@ -329,6 +330,7 @@
 		0C1003F61B87690300CAA17A /* AddAddressTableViewController.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AddAddressTableViewController.swift; sourceTree = "<group>"; };
 		0C10042C1B877F8400CAA17A /* AddAddressTableViewController.xib */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.xib; path = AddAddressTableViewController.xib; sourceTree = "<group>"; };
 		0C10042E1B87AB9100CAA17A /* PaymentTableViewCell.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = PaymentTableViewCell.swift; sourceTree = "<group>"; };
+		0C1C3A841B9406BD00E6180D /* JSONResponseSerializer.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = JSONResponseSerializer.swift; sourceTree = "<group>"; };
 		0C25D94D1B76F81A00E9EFA6 /* YiLinkerOnlineBuyer-Bridging-Header.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "YiLinkerOnlineBuyer-Bridging-Header.h"; sourceTree = "<group>"; };
 		0C2670CC1B77290200394E29 /* GoogleService-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "GoogleService-Info.plist"; sourceTree = "<group>"; };
 		0C2670CE1B772E4B00394E29 /* Enums.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = Enums.swift; sourceTree = "<group>"; };
@@ -782,6 +784,7 @@
 				0C2670CE1B772E4B00394E29 /* Enums.swift */,
 				26AFB3921B79DD9100E50926 /* XibHelper.swift */,
 				0C329E721B7B2A71005BE2B6 /* Reachability.swift */,
+				0C1C3A841B9406BD00E6180D /* JSONResponseSerializer.swift */,
 			);
 			path = Helper;
 			sourceTree = "<group>";
@@ -1499,6 +1502,7 @@
 				79AA08331B8F4DCF00AF3AA4 /* CartProductAttributeTableViewCell.swift in Sources */,
 				0C374F5D1B8A2DBF0050AE1D /* CustomizeShoppingFlowLayout.swift in Sources */,
 				0C329E881B7B73A4005BE2B6 /* TodaysPromoViewController.swift in Sources */,
+				0C1C3A851B9406BD00E6180D /* JSONResponseSerializer.swift in Sources */,
 				0C5111D81B81CEE7002F0001 /* SellerTableHeaderView.swift in Sources */,
 				0C1004301B87AB9100CAA17A /* PaymentTableViewCell.swift in Sources */,
 				79A1C6F51B8357BA0043AA36 /* ProductResultListCollectionViewCell.swift in Sources */,
diff --git a/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift b/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift
index 493c871..687d635 100644
--- a/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift
+++ b/YiLinkerOnlineBuyer/resources/Helper/APIManager.swift
@@ -55,6 +55,7 @@ class APIManager: AFHTTPSessionManager {
             let url: NSURL! = NSURL(string: APIAtlas.baseUrl)
             Static.instance = APIManager(baseURL: url)
             Static.instance?.securityPolicy.allowInvalidCertificates = true
+            Static.instance?.responseSerializer = JSONResponseSerializer()
         }
         
         return Static.instance!
diff --git a/YiLinkerOnlineBuyer/resources/Helper/JSONResponseSerializer.swift b/YiLinkerOnlineBuyer/resources/Helper/JSONResponseSerializer.swift
new file mode 100644
index 0000000..76b8ca9
--- /dev/null
+++ b/YiLinkerOnlineBuyer/resources/Helper/JSONResponseSerializer.swift
@@ -0,0 +1,36 @@
+//
+//  JSONResponseSerializer.swift
+//  YiLinkerOnlineBuyer
+//
+//  Created by Alvin John Tandoc on 8/31/15.
+//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
+//
+
+//
+//  JSONResponseSerializer.swift
+//  YiLinkerOnlineSeller
+//
+//  Created by Alvin John Tandoc on 8/28/15.
+//  Copyright (c) 2015 YiLinker. All rights reserved.
+//
+
+import UIKit
+
+class JSONResponseSerializer: AFJSONResponseSerializer {
+    override func responseObjectForResponse(response: NSURLResponse?, data: NSData?, error: NSErrorPointer) -> AnyObject? {
+        
+        var json: NSMutableDictionary = super.responseObjectForResponse(response, data: data, error: error) as! NSMutableDictionary
+        
+        if (error.memory != nil) {
+            var errorValue = error.memory!
+            var userInfo: NSDictionary = errorValue.userInfo!
+            var copy: NSMutableDictionary = userInfo.mutableCopy() as! NSMutableDictionary
+            copy["data"] = json
+            
+            error.memory = NSError(domain: errorValue.domain, code: errorValue.code, userInfo: json as [NSObject : AnyObject])
+            
+        }
+        
+        return json
+    }
+}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartProductAttributeViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/CartProductAttributeViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/CartProductAttributeViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/CartProductAttributeViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesTableViewCell.xib b/YiLinkerOnlineBuyer/resources/ViewController/CategoriesTableViewCell.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesTableViewCell.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/CategoriesTableViewCell.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/CategoriesViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/CategoriesViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CheckoutContainerViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/CheckoutContainerViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/CheckoutContainerViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/CheckoutContainerViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomizeShoppingViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/CustomizeShoppingViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomizeShoppingViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/CustomizeShoppingViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerTableViewCell.xib b/YiLinkerOnlineBuyer/resources/ViewController/FollowedSellerTableViewCell.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerTableViewCell.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/FollowedSellerTableViewCell.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/FollowedSellerViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/FollowedSellerViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HelpViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/HelpViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/HelpViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/HelpViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/ViewController/LoginViewController.swift b/YiLinkerOnlineBuyer/resources/ViewController/LoginViewController.swift
index 7842f85..b18478d 100644
--- a/YiLinkerOnlineBuyer/resources/ViewController/LoginViewController.swift
+++ b/YiLinkerOnlineBuyer/resources/ViewController/LoginViewController.swift
@@ -248,6 +248,13 @@ class LoginViewController: UIViewController, FBSDKLoginButtonDelegate, GIDSignIn
                 (task: NSURLSessionDataTask!, error: NSError!) in
                 let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
                 
+                if error.userInfo != nil {
+                    if let jsonResult = error.userInfo as? Dictionary<String, AnyObject> {
+                        let errorDescription: String = jsonResult["error_description"] as! String
+                        UIAlertController.displayErrorMessageWithTarget(self, errorMessage: errorDescription)
+                    }
+                }
+                
                 if task.statusCode == 401 {
                     UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Mismatch username and password", title: "Login Failed")
                 } else {
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/MessagingViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/MessagingViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/MessagingViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/MessagingViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/OverViewViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/OverViewViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/OverViewViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/OverViewViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/PaymentViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/PaymentViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/PaymentViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/PaymentViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProfileViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/ProfileViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/ProfileViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/ProfileViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ResultViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/ResultViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/ResultViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/ResultViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SellerViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/SellerViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/SellerViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/SellerViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SummaryViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/SummaryViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/SummaryViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/SummaryViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TodaysPromoViewController.xib b/YiLinkerOnlineBuyer/resources/ViewController/TodaysPromoViewController.xib
similarity index 100%
rename from YiLinkerOnlineBuyer/resources/Xib/ViewController/TodaysPromoViewController.xib
rename to YiLinkerOnlineBuyer/resources/ViewController/TodaysPromoViewController.xib
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartProductAttributeViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartProductAttributeViewController.swift
deleted file mode 100644
index 20b5473..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartProductAttributeViewController.swift
+++ /dev/null
@@ -1,236 +0,0 @@
-//
-//  ProductAttributeViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/5/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-protocol CartProductAttributeViewControllerDelegate {
-    func pressedCancelAttribute(controller: CartProductAttributeViewController)
-    func pressedDoneAttribute(controller: CartProductAttributeViewController)
-}
-
-class CartProductAttributeViewController: UIViewController, UITableViewDelegate, ProductAttributeTableViewCellDelegate {
-    
-    var manager = APIManager()
-    
-    @IBOutlet weak var dimView: UIView!
-    @IBOutlet weak var productImageView: UIImageView!
-    @IBOutlet weak var nameLabel: UILabel!
-    @IBOutlet weak var priceLabel: UILabel!
-    @IBOutlet weak var availabilityStocksLabel: UILabel!
-    @IBOutlet weak var stocksLabel: UILabel!
-    @IBOutlet weak var decreaseButton: UIButton!
-    @IBOutlet weak var increaseButton: UIButton!
-    @IBOutlet weak var doneButton: UIButton!
-    @IBOutlet weak var cancelButton: UIButton!
-    @IBOutlet weak var tableView: UITableView!
-    
-    var delegate: CartProductAttributeViewControllerDelegate?
-    
-    var minimumStock = 1
-    var maximumStock = 1
-    var stocks: Int = 0
-    
-    var cartModel : CartModel?
-    var productDetailModel: CartProductDetailsModel?
-    var attributes: [ProductAttributeModel] = []
-    var availableCombinations: [ProductAvailableAttributeCombinationModel] = []
-    var selectedValue: [String] = []
-    var selectedCombination: [Int] = []
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        
-        stocksLabel.layer.borderWidth = 1.2
-        stocksLabel.layer.borderColor = UIColor.grayColor().CGColor
-        stocksLabel.layer.cornerRadius = 5
-        
-        let nib = UINib(nibName: "ProductAttributeTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "AttributeTableCell")
-        
-        let tap = UITapGestureRecognizer()
-        tap.numberOfTapsRequired = 1
-        tap.addTarget(self, action: "dimViewAction:")
-        self.dimView.addGestureRecognizer(tap)
-        self.dimView.backgroundColor = .clearColor()
-    }
-    
-    func fireEditCartItem(url: String, quantity: Int!) {
-        
-        var params = Dictionary<String, String>()
-        
-        params["access_token"] = "access_token"
-        params["productId"] = "\(cartModel?.productDetails.id)"
-        params["unitId"] = "\(cartModel?.unitId)"
-        params["quantity"] = "\(quantity)"
-        
-        showLoader()
-        manager.GET(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                self.dismissLoader()
-                println(params)
-                self.dismissViewControllerAnimated(true, completion: nil)
-                if let delegate = self.delegate {
-                    delegate.pressedDoneAttribute(self)
-                }
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.dismissLoader()
-        })
-    }
-    
-    
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return attributes.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: ProductAttributeTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("AttributeTableCell") as! ProductAttributeTableViewCell
-        
-//        cell.delegate = self
-//        cell.passAvailableCombination(availableCombinations)
-        
-//        cell.tag = indexPath.row
-//        cell.setAttribute(name: attributes[indexPath.row].attributeName, values: attributes[indexPath.row].valueName, id: attributes[indexPath.row].valueId, selectedValue: selectedValue)
-        
-        return cell
-    }
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        println(indexPath.row)
-    }
-    
-    // MARK: - Actions
-    
-    @IBAction func decreaseAction(sender: AnyObject) {
-        self.stocks -= 1
-        checkStock(self.stocks)
-    }
-    
-    @IBAction func increaseAction(sender: AnyObject) {
-        self.stocks += 1
-        checkStock(self.stocks)
-    }
-    
-    @IBAction func cancelAction(sender: AnyObject!) {
-        self.dismissViewControllerAnimated(true, completion: nil)
-        println(attributes.count)
-        println(availableCombinations.count)
-        if let delegate = self.delegate {
-            delegate.pressedCancelAttribute(self)
-        }
-    }
-    
-    @IBAction func doneAction(sender: AnyObject!) {
-        fireEditCartItem("https://demo3526363.mockable.io/api/v1/auth/cart/updateCartItem", quantity: stocks)
-    }
-    
-    // MARK: - Methods
-    
-    func passModel(#cartModel: CartModel, combinationModel: [ProductAvailableAttributeCombinationModel], selectedValue: NSArray, quantity: Int) {
-        setDetail("\(cartModel.productDetails.image)", title: cartModel.productDetails.title, price: cartModel.productDetails.newPrice)
-        self.cartModel = cartModel
-        self.attributes = cartModel.productDetails.attributes as [ProductAttributeModel]
-        self.availableCombinations = combinationModel
-        self.selectedValue = selectedValue as! [String]
-        self.selectedCombination = combinationModel[0].combination
-        self.maximumStock = combinationModel[0].quantity
-        
-        stocks = quantity
-        
-        checkStock(stocks)
-    }
-    
-    func selectedAttribute(controller: ProductAttributeTableViewCell, attributeIndex: Int, attributeValue: String!, attributeId: Int) {
-        stocks = 0
-        checkStock(stocks)
-        self.selectedValue[attributeIndex + 1] = String(attributeValue)
-//        self.selectedCombination[attributeIndex] = attributeId
-        
-        maximumStock = availableStock(selectedCombination)
-        self.availabilityStocksLabel.text = "Available stocks : " + String(availableStock(selectedCombination))
-        
-        checkStock(stocks)
-    }
-    
-    func availableStock(combination: NSArray) -> Int {
-        
-        for i in 0..<availableCombinations.count {
-            println(selectedCombination)
-            if availableCombinations[i].combination == selectedCombination {
-                println("benga! > \(availableCombinations[i].quantity)")
-                return availableCombinations[i].quantity
-            }
-        }
-        return 0
-    }
-    
-    func checkStock(stocks: Int) {
-        
-        if stocks < 10 {
-            stocksLabel.text = "0\(String(stringInterpolationSegment: stocks))"
-        } else {
-            stocksLabel.text = String(stringInterpolationSegment: stocks)
-        }
-        
-        if stocks == 0  && maximumStock != 0 {
-            enableButton(increaseButton)
-            disableButton(decreaseButton)
-            stocksLabel.alpha = 1.0
-        } else if stocks == 0  && maximumStock == 0{
-            stocksLabel.alpha = 0.3
-            disableButton(increaseButton)
-        } else if stocks == maximumStock {
-            stocksLabel.alpha = 1.0
-            disableButton(increaseButton)
-        } else if stocks == minimumStock {
-            stocksLabel.alpha = 1.0
-            disableButton(decreaseButton)
-        } else if stocks > 0 || stocks < maximumStock {
-            enableButton(increaseButton)
-            enableButton(decreaseButton)
-        }
-    }
-    
-    func setDetail(image: String, title: String, price: Float) {
-        
-        productImageView.sd_setImageWithURL(NSURL(string: image), placeholderImage: UIImage(named: "dummy-placeholder"))
-        nameLabel.text = title
-        priceLabel.text = String(format: "P %.2f", price)
-    }
-    
-    func disableButton(button: UIButton) {
-        button.userInteractionEnabled = false
-        button.alpha = 0.3
-    }
-    
-    func enableButton(button: UIButton) {
-        button.userInteractionEnabled = true
-        button.alpha = 1
-    }
-    
-    func dismissPresentedController(controller: ProductViewController) {
-        self.dismissViewControllerAnimated(true, completion: nil)
-    }
-    
-    func dimViewAction(gesture: UIGestureRecognizer) {
-        cancelAction(nil)
-    }
-    
-    //Loader function
-    func showLoader() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-    }
-    
-    func dismissLoader() {
-        SVProgressHUD.dismiss()
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartViewController.swift
deleted file mode 100644
index aaafc90..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CartViewController.swift
+++ /dev/null
@@ -1,302 +0,0 @@
-//
-//  CartViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/28/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CartViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, CartTableViewCellDelegate, CartProductAttributeViewControllerDelegate {
-    
-    var manager = APIManager()
-    
-    @IBOutlet var cartTableView: UITableView!
-    @IBOutlet weak var dimView: UIView!
-    
-    @IBOutlet var totalPriceLabel: UILabel!
-    @IBOutlet var cartCounterLabel: UILabel!
-    
-    @IBOutlet var checkoutButton: UIButton!
-    
-    var tableData: [CartModel] = []
-    var selectedValue: [String] = []
-    
-    //formatter of Text to remove trailing decimal
-    let formatter = NSNumberFormatter()
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        manager = APIManager.sharedInstance
-        self.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: UIColor.whiteColor()]
-        
-        cartTableView.delegate = self
-        cartTableView.dataSource = self
-        
-        cartTableView.tableFooterView = UIView()
-        
-        var nib = UINib(nibName: "CartTableViewCell", bundle: nil)
-        cartTableView.registerNib(nib, forCellReuseIdentifier: "CartTableViewCell")
-        
-        formatter.minimumFractionDigits = 0
-        formatter.maximumFractionDigits = 2
-    
-    }
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-    }
-    
-    override func viewDidAppear(animated: Bool) {
-        super.viewDidAppear(true)
-        
-        populateWishListTableView()
-    }
-    
-    @IBAction func buttonClicked(sender: AnyObject) {
-    }
-    
-    func fireDeleteCartItem(url: String, params: NSDictionary!) {
-        showLoader()
-        manager.DELETE(url, parameters: params, success: {
-                (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                print(responseObject as! NSDictionary)
-                self.updateCounterLabel()
-                self.dismissLoader()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.dismissLoader()
-        })
-    }
-    
-    func requestProductDetails(url: String, params: NSDictionary!) {
-        showLoader()
-        manager.GET(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            //print(responseObject as! NSDictionary)
-            
-            if let value: AnyObject = responseObject["data"] {
-                for subValue in value["cartItems"] as! NSArray {
-                    
-                    let model: CartModel = CartModel.parseDataWithDictionary(subValue as! NSDictionary)
-                    
-                    self.tableData.append(model)
-                }
-                self.cartTableView.reloadData()
-            }
-            self.updateCounterLabel()
-            self.dismissLoader()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.dismissLoader()
-        })
-    }
-    
-    func fireDeleteCartItem(url: String, index: Int!) {
-        
-        var params = Dictionary<String, String>()
-        
-        var cartModelTemp = tableData[index]
-        
-        params["access_token"] = "access_token"
-        params["productId"] = "\(cartModelTemp.productDetails.id)"
-        params["unitId"] = "\(cartModelTemp.unitId)"
-        params["quantity"] = "\(0)"
-        
-        showLoader()
-        manager.GET(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            self.dismissLoader()
-            self.populateWishListTableView()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.dismissLoader()
-        })
-    }
-    
-    func seeMoreAttribute(index: Int) {
-        
-        var tempModel: CartModel = tableData[index]
-        
-        selectedValue = []
-        selectedValue.append(String(tempModel.productDetails.combinations[0].quantity) + "x")
-        
-        var tempAttributeId: [Int] = []
-        var tempAttributeName: [String] = []
-        
-//        for tempAttribute in tempModel.productDetails.attributes{
-//            tempAttributeId += tempAttribute.valueId
-//            tempAttributeName += tempAttribute.valueName
-//        }
-        
-        for tempId in tempModel.selectedAttributes {
-            if let index = find(tempAttributeId, tempId) {
-                selectedValue.append(tempAttributeName[index])
-            }
-        }
-        
-        println(selectedValue)
-        
-        var attributeModal = CartProductAttributeViewController(nibName: "CartProductAttributeViewController", bundle: nil)
-        attributeModal.delegate = self
-        attributeModal.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext
-        attributeModal.providesPresentationContextTransitionStyle = true
-        attributeModal.definesPresentationContext = true
-        attributeModal.view.backgroundColor = UIColor.clearColor()
-        attributeModal.view.frame.origin.y = attributeModal.view.frame.size.height
-        attributeModal.passModel(cartModel: tableData[index], combinationModel: tempModel.productDetails.combinations, selectedValue: selectedValue, quantity: tempModel.quantity)
-        //        self.navigationController?.presentViewController(attributeModal, animated: true, completion: nil)
-        self.tabBarController?.presentViewController(attributeModal, animated: true, completion: nil)
-        
-        UIView.animateWithDuration(0.3, animations: {
-            self.dimView.alpha = 0.5
-            self.view.transform = CGAffineTransformMakeScale(0.92, 0.95)
-            self.navigationController?.navigationBar.alpha = 0.0
-        })
-
-    }
-    
-    //Loader function
-    func showLoader() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-    }
-    
-    func dismissLoader() {
-        SVProgressHUD.dismiss()
-    }
-    
-    // MARK: Methods Updating Values
-    func populateWishListTableView () {
-        tableData = []
-        requestProductDetails(APIAtlas.cartUrl, params: nil)
-    }
-    
-    func updateCounterLabel() {
-        if tableData.count < 2 {
-            cartCounterLabel.text = "You have \(tableData.count) item in your cart"
-        } else{
-            cartCounterLabel.text = "You have \(tableData.count) items in your cart"
-        }
-    }
-    
-    func calculateTotalPrice() {
-        var totalPrice: Double = 0.0
-        for tempModel in tableData {
-            if tempModel.selected {
-                totalPrice += (Double(tempModel.productDetails.newPrice) * Double(tempModel.quantity))
-            }
-        }
-        totalPriceLabel.text = "P \(formatter.stringFromNumber(totalPrice)!)"
-    }
-    
-    // MARK: - Table View Delegate
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return self.tableData.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell 	{
-        var cell:CartTableViewCell = self.cartTableView.dequeueReusableCellWithIdentifier("CartTableViewCell") as! CartTableViewCell
-        
-        //Set cell data
-        var tempModel: CartModel = tableData[indexPath.row]
-        cell.productNameLabel.text = tempModel.productDetails.title
-        cell.productItemImageView.sd_setImageWithURL(tempModel.productDetails.image, placeholderImage: UIImage(named: "dummy-placeholder"))   //no image yet in API
-        println("\(tempModel.productDetails.image)")
-        var tempAttributesText: String = ""
-        var tempAttributeId: [Int] = []
-        var tempAttributeName: [String] = []
-        
-//        for tempAttribute in tempModel.productDetails.attributes{
-//            tempAttributeId += tempAttribute.valueId
-//            tempAttributeName += tempAttribute.valueName
-//        }
-        
-        for tempId in tempModel.selectedAttributes {
-            if let index = find(tempAttributeId, tempId) {
-                if tempAttributesText.isEmpty {
-                    tempAttributesText = tempAttributeName[index]
-                } else {
-                    tempAttributesText += " | " + tempAttributeName[index]
-                }
-                
-            }
-        }
-        cell.productDetailsLabel?.text = tempAttributesText
-        
-        cell.productPriceLabel.text = "P\(formatter.stringFromNumber(tempModel.productDetails.newPrice)!) x\(tempModel.quantity)"
-        
-        cell.delegate = self
-        return cell
-    }
-    
-    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
-        return 105
-    }
-    
-    // MARK: - Wishlist Table View Delegate
-    func scrollViewWillBeginDragging(scrollView: UIScrollView) {
-        NSNotificationCenter.defaultCenter().postNotificationName("SwipeForOptionsCellEnclosingTableViewDidBeginScrollingNotification", object: scrollView)
-    }
-    
-    // MARK: - Wishlist Table View Delegate
-    func deleteButtonActionForIndex(sender: AnyObject){
-        var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
-        var rowOfTheCell: Int = pathOfTheCell.row
-        fireDeleteCartItem("https://demo3526363.mockable.io/api/v1/auth/cart/updateCartItem", index: rowOfTheCell)
-    }
-    
-    func editButtonActionForIndex(sender: AnyObject){
-        var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
-        var rowOfTheCell: Int = pathOfTheCell.row
-        seeMoreAttribute(rowOfTheCell)
-    }
-    
-    func checkBoxButtonActionForIndex(sender: AnyObject, state: Bool){
-        var pathOfTheCell: NSIndexPath = cartTableView.indexPathForCell(sender as! UITableViewCell)!
-        var rowOfTheCell: Int = pathOfTheCell.row
-        
-        var tempModel: CartModel = tableData[rowOfTheCell]
-        tempModel.selected = state
-
-        calculateTotalPrice()
-    }
-    
-    func swipeViewDidScroll(sender: AnyObject) {
-        NSNotificationCenter.defaultCenter().postNotificationName("SwipeForOptionsCellEnclosingTableViewDidBeginScrollingNotification", object: self)
-    }
-    
-    // MARK: - Cart Product Attribute View Controller Delegate
-    func pressedCancelAttribute(controller: CartProductAttributeViewController) {
-        UIView.animateWithDuration(0.3, animations: {
-            self.view.transform = CGAffineTransformMakeTranslation(1, 1)
-            self.dimView.alpha = 0
-            self.navigationController?.navigationBar.alpha = 1.0
-        })
-    }
-    
-    func pressedDoneAttribute(controller: CartProductAttributeViewController) {
-        UIView.animateWithDuration(0.3, animations: {
-            self.view.transform = CGAffineTransformMakeTranslation(1, 1)
-            self.dimView.alpha = 0
-            self.navigationController?.navigationBar.alpha = 1.0
-        })
-        
-        populateWishListTableView()
-    }
-    
-    /*
-    // MARK: - Navigation
-    
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-    // Get the new view controller using segue.destinationViewController.
-    // Pass the selected object to the new view controller.
-    }
-    */
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesTableViewCell.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesTableViewCell.swift
deleted file mode 100644
index 785a809..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesTableViewCell.swift
+++ /dev/null
@@ -1,32 +0,0 @@
-//
-//  CategoriesTableViewCell.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/16/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CategoriesTableViewCell: UITableViewCell {
-
-    @IBOutlet weak var pictureImageView: UIImageView!
-    @IBOutlet weak var categoryLabel: UILabel!
-    
-    override func awakeFromNib() {
-        super.awakeFromNib()
-        // Initialization code
-        
-        pictureImageView.clipsToBounds = true
-    }
-
-    func setPicture(text: String) {
-        self.pictureImageView.sd_setImageWithURL(NSURL(string: text), placeholderImage: UIImage(named: "dummy-placeholder"))
-    }
-    
-    override func layoutMarginsDidChange() {
-        super.layoutMarginsDidChange()
-        
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesViewController.swift
deleted file mode 100644
index b82d75d..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CategoriesViewController.swift
+++ /dev/null
@@ -1,145 +0,0 @@
-//
-//  CategoriesViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CategoriesViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
-
-    @IBOutlet weak var tableView: UITableView!
-
-    var categoryModel: CategoryModel!
-    
-    var parentText: String = ""
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        let nib = UINib(nibName: "CategoriesTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "CategoryIdentifier")
-        
-        requestCategories(parentId: "")
-    }
-
-    override func viewWillAppear(animated: Bool) {
-        super.viewWillAppear(animated)
-        
-        self.navigationController?.navigationBarHidden = false
-    }
-    
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        if self.categoryModel != nil {
-            return self.categoryModel.name.count
-        } else {
-            return 0
-        }
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: CategoriesTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("CategoryIdentifier") as! CategoriesTableViewCell
-        
-        cell.selectionStyle = .None
-        
-        cell.categoryLabel.text = self.categoryModel!.name[indexPath.row]  
-        cell.setPicture(self.categoryModel!.image[indexPath.row])
-        
-        return cell
-    }
-    
-    // MARK: - Table View Delegate
-    
-    func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
-        
-        return sectionHeaderView()
-    }
-    
-    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
-        return 40
-    }
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        if categoryModel.isParent[indexPath.row] {
-            let categories = CategoriesViewController(nibName: "CategoriesViewController", bundle: nil)
-            categories.parentText = categoryModel.name[indexPath.row]
-            categories.requestCategories(parentId: categoryModel.id[indexPath.row])
-            self.navigationController?.pushViewController(categories, animated: true)
-        } else {
-            gotoList(UIGestureRecognizer())
-        }
-    }
-    
-    // Methods
-    
-    func sectionHeaderView() -> UIView {
-        var containerView = UIView(frame: CGRectMake(0, 0, self.view.frame.size.width, 40))
-        containerView.backgroundColor = .whiteColor()
-        
-        var categoryLabel = UILabel(frame: CGRectZero)
-        categoryLabel.font = UIFont.boldSystemFontOfSize(15.0)
-        categoryLabel.textColor = .darkGrayColor()
-        categoryLabel.text = "    "
-     
-        if parentText == "" {
-            self.tableView.contentInset = UIEdgeInsetsMake(0, 0, 49, 0)
-            categoryLabel.text! += "Select Category"
-            categoryLabel.sizeToFit()
-            categoryLabel.frame.size.height = containerView.frame.size.height
-        } else {
-            var tap = UITapGestureRecognizer()
-            tap.numberOfTapsRequired = 1
-            tap.addTarget(self, action: "gotoList:")
-            containerView.addGestureRecognizer(tap)
-            
-            categoryLabel.text! += parentText
-            categoryLabel.sizeToFit()
-            categoryLabel.frame.size.height = containerView.frame.size.height
-            var arrowImageView = UIImageView(frame: CGRectMake(categoryLabel.frame.size.width + 5, (categoryLabel.frame.size.height / 2) - (20 / 2), 12, 20))
-            arrowImageView.image = UIImage(named: "right-gray")
-            containerView.addSubview(arrowImageView)
-        }
-        
-        var separatorView = UIView(frame: CGRectMake(0, containerView.frame.size.height - 1, containerView.frame.size.width, 1))
-        separatorView.backgroundColor = .lightGrayColor()
-        
-        containerView.addSubview(categoryLabel)
-        containerView.addSubview(separatorView)
-        
-        return containerView
-    }
-    
-    func gotoList(gesture: UIGestureRecognizer) {
-        let resultList = ResultViewController(nibName: "ResultViewController", bundle: nil)
-        self.navigationController?.pushViewController(resultList, animated: true)
-    }
-    
-    // MARK: - Request
-    
-    func requestCategories(#parentId: String) {
-        SVProgressHUD.show()
-
-        let manager = APIManager.sharedInstance
-        let categoryUrl = "https://demo3526363.mockable.io/getCategories?parentId=1"
-        
-        manager.GET(categoryUrl, parameters: nil, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            SVProgressHUD.dismiss()
-            self.categoryModel = CategoryModel.parseCategories(responseObject)
-            
-            if self.tableView != nil {
-                self.tableView.reloadData()
-            }
-        
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed")
-                SVProgressHUD.dismiss()
-        })
-    }
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CheckoutContainerViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CheckoutContainerViewController.swift
deleted file mode 100644
index c776032..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CheckoutContainerViewController.swift
+++ /dev/null
@@ -1,166 +0,0 @@
-//
-//  CheckoutContainerViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/19/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CheckoutContainerViewController: UIViewController {
-    
-    var summaryViewController: SummaryViewController?
-    var paymentViewController: PaymentViewController?
-    var overViewViewController: OverViewViewController?
-    
-    var viewControllers = [UIViewController]()
-    var selectedChildViewController: UIViewController?
-    
-    var contentViewFrame: CGRect?
-    var selectedIndex: Int = 0
-    
-    @IBOutlet weak var contentView: UIView!
-    
-    
-    @IBOutlet weak var firstCircleLabel: DynamicRoundedLabel!
-    @IBOutlet weak var secondCircleLabel: DynamicRoundedLabel!
-    @IBOutlet weak var thirdCircleLabel: DynamicRoundedLabel!
-    
-    @IBOutlet weak var summaryLabel: UILabel!
-    @IBOutlet weak var paymentLabel: UILabel!
-    @IBOutlet weak var overViewLabel: UILabel!
-    
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        if self.respondsToSelector("edgesForExtendedLayout") {
-            self.edgesForExtendedLayout = UIRectEdge.None
-        }
-        
-        self.initViewController()
-        self.setSelectedViewControllerWithIndex(self.selectedIndex)
-        self.backButton()
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    // This function is for executing child view logic code
-    func setSelectedViewControllerWithIndex(index: Int) {
-        if self.viewControllers.count != 0 {
-            let viewController: UIViewController = viewControllers[index]
-            setSelectedViewController(viewController)
-        }
-            
-        if index == 0 {
-            self.firsCircle()
-        } else if index == 1 {
-            self.secondCircle()
-        } else if index == 2 {
-            self.thirdCircle()
-        }
-    }
-    
-    func firsCircle() {
-        self.firstCircleLabel.backgroundColor = Constants.Colors.appTheme
-        self.secondCircleLabel.backgroundColor = UIColor.clearColor()
-        self.thirdCircleLabel.backgroundColor = UIColor.clearColor()
-        
-        self.firstCircleLabel.text = "1"
-        self.secondCircleLabel.text = ""
-        self.thirdCircleLabel.text = ""
-        
-        self.summaryLabel.textColor = UIColor.whiteColor()
-        self.paymentLabel.textColor = UIColor.lightGrayColor()
-        self.overViewLabel.textColor = UIColor.lightGrayColor()
-    }
-    
-    func secondCircle() {
-        self.firstCircleLabel.backgroundColor = Constants.Colors.appTheme
-        self.secondCircleLabel.backgroundColor = Constants.Colors.appTheme
-        self.thirdCircleLabel.backgroundColor = UIColor.clearColor()
-        
-        self.secondCircleLabel.text = "2"
-        self.thirdCircleLabel.text = ""
-        
-        self.summaryLabel.textColor = UIColor.lightGrayColor()
-        self.paymentLabel.textColor = UIColor.whiteColor()
-        self.overViewLabel.textColor = UIColor.lightGrayColor()
-    }
-    
-    func thirdCircle() {
-        self.firstCircleLabel.backgroundColor = Constants.Colors.appTheme
-        self.secondCircleLabel.backgroundColor = Constants.Colors.appTheme
-        self.thirdCircleLabel.backgroundColor = Constants.Colors.appTheme
-        
-        self.secondCircleLabel.text = "2"
-        self.thirdCircleLabel.text = "3"
-        
-        self.summaryLabel.textColor = UIColor.lightGrayColor()
-        self.paymentLabel.textColor = UIColor.lightGrayColor()
-        self.overViewLabel.textColor = UIColor.whiteColor()
-    }
-    
-    override func viewDidLayoutSubviews() {
-        self.contentViewFrame = contentView.bounds
-        
-    }
-    
-    func setSelectedViewController(viewController: UIViewController) {
-        if !(selectedChildViewController == viewController) {
-            if self.isViewLoaded() {
-                selectedChildViewController?.willMoveToParentViewController(self)
-                selectedChildViewController?.view.removeFromSuperview()
-                selectedChildViewController?.removeFromParentViewController()
-            }
-        }
-        self.view.layoutIfNeeded()
-        self.addChildViewController(viewController)
-        viewController.view.frame = self.contentViewFrame!
-        contentView.addSubview(viewController.view)
-        viewController.didMoveToParentViewController(self)
-        selectedChildViewController = viewController
-    }
-    
-    func initViewController() {
-        summaryViewController = SummaryViewController(nibName: "SummaryViewController", bundle: nil)
-        paymentViewController = PaymentViewController(nibName: "PaymentViewController", bundle: nil)
-        overViewViewController = OverViewViewController(nibName: "OverViewViewController", bundle: nil)
-        
-        self.viewControllers.append(summaryViewController!)
-        self.viewControllers.append(paymentViewController!)
-        self.viewControllers.append(overViewViewController!)
-    }
-    
-    func backButton() {
-        var backButton:UIButton = UIButton.buttonWithType(UIButtonType.Custom) as! UIButton
-        backButton.frame = CGRectMake(0, 0, 40, 40)
-        backButton.addTarget(self, action: "back", forControlEvents: UIControlEvents.TouchUpInside)
-        backButton.setImage(UIImage(named: "back-white"), forState: UIControlState.Normal)
-        var customBackButton:UIBarButtonItem = UIBarButtonItem(customView: backButton)
-        
-        let navigationSpacer: UIBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FixedSpace, target: nil, action: nil)
-        navigationSpacer.width = -20
-        
-        self.navigationItem.leftBarButtonItems = [navigationSpacer, customBackButton]
-    }
-    
-    func back() {
-        if self.selectedIndex != 0 {
-            self.selectedIndex--
-            self.setSelectedViewControllerWithIndex(self.selectedIndex)
-        } else {
-            self.navigationController?.popViewControllerAnimated(true)
-        }
-    }
-    
-    @IBAction func saveAndContinue(sender: AnyObject) {
-        if selectedIndex != self.viewControllers.count - 1 {
-            self.selectedIndex++
-        }
-        self.setSelectedViewControllerWithIndex(self.selectedIndex)
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CircularMenuViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CircularMenuViewController.swift
deleted file mode 100644
index dbd38f4..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CircularMenuViewController.swift
+++ /dev/null
@@ -1,400 +0,0 @@
-//
-//  CircularMenuViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/28/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CircularMenuViewController: UIViewController {
-    
-    @IBOutlet weak var roundedButton: RoundedButton!
-    
-    @IBOutlet weak var dimView: UIView!
-    
-    var buttonImages: [String] = []
-    var buttonTitles: [String] = []
-    var buttonRightText: [String] = []
-    var customTabBarController: CustomTabBarController?
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        self.initDimView()
-        self.view.bringSubviewToFront(self.roundedButton)
-    }
-    
-    override func viewDidLayoutSubviews() {
-        super.viewDidLayoutSubviews()
-        let screenSize: CGRect = UIScreen.mainScreen().bounds
-        if self.view.subviews.count <= 4 {
-            let xPosition: CGFloat = (self.view.frame.size.width / 2) - 25
-            var yPosition: CGFloat = self.roundedButton.frame.origin.y - 70
-            for (index, imageName) in enumerate(self.buttonImages) {
-                let button: UIButton = UIButton(frame: CGRectMake(xPosition, self.view.frame.size.height + 100, 50, 50))
-                button.backgroundColor = UIColor.clearColor()
-                button.layer.borderWidth = 1
-                button.layer.borderColor = UIColor.whiteColor().CGColor
-                button.layer.cornerRadius = button.frame.size.width / CGFloat(2)
-                button.tag = index + 1
-                
-                if index == 6 && SessionManager.isLoggedIn() {
-                    let profileImageView: UIImageView = UIImageView(frame: CGRectMake(0, 0, button.frame.size.width, button.frame.size.height))
-                    button.addSubview(profileImageView)
-                    button.clipsToBounds = true
-                    println("image name: \(imageName)")
-                    profileImageView.sd_setImageWithURL(NSURL(string: imageName), placeholderImage: UIImage(named: "dummy-placeholder"))
-                    profileImageView.contentMode = UIViewContentMode.ScaleToFill
-                    profileImageView.backgroundColor = UIColor.greenColor()
-                }
-                
-                button.setImage(UIImage(named: imageName), forState: UIControlState.Normal)
-                button.clipsToBounds = true
-                button.addTarget(self, action: "menuClick:", forControlEvents: UIControlEvents.TouchUpInside)
-                self.view.addSubview(button)
-                
-                var stringSize: CGSize = self.buttonTitles[index].sizeWithAttributes([NSFontAttributeName: UIFont.systemFontOfSize(12.0)])
-                var fontSize: CGFloat = 10
-                if IphoneType.isIphone5() {
-                    stringSize = self.buttonTitles[index].sizeWithAttributes([NSFontAttributeName: UIFont.systemFontOfSize(10.0)])
-                    fontSize = 9
-                } else if IphoneType.isIphone4() {
-                    
-                }
-                
-                var verticalMargin: CGFloat = 0.0
-                var verticalMarginLabel: CGFloat = 0.0
-                
-                if IphoneType.isIphone4() {
-                    verticalMargin = 5
-                    verticalMarginLabel = 30
-                } else if IphoneType.isIphone5() {
-                    verticalMargin = 15
-                    verticalMarginLabel = 30
-                } else {
-                    verticalMargin = 20
-                    verticalMarginLabel = 15
-                }
-                
-                var labelPosition: CGFloat = xPosition - (stringSize.width + 30)
-                if index != 6 {
-                    var width: CGFloat = stringSize.width + 20
-                    if IphoneType.isIphone6() {
-                        if stringSize.width > 137 {
-                            width = width - 10
-                            labelPosition = labelPosition + 10
-                        }
-                    } else if IphoneType.isIphone5() {
-                        if stringSize.width > 115 {
-                            width = width - 15
-                            labelPosition = labelPosition + 15
-                        }
-                    } else if IphoneType.isIphone4() {
-                        if index != 0 {
-                            width = width - 40
-                            labelPosition = labelPosition + 40
-                        }
-                     
-                        fontSize = 8
-                    }
-                    //left label except logout
-                    let label: UILabel = UILabel(frame: CGRectMake(labelPosition, yPosition + verticalMarginLabel, width, 20))
-                    label.backgroundColor = UIColor.whiteColor()
-                    label.text = self.buttonTitles[index]
-                    label.adjustsFontSizeToFitWidth = true
-                    label.textAlignment = NSTextAlignment.Center
-                    label.layer.cornerRadius = 10
-                    label.clipsToBounds = true
-                    label.font = UIFont(name: label.font.fontName, size: fontSize)
-                    label.tag = 100 + index
-                    label.alpha = 0
-                    self.view.addSubview(label)
-                    
-                    if self.buttonRightText[index] != "" && index != 6 {
-                        
-                        var labelWidth: CGFloat = 150
-                        var fontSize: CGFloat = 10.0
-                        if IphoneType.isIphone4() {
-                            labelWidth = 120
-                            fontSize = 8
-                        } else if IphoneType.isIphone5() {
-                            labelWidth = 120
-                            fontSize = 8
-                        }
-                        
-                        var horizontalSpaceToIcon: CGFloat = 0
-                        
-                        if SessionManager.isLoggedIn() {
-                            horizontalSpaceToIcon = 60
-                        } else {
-                            horizontalSpaceToIcon = 30
-                        }
-                        
-                        //right label except name and adress
-                        let label: UILabel = UILabel(frame: CGRectMake(xPosition + horizontalSpaceToIcon, yPosition + verticalMarginLabel, labelWidth, 20))
-                        label.text = self.buttonRightText[index]
-                        label.adjustsFontSizeToFitWidth = true
-                        label.textAlignment = NSTextAlignment.Center
-                        label.layer.cornerRadius = 10
-                        label.clipsToBounds = true
-                        label.font = UIFont(name: label.font.fontName, size: fontSize)
-                        label.textColor = UIColor.whiteColor()
-                        label.tag = 100 + index
-                        label.alpha = 0
-                        
-                        if SessionManager.isLoggedIn() && index == 2 {
-                            label.backgroundColor = UIColor.redColor()
-                        } else {
-                            label.backgroundColor = UIColor.clearColor()
-                        }
-                        
-                        self.view.addSubview(label)
-
-                    }
-                    
-                    yPosition = yPosition - button.frame.size.height - verticalMargin
-                } else {
-                    
-                    var labelWidth: CGFloat = 150
-                    var fontSize: CGFloat = 14.0
-                    if IphoneType.isIphone4() {
-                        labelWidth = 120
-                        fontSize = 10
-                    } else if IphoneType.isIphone5() {
-                        labelWidth = 120
-                        fontSize = 10
-                    }
-                    
-                    //logout Button
-                    if SessionManager.isLoggedIn() {
-                        var logoutPosition: CGFloat = xPosition - 125
-                        let logoutButton: UIButton = UIButton(frame: CGRectMake(logoutPosition, yPosition + 15, 100, 30))
-                        logoutButton.backgroundColor = UIColor.redColor()
-                        logoutButton.setTitle(self.buttonTitles[index], forState: UIControlState.Normal)
-                        logoutButton.layer.cornerRadius = 10
-                        logoutButton.titleLabel!.font =  UIFont(name: "HelveticaNeue", size: 14)
-                        logoutButton.clipsToBounds = true
-                        logoutButton.tag = 100 + index
-                        logoutButton.alpha = 0
-                        logoutButton.addTarget(self, action: "logout", forControlEvents: UIControlEvents.TouchUpInside)
-                        self.view.addSubview(logoutButton)
-                    } else {
-                        
-                        var width: CGFloat = stringSize.width + 20
-                        if IphoneType.isIphone6() {
-                            if stringSize.width > 137 {
-                                width = width - 10
-                                labelPosition = labelPosition + 10
-                            }
-                        } else if IphoneType.isIphone5() {
-                            if stringSize.width > 115 {
-                                width = width - 15
-                                labelPosition = labelPosition + 15
-                            }
-                        } else if IphoneType.isIphone4() {
-                            if index != 0 {
-                                width = width - 40
-                                labelPosition = labelPosition + 40
-                            }
-                            
-                            fontSize = 8
-                        }
-
-                        
-                        let label: UILabel = UILabel(frame: CGRectMake(labelPosition, yPosition + verticalMarginLabel, width, 20))
-                        label.backgroundColor = UIColor.whiteColor()
-                        label.text = self.buttonTitles[index]
-                        label.adjustsFontSizeToFitWidth = true
-                        label.textAlignment = NSTextAlignment.Center
-                        label.layer.cornerRadius = 10
-                        label.clipsToBounds = true
-                        label.font = UIFont(name: label.font.fontName, size: 10)
-                        label.tag = 100 + index
-                        label.alpha = 0
-                        self.view.addSubview(label)
-                    }
-                   
-                    
-                    //name label and address
-                    if  self.buttonRightText[index] != "" {
-                        if IphoneType.isIphone4() {
-                            
-                        } else if IphoneType.isIphone5() {
-                            yPosition = yPosition - 20
-                        } else {
-                            yPosition = yPosition - 30
-                        }
-                        
-                        let label: UILabel = UILabel(frame: CGRectMake(xPosition + 75, yPosition, labelWidth, 60))
-                        label.backgroundColor = UIColor.clearColor()
-                        label.text = self.buttonRightText[index]
-                        label.adjustsFontSizeToFitWidth = true
-                        label.textAlignment = NSTextAlignment.Left
-                        label.font = UIFont(name: label.font.fontName, size: fontSize)
-                        label.textColor = UIColor.whiteColor()
-                        label.tag = 100 + index
-                        label.alpha = 0
-                        label.lineBreakMode = NSLineBreakMode.ByWordWrapping
-                        label.numberOfLines = 0
-                        self.view.addSubview(label)
-                    }
-                }
-         
-            }
-            
-            self.presentCirculardMenuAnimate()
-        }
-        
-    }
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    @IBAction func closeCircularMenuView(sender: AnyObject) {
-        dissmissViewControllerAnimated()
-    }
-    
-    private func presentCirculardMenuAnimate() {
-        UIView.animateWithDuration(0.5, delay: 0.0, usingSpringWithDamping: 0.8, initialSpringVelocity: 3.0, options: UIViewAnimationOptions.CurveEaseInOut, animations: ({
-            
-            var yPosition: CGFloat = self.roundedButton.frame.origin.y - 70
-            if IphoneType.isIphone4() {
-                yPosition = self.roundedButton.frame.origin.y - 55
-            } else if IphoneType.isIphone5() {
-                yPosition = self.roundedButton.frame.origin.y - 55
-            }
-            
-           
-            let xPosition: CGFloat = (self.view.frame.size.width / 2) - 25
-            
-            var verticalMargin: CGFloat = 0.0
-            
-            if IphoneType.isIphone4() {
-                verticalMargin = 5
-            } else if IphoneType.isIphone5() {
-                verticalMargin = 15
-            } else {
-                verticalMargin = 20
-            }
-            
-            for tempView in self.view.subviews {
-                if tempView.tag != 0 && tempView.tag < 100 {
-                    let buttonView: UIButton = tempView as! UIButton
-                    //adjust the vertical margin of last button if the user is login
-                    if SessionManager.isLoggedIn() {
-                        if IphoneType.isIphone4() {
-                            if tempView.tag == 7 {
-                                yPosition = yPosition - 20
-                            }
-                        } else {
-                            if tempView.tag == 7 {
-                                yPosition = yPosition - 15
-                            }
-                        }
-                    }
-             
-                    buttonView.frame = CGRectMake(xPosition, yPosition, 50, 50)
-                    yPosition = yPosition - buttonView.frame.size.height - verticalMargin
-                } else if tempView.tag > 99 {
-                    let tempView: UIView = tempView as! UIView
-                    tempView.alpha = 1
-                }
-            }
-            self.dimView.alpha = 0.6
-            //self.showTitles()
-        }), completion: { (value: Bool) in
-            if SessionManager.isLoggedIn() {
-                self.animateProfileImage()
-            }
-            
-        })
-    }
-    
-    func animateProfileImage() {
-        UIView.animateWithDuration(0.5, delay: 0.0, usingSpringWithDamping: 0.8, initialSpringVelocity: 3.0, options: UIViewAnimationOptions.CurveEaseInOut, animations: ({
-            var yPosition: CGFloat = self.roundedButton.frame.origin.y - 70
-            let xPosition: CGFloat = (self.view.frame.size.width / 2) - 25
-            
-            for tempView in self.view.subviews {
-                if tempView.tag != 0 && tempView.tag < 99 {
-                    let buttonView: UIButton = tempView as! UIButton
-                    if tempView.tag == 7 {
-                        buttonView.transform = CGAffineTransformMakeScale(1.6, 1.6)
-                    }
-                }
-            }
-            //self.showTitles()
-        }), completion: nil)
-    }
-    
-     func dissmissViewControllerAnimated() {
-        let screenSize: CGRect = UIScreen.mainScreen().bounds
-        view.setTranslatesAutoresizingMaskIntoConstraints(false)
-        
-        UIView.animateWithDuration(0.5, delay: 0.0, usingSpringWithDamping: 0.8, initialSpringVelocity: 3.0, options: UIViewAnimationOptions.CurveEaseInOut, animations: ({
-            let xPosition: CGFloat = (self.view.frame.size.width / 2) - 25
-            self.roundedButton.alpha = 0
-            for tempView in self.view.subviews {
-                if tempView.tag != 0 && tempView.tag < 99 {
-                    let buttonView: UIButton = tempView as! UIButton
-                    buttonView.frame = CGRectMake(xPosition, screenSize.size.height, 50, 50)
-                    buttonView.transform = CGAffineTransformMakeScale(0.3, 0.3)
-                    buttonView.alpha = 0
-                } else if tempView.tag > 99 {
-                    let tempView: UIView = tempView as! UIView
-                    tempView.alpha = 0
-                }
-            }
-            self.dimView.alpha = 0.0
-        }), completion: {
-            (value: Bool) in
-            
-              self.dismissViewControllerAnimated(false, completion: nil)
-            
-        })
-    }
-    
-    
-    private func initDimView() {
-        self.dimView.alpha = 0.0
-        dimView.userInteractionEnabled = true
-        let tapGesture: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: "dissmissViewControllerAnimated")
-        dimView.addGestureRecognizer(tapGesture)
-    }
-
-    @IBAction func logout(sender: AnyObject) {
-        //logout function
-    }
-    
-    @IBAction func menuClick(sender: UIButton) {
-        let index: Int = sender.tag - 1
-        self.customTabBarController?.isValidToSwitchToMenuTabBarItems = true
-        if SessionManager.isLoggedIn() {
-            
-        } else {
-            if index == 0 {
-                
-            }
-        }
-        println(index)
-        self.customTabBarController?.selectedIndex = 2
-        
-        let navigationController: UINavigationController = self.customTabBarController!.viewControllers![2] as! UINavigationController
-        let hiddenViewController: HiddenViewController = navigationController.viewControllers[0] as! HiddenViewController
-        hiddenViewController.selectViewControllerAtIndex(index)
-        
-        self.customTabBarController?.isValidToSwitchToMenuTabBarItems = false
-        self.dissmissViewControllerAnimated()
-    }
-    
-    //logout
-    
-    func logout() {
-        SessionManager.logout()
-        self.dissmissViewControllerAnimated()
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomTabBarController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomTabBarController.swift
deleted file mode 100644
index 42997d2..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomTabBarController.swift
+++ /dev/null
@@ -1,26 +0,0 @@
-//
-//  CustomBarController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CustomTabBarController: UITabBarController {
- 
-    var isValidToSwitchToMenuTabBarItems: Bool = false
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomizeShoppingViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomizeShoppingViewController.swift
deleted file mode 100644
index 903757d..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/CustomizeShoppingViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  CustomizeShoppingViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class CustomizeShoppingViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerTableViewCell.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerTableViewCell.swift
deleted file mode 100644
index 7382d92..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerTableViewCell.swift
+++ /dev/null
@@ -1,50 +0,0 @@
-//
-//  FollowedSellerTableViewCell.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/15/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class FollowedSellerTableViewCell: UITableViewCell {
-
-    @IBOutlet weak var pictureImageView: UIImageView!
-    @IBOutlet weak var nameLabel: UILabel!
-    @IBOutlet weak var specialtyLabel: UILabel!
-    @IBOutlet weak var ratingsView: UIView!
-    
-    override func awakeFromNib() {
-        super.awakeFromNib()
-        // Initialization code
-        
-        pictureImageView.layer.cornerRadius = pictureImageView.frame.size.width / 2
-        pictureImageView.clipsToBounds = true
-    }
-
-    // MARK: - Methods
-    
-    func setPicture(text: String) {
-        self.pictureImageView.sd_setImageWithURL(NSURL(string: text), placeholderImage: UIImage(named: "dummy-placeholder"))
-    }
-    
-    func setRating(rating: Int) {
-        let size = self.ratingsView.frame.size.height
-        
-        for i in 0..<5 {
-            
-            let counter: Int = Int(i)
-            let image = UIImageView(frame: CGRectMake(CGFloat(CGFloat(i) * (size + 2)), 0, size, size))
-            
-            if i < rating {
-                image.image = UIImage(named: "rating2")
-            } else {
-                image.image = UIImage(named: "rating")
-            }
-            
-            self.ratingsView.addSubview(image)
-        }
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerViewController.swift
deleted file mode 100644
index 0cd5ec4..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/FollowedSellerViewController.swift
+++ /dev/null
@@ -1,91 +0,0 @@
-//
-//  FollowedSellerViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class FollowedSellerViewController: UIViewController, EmptyViewDelegate {
-
-    @IBOutlet weak var tableView: UITableView!
-
-    var emptyView: EmptyView?
-    var followedSellerModel: FollowedSellerModel!
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        let nib = UINib(nibName: "FollowedSellerTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "FollowedSellerIdentifier")
-        
-        requestReviewDetails()
-    }
-    
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        if followedSellerModel != nil {
-            return followedSellerModel.names.count
-        } else {
-            return 0
-        }
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: FollowedSellerTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("FollowedSellerIdentifier") as! FollowedSellerTableViewCell
-        
-        cell.selectionStyle = .None
-        
-        cell.nameLabel.text = followedSellerModel.names[indexPath.row]
-        cell.specialtyLabel.text = String("Specialty: ") + followedSellerModel.specialty[indexPath.row]
-        cell.setPicture(followedSellerModel.images[indexPath.row])
-        cell.setRating(followedSellerModel.ratings[indexPath.row])
-        
-        return cell
-    }
-    
-    // MARK: - Table View Delegate
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        let seller = SellerViewController(nibName: "SellerViewController", bundle: nil)
-//        self.presentViewController(vc, animated: true, completion: nil)
-        self.navigationController?.pushViewController(seller, animated: true)
-    }
-    
-    // MARK: - Request
-    
-    func requestReviewDetails() {
-        SVProgressHUD.show()
-        
-        let manager = APIManager.sharedInstance
-        manager.GET("https://demo3526363.mockable.io/follwedSeller", parameters: nil, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            
-            self.followedSellerModel = FollowedSellerModel.parseDataWithDictionary(responseObject)
-            self.tableView.reloadData()
-            SVProgressHUD.dismiss()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                self.addEmptyView()
-                SVProgressHUD.dismiss()
-        })
-    }
-    
-    // MARK: - Empty View
-    
-    func addEmptyView() {
-        self.emptyView = UIView.loadFromNibNamed("EmptyView", bundle: nil) as? EmptyView
-        self.emptyView!.delegate = self
-        self.view.addSubview(self.emptyView!)
-    }
-    
-    func didTapReload() {
-        requestReviewDetails()
-        self.emptyView?.removeFromSuperview()
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HelpViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/HelpViewController.swift
deleted file mode 100644
index 72939b3..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HelpViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  HelpViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class HelpViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HiddenViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/HiddenViewController.swift
deleted file mode 100644
index deef216..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HiddenViewController.swift
+++ /dev/null
@@ -1,139 +0,0 @@
-//
-//  HiddenViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class HiddenViewController: UIViewController {
-
-    var helpViewController: HelpViewController?
-    var registerViewController: RegisterViewController?
-    var loginViewController: LoginViewController?
-    var messagingViewController: MessagingViewController?
-    var customizeShoppingViewController: CustomizeShoppingViewController?
-    var resultViewController: ResultViewController?
-    var categoriesViewController: CategoriesViewController?
-    
-    var followedSellerViewController: FollowedSellerViewController?
-    var profileViewController: ProfileViewController?
-    
-    var viewControllers = [UIViewController]()
-    var contentViewFrame: CGRect?
-    
-    var selectedChildViewController: UIViewController?
-    
-    @IBOutlet weak var contentView: UIView!
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        self.contentViewFrame = contentView.bounds
-    }
-    
-    override func viewDidLayoutSubviews() {
-        self.contentViewFrame = contentView.bounds
-    }
-    
-    // This function is for executing child view logic code
-    func setSelectedViewControllerWithIndex(index: Int) {
-        if self.viewControllers.count != 0 {
-            let viewController: UIViewController = viewControllers[index]
-            setSelectedViewController(viewController)
-        }
-        
-        if index == 0 {
-            
-        } else if index == 1 {
-            
-        } else if index == 2 {
-            
-        } else if index == 3 {
-            
-        } else if index == 4 {
-            
-        } else if index == 5 {
-            
-        } else if index == 6 {
-            var titleLabel = UILabel(frame: CGRectZero)
-            titleLabel.text = "Category Page"
-            titleLabel.textColor = .whiteColor()
-            titleLabel.sizeToFit()
-            self.navigationItem.titleView = titleLabel
-        }
-        
-    }
-    
-    func setSelectedViewController(viewController: UIViewController) {
-        if !(selectedChildViewController == viewController) {
-            if self.isViewLoaded() {
-                selectedChildViewController?.willMoveToParentViewController(self)
-                selectedChildViewController?.view.removeFromSuperview()
-                selectedChildViewController?.removeFromParentViewController()
-            }
-        }
-        self.view.layoutIfNeeded()
-        self.addChildViewController(viewController)
-        viewController.view.frame = contentViewFrame!
-        contentView.addSubview(viewController.view)
-        viewController.didMoveToParentViewController(self)
-        selectedChildViewController = viewController
-    }
-    
-    
-    func initViews() {
-        if SessionManager.isLoggedIn() {
-            self.helpViewController = HelpViewController(nibName: "HelpViewController", bundle: nil)
-            self.followedSellerViewController = FollowedSellerViewController(nibName: "FollowedSellerViewController", bundle: nil)
-            self.messagingViewController = MessagingViewController(nibName: "MessagingViewController", bundle: nil)
-            self.customizeShoppingViewController = CustomizeShoppingViewController(nibName: "CustomizeShoppingViewController", bundle: nil)
-            self.resultViewController = ResultViewController(nibName: "ResultViewController", bundle: nil)
-            self.categoriesViewController = CategoriesViewController(nibName: "CategoriesViewController", bundle: nil)
-            self.profileViewController = ProfileViewController(nibName: "ProfileViewController", bundle: nil)
-            
-            self.viewControllers.append(self.helpViewController!)
-            self.viewControllers.append(self.followedSellerViewController!)
-            self.viewControllers.append(self.messagingViewController!)
-            self.viewControllers.append(self.customizeShoppingViewController!)
-            self.viewControllers.append(self.resultViewController!)
-            self.viewControllers.append(self.categoriesViewController!)
-            self.viewControllers.append(self.profileViewController!)
-        } else {
-            self.helpViewController = HelpViewController(nibName: "HelpViewController", bundle: nil)
-            
-            let storyBoard: UIStoryboard = UIStoryboard(name: "StartPageStoryBoard", bundle: nil)
-            
-            self.registerViewController = storyBoard.instantiateViewControllerWithIdentifier("RegisterViewController") as? RegisterViewController
-            
-            self.loginViewController =  storyBoard.instantiateViewControllerWithIdentifier("LoginViewController") as? LoginViewController
-            
-            self.messagingViewController = MessagingViewController(nibName: "MessagingViewController", bundle: nil)
-            self.customizeShoppingViewController = CustomizeShoppingViewController(nibName: "CustomizeShoppingViewController", bundle: nil)
-            self.resultViewController = ResultViewController(nibName: "ResultViewController", bundle: nil)
-            self.categoriesViewController = CategoriesViewController(nibName: "CategoriesViewController", bundle: nil)
-            
-            self.viewControllers.append(self.helpViewController!)
-            self.viewControllers.append(self.registerViewController!)
-            self.viewControllers.append(self.loginViewController!)
-            self.viewControllers.append(self.messagingViewController!)
-            self.viewControllers.append(self.customizeShoppingViewController!)
-            self.viewControllers.append(self.resultViewController!)
-            self.viewControllers.append(self.categoriesViewController!)
-        }
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    func selectViewControllerAtIndex(index: Int) {
-        if self.viewControllers.count == 0 {
-            self.initViews()
-        }
-        self.setSelectedViewControllerWithIndex(index)
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HomeContainerViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/HomeContainerViewController.swift
deleted file mode 100644
index 0ac05a2..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HomeContainerViewController.swift
+++ /dev/null
@@ -1,323 +0,0 @@
-//
-//  ViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/28/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class HomeContainerViewController: UIViewController, UITabBarControllerDelegate, EmptyViewDelegate {
-    
-    @IBOutlet weak var contentView: UIView!
-    
-    let viewControllerIndex = 0
-    var searchViewContoller: SearchViewController?
-    var circularMenuViewController: CircularMenuViewController?
-    var wishlisViewController: WishlistViewController?
-    var cartViewController: CartViewController?
-    
-    var viewControllers = [UIViewController]()
-    
-    var selectedChildViewController: UIViewController?
-    var contentViewFrame: CGRect?
-    
-    var hotItemsCollectionViewController: HomePageCollectionViewController?
-    var featuredCollectionViewController: HomePageCollectionViewController?
-    var newItemsCollectionViewController: HomePageCollectionViewController?
-    var sellersCollectionViewController: HomePageCollectionViewController?
-    
-    var curentCollectionViewController: Int = 0
-    
-    var emptyView: EmptyView?
-    
-    var customTabBarController: CustomTabBarController?
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        //set customTabbar
-        self.view.layoutIfNeeded()
-        self.contentViewFrame = self.view.frame
-        self.customTabBarController = self.tabBarController as? CustomTabBarController
-        self.customTabBarController?.isValidToSwitchToMenuTabBarItems = false
-        self.circularDraweView()
-        self.tabBarController!.delegate = self
-        self.addSuHeaderScrollView()
-        if Reachability.isConnectedToNetwork() {
-            if SessionManager.isLoggedIn() {
-                self.fireGetUserInfo()
-            }
-            self.fireGetHomePageData()
-        } else {
-            self.addEmptyView()
-        }
-        
-    }
-    
-    func addEmptyView() {
-        if self.emptyView == nil {
-            self.emptyView = UIView.loadFromNibNamed("EmptyView", bundle: nil) as? EmptyView
-            self.emptyView?.frame = self.contentViewFrame!
-            self.emptyView!.delegate = self
-            self.view.addSubview(self.emptyView!)
-        } else {
-            self.emptyView!.hidden = false
-        }
-    }
-    
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    override func viewDidLayoutSubviews() {
-        contentViewFrame = contentView.bounds
-       
-    }
-    
-    func tabBarController(tabBarController: UITabBarController, shouldSelectViewController viewController: UIViewController) -> Bool {
-        if self != viewController && viewController != tabBarController.viewControllers![2] as! UIViewController {
-            return true
-        } else if self.customTabBarController?.isValidToSwitchToMenuTabBarItems != true {
-            let storyBoard: UIStoryboard = UIStoryboard(name: "HomeStoryBoard", bundle: nil)
-            var animatedViewController: CircularMenuViewController?
-            animatedViewController  = storyBoard.instantiateViewControllerWithIdentifier("CircularMenuViewController") as? CircularMenuViewController
-            animatedViewController!.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext
-            animatedViewController!.providesPresentationContextTransitionStyle = true
-            animatedViewController!.definesPresentationContext = true
-            animatedViewController!.view.backgroundColor = UIColor.clearColor()
-            
-            if SessionManager.accessToken() != "" {
-                var buttonImages: [String] = ["help", "following", "message", "customize-shopping", "promo", "category", SessionManager.profileImageStringUrl()]
-                var buttonTitles: [String] = ["HELP", "FOLLOWED SELLER", "MESSAGING", "CUSTOMIZE SHOPPING", "TODAY'S PROMO", "CATEGORIES", "LOGOUT"]
-                var buttonRightText: [String] = ["", "", "You have 1 unread message", "", "", "", "Jessica Joe \nMetro Manila, City"]
-                
-                animatedViewController?.buttonImages = buttonImages
-                animatedViewController?.buttonTitles = buttonTitles
-                animatedViewController?.buttonRightText = buttonRightText
-            } else {
-                var buttonImages: [String] = ["help", "register", "sign_in", "message","customize-shopping", "promo", "category"]
-                var buttonTitles: [String] = ["HELP", "REGISTER", "SIGN IN", "MESSAGING", "CUSTOMIZE SHOPPING", "TODAYS PROMO", "CATEGORIES"]
-                var buttonRightText: [String] = ["", "", "Must be Sign in", "Must be Sign in", "", "", ""]
-                
-                animatedViewController?.buttonImages = buttonImages
-                animatedViewController?.buttonTitles = buttonTitles
-                animatedViewController?.buttonRightText = buttonRightText
-            }
-            animatedViewController?.customTabBarController = self.customTabBarController!
-            self.tabBarController?.presentViewController(animatedViewController!, animated: false, completion: nil)
-            return false
-        } else {
-            
-            return true
-        }
-        
-    }
-    
-    // This function is for executing child view logic code
-    func setSelectedViewControllerWithIndex(index: Int) {
-        if self.viewControllers.count != 0 {
-            let viewController: UIViewController = viewControllers[index]
-            setSelectedViewController(viewController)
-        }
-    }
-    
-    func setSelectedViewController(viewController: UIViewController) {
-        if !(selectedChildViewController == viewController) {
-            if self.isViewLoaded() {
-                selectedChildViewController?.willMoveToParentViewController(self)
-                selectedChildViewController?.view.removeFromSuperview()
-                selectedChildViewController?.removeFromParentViewController()
-            }
-        }
-        self.view.layoutIfNeeded()
-        self.addChildViewController(viewController)
-        viewController.view.frame = contentViewFrame!
-        contentView.addSubview(viewController.view)
-        viewController.didMoveToParentViewController(self)
-        selectedChildViewController = viewController
-    }
-    
-    func initViewControllers() {
-        let storyBoard: UIStoryboard = UIStoryboard(name: "HomeStoryBoard", bundle: nil)
-        hotItemsCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        featuredCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        newItemsCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        sellersCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-    
-        viewControllers.append(hotItemsCollectionViewController!)
-        viewControllers.append(featuredCollectionViewController!)
-        viewControllers.append(newItemsCollectionViewController!)
-        viewControllers.append(sellersCollectionViewController!)
-    }
-    
-    func addSuHeaderScrollView() {
-        let scrollView: UIScrollView = UIScrollView(frame: CGRectMake(0, 0, self.view.frame.size.width, 40))
-        let titles: [String] = ["FEATURED", "HOT ITEMS", "NEW ITEMS", "SELLER"]
-        var xPosition: CGFloat = 10
-        var counter = 0
-        for title in titles {
-            let button: UIButton = UIButton(frame: CGRectMake(xPosition, 5, 90, 30))
-            button.setTitle(title, forState: UIControlState.Normal)
-            button.titleLabel!.font =  UIFont(name: "HelveticaNeue", size: 10)
-            button.layer.cornerRadius = 15
-            button.layer.borderWidth = 1
-            button.layer.borderColor = UIColor.whiteColor().CGColor
-            button.tag = counter
-            button.addTarget(self, action: "clickSubCategories:", forControlEvents: .TouchUpInside)
-            scrollView.addSubview(button)
-            xPosition = xPosition + button.frame.size.width + 30
-            scrollView.contentSize = CGSizeMake(xPosition, 0)
-            
-            if title == "FEATURED" {
-                button.backgroundColor = UIColor.whiteColor()
-                button.setTitleColor(HexaColor.colorWithHexa(0x5A1F75), forState: UIControlState.Normal)
-            }
-            counter++
-        }
-        scrollView.showsHorizontalScrollIndicator = false
-        let navigationSpacer: UIBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FixedSpace, target: nil, action: nil)
-        navigationSpacer.width = -20
-        
-        self.navigationItem.leftBarButtonItems = [navigationSpacer, UIBarButtonItem(customView: scrollView)]
-    }
-    
-    @IBAction func clickSubCategories(sender: UIButton) {
-        let scrollView: UIScrollView = sender.superview as! UIScrollView
-        let subViewsCount: Int = scrollView.subviews.count
-        
-        for button in scrollView.subviews  {
-            if (button.isKindOfClass(UIButton)) {
-                let tempButton: UIButton = button as! UIButton
-                if tempButton.tag == sender.tag {
-                    tempButton.backgroundColor = UIColor.whiteColor()
-                    tempButton.setTitleColor(HexaColor.colorWithHexa(0x5A1F75), forState: UIControlState.Normal)
-                    if tempButton.tag != 0 {
-                        curentCollectionViewController = tempButton.tag
-                    } else {
-                        curentCollectionViewController = tempButton.tag
-                    }
-                    setSelectedViewControllerWithIndex(curentCollectionViewController)
-                } else {
-                    tempButton.backgroundColor = UIColor.clearColor()
-                    tempButton.setTitleColor(UIColor.whiteColor(), forState: UIControlState.Normal)
-                }
-            }
-            
-        }
-        
-    }
-    
-    func circularDraweView() {
-        let unselectedImage: UIImage = UIImage(named: "circular-drawer")!.imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
-        let item2: UITabBarItem = self.tabBarController?.tabBar.items![2] as! UITabBarItem
-        item2.selectedImage = unselectedImage
-        item2.image = unselectedImage
-        item2.imageInsets = UIEdgeInsets(top: 6, left: 0, bottom: -6, right: 0)
-    }
-    
-    func fireGetHomePageData() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-        let manager = APIManager.sharedInstance
-        manager.GET(APIAtlas.homeUrl, parameters: nil, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                self.populateHomePageWithDictionary(responseObject as! NSDictionary)
-            SVProgressHUD.dismiss()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                SVProgressHUD.dismiss()
-                self.addEmptyView()
-        })
-
-    }
-    
-    func populateHomePageWithDictionary(dictionary: NSDictionary) {
-        let storyBoard: UIStoryboard = UIStoryboard(name: "HomeStoryBoard", bundle: nil)
-        featuredCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        
-        let dataDictionary: NSDictionary = dictionary["data"] as! NSDictionary
-        
-        var featuredDictionary: NSDictionary = dataDictionary["featured"] as! NSDictionary
-        var featuredLayouts: [String] = [Constants.HomePage.layoutOneKey, Constants.HomePage.layoutTwoKey, Constants.HomePage.layoutThreeKey, Constants.HomePage.layoutFourKey, Constants.HomePage.layoutFiveKey, Constants.HomePage.layoutSixKey]
-        
-        featuredCollectionViewController?.dictionary = featuredDictionary
-        featuredCollectionViewController?.layouts = featuredLayouts
-        
-        hotItemsCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        let hotItemsDictionary: NSDictionary = dataDictionary["hotItems"] as! NSDictionary
-        var hotItemLayouts: [String] = [Constants.HomePage.layoutTwoKey, Constants.HomePage.layoutSevenKey]
-        
-        let categories: NSArray = hotItemsDictionary["categories"] as! NSArray
-        
-        for (index, category) in enumerate(categories) {
-            let categoryDictionary: NSDictionary = category as! NSDictionary
-            let layoutId: String = categoryDictionary["layoutId"] as! String
-            var layout: String = ""
-            if layoutId == "1" {
-                layout = Constants.HomePage.layoutFiveKey
-            }
-            
-            hotItemLayouts.append(layout)
-        }
-        
-        hotItemLayouts.append(Constants.HomePage.layoutTwoKey)
-        hotItemsCollectionViewController?.dictionary = hotItemsDictionary
-        hotItemsCollectionViewController?.layouts = hotItemLayouts
-        
-        
-        newItemsCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        let newItemsDictionary: NSDictionary = dataDictionary["newItems"] as! NSDictionary
-        var newItemslayout: [String] = [Constants.HomePage.layoutEightKey, Constants.HomePage.layoutSixKey]
-        newItemsCollectionViewController?.dictionary = newItemsDictionary
-        newItemsCollectionViewController?.layouts = newItemslayout
-        
-        sellersCollectionViewController = storyBoard.instantiateViewControllerWithIdentifier("HomePageCollectionViewController") as? HomePageCollectionViewController
-        let sellerDictionary: NSDictionary = dataDictionary["sellers"] as! NSDictionary
-        let sellerLayouts: [String] = [Constants.HomePage.layoutNineKey, Constants.HomePage.layoutTenKey]
-        sellersCollectionViewController?.dictionary = sellerDictionary
-        sellersCollectionViewController?.layouts = sellerLayouts
-        
-        viewControllers.append(featuredCollectionViewController!)
-        viewControllers.append(hotItemsCollectionViewController!)
-        viewControllers.append(newItemsCollectionViewController!)
-        viewControllers.append(sellersCollectionViewController!)
-        
-        setSelectedViewControllerWithIndex(self.curentCollectionViewController)
-    }
-    
-    func didTapReload() {
-        self.fireGetHomePageData()
-        self.emptyView?.hidden = true
-    }
-    
-    func fireGetUserInfo() {
-        let manager: APIManager = APIManager.sharedInstance
-        //seller@easyshop.ph
-        //password
-        let parameters: NSDictionary = ["access_token": SessionManager.accessToken()]
-        
-        manager.POST(APIAtlas.getUserInfoUrl, parameters: parameters, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            SVProgressHUD.dismiss()
-            let profileModel: ProfileModel = ProfileModel.pareseDataFromResponseObject(responseObject as! NSDictionary)
-            println(profileModel.name)
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
-                
-                if task.statusCode == 401 {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Mismatch username and password", title: "Login Failed")
-                } else {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Something went wrong", title: "Error")
-                }
-                
-                SVProgressHUD.dismiss()
-        })
-        
-    }
-    
-
-}
\ No newline at end of file
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HomePageCollectionViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/HomePageCollectionViewController.swift
deleted file mode 100644
index 74d4e20..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/HomePageCollectionViewController.swift
+++ /dev/null
@@ -1,587 +0,0 @@
-//
-//  HomePageCollectionViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/28/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-let reuseIdentifier = "Cell"
-
-class HomePageCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, ScrollableCollectionViewCellDelegate, NewSellerScrollableCollectionViewCellDelegate, ViewMoreFooterCollectionViewCellDelegate, SellerCollectionViewCellDelegate {
-    var collectionView: UICollectionView?
-    
-    var dictionary: NSDictionary = NSDictionary()
-    var layouts: [String] = []
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-    }
-    
-    override func viewDidLayoutSubviews() {
-        if self.collectionView == nil {
-            let layout: HomePageCollectionViewLayout = HomePageCollectionViewLayout()
-            layout.layouts = layouts
-            self.collectionView = UICollectionView(frame: self.view.bounds, collectionViewLayout: layout)
-            self.collectionView!.delegate = self
-            self.collectionView!.dataSource = self
-            self.collectionView?.backgroundColor = UIColor.clearColor()
-            self.view.addSubview(self.collectionView!)
-            self.registerCells()
-            if dictionary.count != 0 || self.layouts.count != 0 {
-                self.collectionView?.reloadData()
-            }
-        }
-        
-        self.navigationController?.navigationBar.alpha = 1.0
-        self.navigationController?.navigationBar.barTintColor = Constants.Colors.appTheme
-        UIApplication.sharedApplication().statusBarStyle = UIStatusBarStyle.LightContent
-    }
-    
-    func registerCells() {
-        var fullImageCollectionViewNib: UINib = UINib(nibName: "FullImageCollectionViewCell", bundle:nil)
-        collectionView?.registerNib(fullImageCollectionViewNib, forCellWithReuseIdentifier: "FullImageCollectionViewCell")
-        
-        var layoutHeaderCollectionViewNib: UINib = UINib(nibName: "LayoutHeaderCollectionViewCell", bundle: nil)
-        collectionView?.registerNib(layoutHeaderCollectionViewNib, forSupplementaryViewOfKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "LayoutHeaderCollectionViewCell")
-        
-        var verticalImageCollectionViewCell: UINib = UINib(nibName: "VerticalImageCollectionViewCell", bundle: nil)
-        collectionView?.registerNib(verticalImageCollectionViewCell, forCellWithReuseIdentifier: "VerticalImageCollectionViewCell")
-        
-        var halfVerticalCollectionViewCellNib = UINib(nibName: "HalfVerticalImageCollectionViewCell", bundle: nil)
-        collectionView?.registerNib(halfVerticalCollectionViewCellNib, forCellWithReuseIdentifier: "HalfVerticalImageCollectionViewCell")
-        
-        var decorationViewNib: UINib = UINib(nibName: "SectionBackground", bundle: nil)
-
-        self.collectionView?.collectionViewLayout.registerNib(decorationViewNib, forDecorationViewOfKind: "SectionBackground")
-        //ProductItemWithVerticalDisplayCollectionViewCell
-        
-        var productItemWithVerticalDisplayNib: UINib = UINib(nibName: "ProductItemWithVerticalDisplayCollectionViewCell", bundle: nil)
-        self.collectionView?.registerNib(productItemWithVerticalDisplayNib, forCellWithReuseIdentifier: "ProductItemWithVerticalDisplayCollectionViewCell")
-        
-        var footerNib = UINib(nibName: "ViewMoreFooterCollectionViewCell", bundle: nil)
-        collectionView?.registerNib(footerNib, forSupplementaryViewOfKind: UICollectionElementKindSectionFooter, withReuseIdentifier: "ViewMoreFooterCollectionViewCell")
-        
-        var scrollableCellNib: UINib = UINib(nibName: "ScrollableCollectionViewCell", bundle: nil)
-        self.collectionView?.registerNib(scrollableCellNib, forCellWithReuseIdentifier: "ScrollableCollectionViewCell")
-        
-        var sellerCollectionViewCellNib: UINib = UINib(nibName: "SellerCollectionViewCell", bundle: nil)
-        self.collectionView?.registerNib(sellerCollectionViewCellNib, forCellWithReuseIdentifier: "SellerCollectionViewCell")
-        
-        var newSellerNib: UINib = UINib(nibName: "NewSellerScrollableCollectionViewCell", bundle: nil)
-        self.collectionView?.registerNib(newSellerNib, forCellWithReuseIdentifier: "NewSellerScrollableCollectionViewCell")
-        
-        var twoColumnCellNib: UINib = UINib(nibName: "TwoColumnGridCollectionViewCell", bundle: nil)
-        self.collectionView?.registerNib(twoColumnCellNib, forCellWithReuseIdentifier: "TwoColumnGridCollectionViewCell")
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-
-    func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {
-        //#warning Incomplete method implementation -- Return the number of sections
-        return self.layouts.count
-    }
-
-
-    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
-        if self.layouts[section] == Constants.HomePage.layoutOneKey {
-            return 1
-        } else if self.layouts[section] == Constants.HomePage.layoutTwoKey {
-            return 3
-        } else if self.layouts[section] == Constants.HomePage.layoutThreeKey {
-            return 3
-        } else if self.layouts[section] == Constants.HomePage.layoutFourKey {
-            return 4
-        } else if self.layouts[section] == Constants.HomePage.layoutFiveKey {
-            return 6
-        } else if self.layouts[section] == Constants.HomePage.layoutSixKey {
-            if let val: AnyObject = self.dictionary["itemsYouMayLike"] {
-                let array: NSArray = self.dictionary["itemsYouMayLike"] as! NSArray
-                return array.count
-            } else {
-                let array: NSArray = self.dictionary["shopByNewRelease"] as! NSArray
-                return array.count
-            }
-        } else if layouts[section] == Constants.HomePage.layoutSevenKey {
-            return 2
-        } else if layouts[section] == Constants.HomePage.layoutEightKey {
-            return 1
-        } else if layouts[section] == Constants.HomePage.layoutNineKey {
-            return 1
-        } else if layouts[section] == Constants.HomePage.layoutTenKey {
-            let sellerArray: NSArray = self.dictionary["topSellers"] as! NSArray
-            return sellerArray.count
-        } else {
-            return 0
-        }
-    }
-    
-    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
-        if self.layouts[indexPath.section] == Constants.HomePage.layoutOneKey {
-            let productDictionary: NSDictionary = dictionary["mainBanner"] as! NSDictionary
-            let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-            let homeProductModel: HomePageProductModel = HomePageProductModel.parseDataWithDictionary(productDictionary)
-
-            fullImageColectionViewCell.targetType = homeProductModel.targetType
-            fullImageColectionViewCell.target = homeProductModel.target
-            
-            fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            return fullImageColectionViewCell
-        } else if self.layouts[indexPath.section] == Constants.HomePage.layoutTwoKey {
-            
-            var productDictionary: NSArray = NSArray()
-            if let val: AnyObject = self.dictionary["subBanners"] {
-                productDictionary = self.dictionary["subBanners"] as! NSArray
-            } else if let val: AnyObject = self.dictionary["topBanners"] {
-                productDictionary = self.dictionary["topBanners"] as! NSArray
-            } else if let val: AnyObject = self.dictionary["bottomBanners"] {
-                productDictionary = self.dictionary["bottomBanners"] as! NSArray
-            }
-            
-            let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-            let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productDictionary)
-            
-            let homeProductModel: HomePageProductModel = homeProductModels[indexPath.row]
-            fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            fullImageColectionViewCell.targetType = homeProductModel.targetType
-            fullImageColectionViewCell.target = homeProductModel.target
-            
-            return fullImageColectionViewCell
-            
-        } else if self.layouts[indexPath.section] == Constants.HomePage.layoutThreeKey {
-            var homeProductModel: HomePageProductModel?
-            var productArray: NSArray = NSArray()
-            if let val: AnyObject = self.dictionary["promos"] {
-                productArray = dictionary["promos"] as! NSArray
-                var homeProductModels: [HomePageProductModel] = [HomePageProductModel]()
-                homeProductModels = HomePageProductModel.parseDataWithArray(productArray)
-                homeProductModel  = homeProductModels[indexPath.row]
-            } else {
-                if let val: AnyObject = self.dictionary["categories"] {
-                    let arrayDictionary: NSArray = self.dictionary["categories"] as! NSArray
-                    //hard coded for now
-                    let categoryDictionary: NSDictionary = arrayDictionary[0] as! NSDictionary
-                    
-                    productArray = categoryDictionary["images"] as! NSArray
-                    var homeProductModels: [HomePageProductModel] = [HomePageProductModel]()
-                    homeProductModels = HomePageProductModel.parseDataWithArray(productArray)
-                    homeProductModel  = homeProductModels[indexPath.row]
-                }
-            }
-            
-            if indexPath.row == 0 {
-                let fourImageCollectionViewCell: VerticalImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("VerticalImageCollectionViewCell", forIndexPath: indexPath) as! VerticalImageCollectionViewCell
-                fourImageCollectionViewCell.productItemImageView.sd_setImageWithURL(homeProductModel!.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-                fourImageCollectionViewCell.productNameLabel.text = homeProductModel!.name
-                
-                if homeProductModel!.discountedPrice != "" {
-                    fourImageCollectionViewCell.discountedPriceLabel.text = "P \(homeProductModel!.discountedPrice)"
-                    fourImageCollectionViewCell.discountPercentageLabel.text = "\(homeProductModel!.discountPercentage) %"
-                } else {
-                    fourImageCollectionViewCell.discountedPriceLabel.hidden = true
-                    fourImageCollectionViewCell.discountPercentageLabel.hidden = true
-                }
-                
-                fourImageCollectionViewCell.targetType = homeProductModel!.targetType
-                fourImageCollectionViewCell.target = homeProductModel!.target
-                fourImageCollectionViewCell.discountedPriceLabel.drawDiscountLine()
-                
-                return fourImageCollectionViewCell
-            } else {
-                let fourImageCollectionViewCell: HalfVerticalImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("HalfVerticalImageCollectionViewCell", forIndexPath: indexPath) as! HalfVerticalImageCollectionViewCell
-                
-                fourImageCollectionViewCell.productItemImageView.sd_setImageWithURL(homeProductModel!.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-                fourImageCollectionViewCell.productNameLabel.text = homeProductModel!.name
-                
-                fourImageCollectionViewCell.targetType = homeProductModel!.targetType
-                fourImageCollectionViewCell.target = homeProductModel!.target
-                
-                if homeProductModel!.discountedPrice != "" {
-                    fourImageCollectionViewCell.discountedPriceLabel.text = "P \(homeProductModel!.discountedPrice)"
-                    fourImageCollectionViewCell.discountPercentageLabel.text = "\(homeProductModel!.discountPercentage) %"
-                } else {
-                    fourImageCollectionViewCell.discountedPriceLabel.hidden = true
-                    fourImageCollectionViewCell.discountPercentageLabel.hidden = true
-                }
-                fourImageCollectionViewCell.targetType = homeProductModel!.targetType
-                fourImageCollectionViewCell.target = homeProductModel!.target
-                fourImageCollectionViewCell.discountedPriceLabel.drawDiscountLine()
-                
-                return fourImageCollectionViewCell
-            }
-            
-        } else if self.layouts[indexPath.section] == Constants.HomePage.layoutFourKey {
-            var homeProductModel: HomePageProductModel?
-            var productArray: NSArray = NSArray()
-            
-            if let val: AnyObject = self.dictionary["popularCategories"] {
-                let productDictionary: NSArray = dictionary["popularCategories"] as! NSArray
-                 let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productDictionary)
-                homeProductModel = homeProductModels[indexPath.row]
-            } else {
-                let arrayDictionary: NSArray = self.dictionary["categories"] as! NSArray
-                //hard coded for now
-                let categoryDictionary: NSDictionary = arrayDictionary[1] as! NSDictionary
-                
-                productArray = categoryDictionary["images"] as! NSArray
-                var homeProductModels: [HomePageProductModel] = [HomePageProductModel]()
-                homeProductModels = HomePageProductModel.parseDataWithArray(productArray)
-                homeProductModel  = homeProductModels[indexPath.row]
-            }
-            
-            let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-           
-            fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel!.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            fullImageColectionViewCell.targetType = homeProductModel!.targetType
-            fullImageColectionViewCell.target = homeProductModel!.target
-            
-            return fullImageColectionViewCell
-
-        }  else if self.layouts[indexPath.section] == Constants.HomePage.layoutFiveKey {
-            if let val: AnyObject = self.dictionary["trendingItems"] {
-                
-                let productDictionary: NSArray = dictionary["trendingItems"] as! NSArray
-                let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-                let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productDictionary)
-                
-                let homeProductModel: HomePageProductModel = homeProductModels[indexPath.row]
-                fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-                fullImageColectionViewCell.targetType = homeProductModel.targetType
-                fullImageColectionViewCell.target = homeProductModel.target
-                return fullImageColectionViewCell
-                
-            } else {
-                if let val: AnyObject = self.dictionary["categories"] {
-                    let arrayDictionary: NSArray = self.dictionary["categories"] as! NSArray
-                    //hard coded for now
-                    var categoryDictionary: NSDictionary
-                    if indexPath.section == 2 {
-                        categoryDictionary = arrayDictionary[0] as! NSDictionary
-                    } else {
-                        categoryDictionary = arrayDictionary[1] as! NSDictionary
-                    }
-                    
-                    let productArray: NSArray = categoryDictionary["images"] as! NSArray
-                    var homeProductModels: [HomePageProductModel] = [HomePageProductModel]()
-                    homeProductModels = HomePageProductModel.parseDataWithArray(productArray)
-                    let homeProductModel: HomePageProductModel  = homeProductModels[indexPath.row]
-                    
-                    let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-                    fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-                    fullImageColectionViewCell.targetType = homeProductModel.target
-                    fullImageColectionViewCell.target = homeProductModel.targetType
-                    return fullImageColectionViewCell
-                } else {
-                    let productDictionary: NSArray = dictionary["trendingItems"] as! NSArray
-                    let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-                    let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productDictionary)
-                    
-                    let homeProductModel: HomePageProductModel = homeProductModels[indexPath.row]
-                    fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-                    fullImageColectionViewCell.targetType = homeProductModel.targetType
-                    fullImageColectionViewCell.target = homeProductModel.target
-                    return fullImageColectionViewCell
-                }
-                
-            }
-            
-        } else if self.layouts[indexPath.section] == Constants.HomePage.layoutSixKey {
-            let twoColumnGridCollectionViewCell: TwoColumnGridCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("TwoColumnGridCollectionViewCell", forIndexPath: indexPath) as! TwoColumnGridCollectionViewCell
-            
-            var productArray: NSArray = NSArray()
-            var homeProductModel: HomePageProductModel?
-            
-            if let val: AnyObject = self.dictionary["shopByNewRelease"] {
-                productArray = dictionary["shopByNewRelease"] as! NSArray
-                
-                let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productArray)
-                 homeProductModel = homeProductModels[indexPath.row]
-            } else {
-                productArray = dictionary["itemsYouMayLike"] as! NSArray
-                let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productArray)
-                homeProductModel = homeProductModels[indexPath.row]
-            }
-            twoColumnGridCollectionViewCell.productNameLabel.text = homeProductModel?.name
-            twoColumnGridCollectionViewCell.targetType = homeProductModel!.targetType
-            twoColumnGridCollectionViewCell.target = homeProductModel!.target
-            twoColumnGridCollectionViewCell.productItemImageView.sd_setImageWithURL(homeProductModel!.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            
-            twoColumnGridCollectionViewCell.discountedPriceLabel.text = homeProductModel?.discountedPrice
-            twoColumnGridCollectionViewCell.discountPercentageLabel.text = homeProductModel?.discountPercentage
-            twoColumnGridCollectionViewCell.productNameLabel.text = homeProductModel?.name
-            twoColumnGridCollectionViewCell.originalPriceLabel.text = homeProductModel?.originalPrice
-            twoColumnGridCollectionViewCell.discountedPriceLabel.drawDiscountLine()
-            
-            return twoColumnGridCollectionViewCell
-        } else if self.layouts[indexPath.section] == Constants.HomePage.layoutSevenKey {
-            let productItemWithVerticalDisplay: ProductItemWithVerticalDisplayCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("ProductItemWithVerticalDisplayCollectionViewCell", forIndexPath: indexPath) as! ProductItemWithVerticalDisplayCollectionViewCell
-            
-            let productDictionary: NSArray = dictionary["topPicks"] as! NSArray
-            let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productDictionary)
-            
-            let homeProductModel: HomePageProductModel = homeProductModels[indexPath.row]
-            productItemWithVerticalDisplay.productItemImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            productItemWithVerticalDisplay.originalPriceLabel.text = homeProductModel.originalPrice
-            productItemWithVerticalDisplay.productNameLabel.text = homeProductModel.name
-          
-            if homeProductModel.discountedPrice != "" {
-                productItemWithVerticalDisplay.discountedPriceLabel.text = "P \(homeProductModel.discountedPrice)"
-                productItemWithVerticalDisplay.discountPercentageLabel.text = "\(homeProductModel.discountPercentage) %"
-            } else {
-                productItemWithVerticalDisplay.discountedPriceLabel.hidden = true
-                productItemWithVerticalDisplay.discountPercentageLabel.hidden = true
-            }
-            productItemWithVerticalDisplay.targetType = homeProductModel.targetType
-            productItemWithVerticalDisplay.target = homeProductModel.target
-            productItemWithVerticalDisplay.discountedPriceLabel.drawDiscountLine()
-            
-            return productItemWithVerticalDisplay
-        } else if layouts[indexPath.section] == Constants.HomePage.layoutEightKey {
-            let scrollableCell: ScrollableCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("ScrollableCollectionViewCell", forIndexPath: indexPath) as! ScrollableCollectionViewCell
-            scrollableCell.delegate = self
-            var productHomeModels: [HomePageProductModel] = [HomePageProductModel]()
-            let products: NSArray = self.dictionary["shopByCategories"] as! NSArray
-            
-            for (index, product) in enumerate(products) {
-                let productDictionary: NSDictionary = product as! NSDictionary
-                let productModel = HomePageProductModel.parseDataWithDictionary(productDictionary)
-                productHomeModels.append(productModel)
-            }
-            
-            scrollableCell.productModels = productHomeModels
-            
-            return scrollableCell
-        } else if layouts[indexPath.section] == Constants.HomePage.layoutNineKey {
-            let scrollableCell: NewSellerScrollableCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("NewSellerScrollableCollectionViewCell", forIndexPath: indexPath) as! NewSellerScrollableCollectionViewCell
-            
-            var productHomeModels: [HomePageProductModel] = [HomePageProductModel]()
-            let products: NSArray = self.dictionary["newSellers"] as! NSArray
-            
-            for (index, product) in enumerate(products) {
-                let productDictionary: NSDictionary = product as! NSDictionary
-                let productModel = HomePageProductModel.parseDataWithDictionary(productDictionary)
-                productHomeModels.append(productModel)
-            }
-            
-            scrollableCell.delegate = self
-            scrollableCell.productModels = productHomeModels
-            
-            return scrollableCell
-        } else if layouts[indexPath.section] == Constants.HomePage.layoutTenKey {
-            let sellerCollectionView: SellerCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("SellerCollectionViewCell", forIndexPath: indexPath) as! SellerCollectionViewCell
-            let sellerArray: NSArray = self.dictionary["topSellers"] as! NSArray
-            
-            let sellerDictionary: NSDictionary = sellerArray[indexPath.row] as! NSDictionary
-            
-            let sellerModel: SellerModel = SellerModel.parseDataFromDictionary(sellerDictionary)
-            
-            sellerCollectionView.sellerTitleLabel.text = sellerModel.name
-            sellerCollectionView.sellerSubTitleLabel.text = sellerModel.specialty
-            sellerCollectionView.sellerProfileImageView.sd_setImageWithURL(sellerModel.avatar, placeholderImage: UIImage(named: "dummy-placeholder"))
-            
-            sellerCollectionView.productOneImageView.sd_setImageWithURL(sellerModel.products[0].imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            sellerCollectionView.productTwoImageView.sd_setImageWithURL(sellerModel.products[1].imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            sellerCollectionView.productThreeImageView.sd_setImageWithURL(sellerModel.products[2].imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            
-            sellerCollectionView.productOneImageView.target = sellerModel.products[0].target
-            sellerCollectionView.productOneImageView.targetType = sellerModel.products[0].targetType
-            
-            sellerCollectionView.productTwoImageView.target = sellerModel.products[1].target
-            sellerCollectionView.productTwoImageView.targetType = sellerModel.products[1].targetType
-
-            sellerCollectionView.productThreeImageView.target = sellerModel.products[2].target
-            sellerCollectionView.productThreeImageView.targetType = sellerModel.products[2].targetType
-            
-            sellerCollectionView.delegate = self
-            
-            sellerCollectionView.targetType = "Go to Seller!"
-            
-            sellerCollectionView.target = sellerModel.target
-     
-            return sellerCollectionView
-        } else {
-            let productDictionary: NSArray = dictionary["mainbanner"] as! NSArray
-            let fullImageColectionViewCell: FullImageCollectionViewCell = self.collectionView?.dequeueReusableCellWithReuseIdentifier("FullImageCollectionViewCell", forIndexPath: indexPath) as! FullImageCollectionViewCell
-            let homeProductModels: [HomePageProductModel] = HomePageProductModel.parseDataWithArray(productDictionary)
-            
-            let homeProductModel: HomePageProductModel = homeProductModels[indexPath.row]
-            println(homeProductModel.imageURL)
-            fullImageColectionViewCell.itemProductImageView.sd_setImageWithURL(homeProductModel.imageURL, placeholderImage: UIImage(named: "dummy-placeholder"))
-            
-            return fullImageColectionViewCell
-        }
-    }
-    
-    func collectionView(collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, atIndexPath indexPath: NSIndexPath) -> UICollectionReusableView {
-        if kind == "UICollectionElementKindSectionFooter" {
-            let footerView = self.collectionView?.dequeueReusableSupplementaryViewOfKind(kind, withReuseIdentifier: "ViewMoreFooterCollectionViewCell", forIndexPath: indexPath) as! ViewMoreFooterCollectionViewCell
-            
-            if self.layouts[indexPath.section] == Constants.HomePage.layoutThreeKey {
-                if let val: AnyObject = self.dictionary["promos"] {
-                    footerView.target = "View More Promos!"
-                    footerView.targetType = "Go to list!"
-                }
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutFourKey {
-                if let val: AnyObject = self.dictionary["popularCategories"] {
-                    footerView.target = "View More Popular Categories!"
-                    footerView.targetType = "Go to list!"
-                }
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutFourKey {
-                
-            }
-            
-            
-            
-            else {
-                if let val: AnyObject = self.dictionary["categories"] {
-                    let categoryArray: NSArray = self.dictionary["categories"] as! NSArray
-                    
-                    for (index, category) in enumerate(categoryArray) {
-                        let categoryDictionary: NSDictionary = category as! NSDictionary
-                        footerView.target = "footer target"
-                    }
-                }
-            }
-            
-            footerView.delegate = self
-            return footerView
-        } else {
-
-            let headerView: LayoutHeaderCollectionViewCell = self.collectionView?.dequeueReusableSupplementaryViewOfKind(kind, withReuseIdentifier: "LayoutHeaderCollectionViewCell", forIndexPath: indexPath) as! LayoutHeaderCollectionViewCell
-            
-            if self.layouts[indexPath.section] == Constants.HomePage.layoutOneKey {
-                
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutTwoKey {
-                
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutThreeKey {
-                if let val: AnyObject = dictionary["promos"] {
-                    headerView.titleLabel.text = "Today's Promo"
-                } else {
-                    let arrayCategory: NSArray = self.dictionary["categories"] as! NSArray
-                    let dictionaryCategory: NSDictionary = arrayCategory[0] as! NSDictionary
-                    headerView.titleLabel.text = dictionaryCategory["categoryName"] as? String
-                }
-
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutFourKey {
-                headerView.titleLabel.text = "Popular Categories"
-                headerView.backgroundColor = UIColor.whiteColor()
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutFiveKey {
-                if let val: AnyObject = self.dictionary["categories"] {
-                    let arrayCategory: NSArray = self.dictionary["categories"] as! NSArray
-                    let dictionaryCategory: NSDictionary = arrayCategory[indexPath.section - 2] as! NSDictionary
-                    headerView.titleLabel.text = dictionaryCategory["categoryName"] as? String
-                } else {
-                    headerView.titleLabel.text = "Trending Items"
-                }
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutSixKey {
-                headerView.titleLabel.text = "Items you my like"
-                headerView.backgroundColor = UIColor.clearColor()
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutSevenKey {
-                headerView.titleLabel.text = "Top Picks"
-                headerView.backgroundColor = UIColor.whiteColor()
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutEightKey {
-                headerView.titleLabel.text = "Shop by category"
-                headerView.backgroundColor = UIColor.clearColor()
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutTenKey {
-                headerView.titleLabel.text = "Top Sellers"
-                headerView.backgroundColor = UIColor.clearColor()
-            } else if self.layouts[indexPath.section] == Constants.HomePage.layoutNineKey {
-                headerView.titleLabel.text = "New Sellers"
-                headerView.backgroundColor = UIColor.clearColor()
-            }
-            
-            headerView.updateTitleLine()
-            
-            return headerView
-        }
-    }
-    
-    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAtIndex section: Int) -> UIEdgeInsets {
-        let leftRightInset = 0
-        
-        return UIEdgeInsetsMake(0, 0, 0, 0)
-    }
-    
-    func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {
-        let cell: UICollectionViewCell = self.collectionView!.cellForItemAtIndexPath(indexPath)!
-
-        if cell.isKindOfClass(FullImageCollectionViewCell) {
-            let fullImageCollectionViewCell: FullImageCollectionViewCell = self.collectionView!.cellForItemAtIndexPath(indexPath) as! FullImageCollectionViewCell
-            println("Target: \(fullImageCollectionViewCell.target)")
-            println("Target type: \(fullImageCollectionViewCell.targetType)")
-            self.redirectToProductpageWithProductID("1")
-        } else if cell.isKindOfClass(HalfVerticalImageCollectionViewCell) {
-            let halfVerticalImageCollectionViewCell: HalfVerticalImageCollectionViewCell = self.collectionView!.cellForItemAtIndexPath(indexPath) as! HalfVerticalImageCollectionViewCell
-            println("Target: \(halfVerticalImageCollectionViewCell.target)")
-            println("Target type: \(halfVerticalImageCollectionViewCell.targetType)")
-            self.redirectToProductpageWithProductID("1")
-        } else if cell.isKindOfClass(ProductItemWithVerticalDisplayCollectionViewCell) {
-            let productItemWithVerticalDisplayCollectionViewCell: ProductItemWithVerticalDisplayCollectionViewCell = cell as! ProductItemWithVerticalDisplayCollectionViewCell
-            println("Target: \(productItemWithVerticalDisplayCollectionViewCell.target)")
-            println("Target type: \(productItemWithVerticalDisplayCollectionViewCell.targetType)")
-            self.redirectToProductpageWithProductID("1")
-        } else if cell.isKindOfClass(ProductWithCenterNameCollectionViewCell) {
-            let productWithCenterNameCollectionViewCell: ProductWithCenterNameCollectionViewCell = cell as! ProductWithCenterNameCollectionViewCell
-            println("Target: \(productWithCenterNameCollectionViewCell.target)")
-            println("Target type: \(productWithCenterNameCollectionViewCell.targetType)")
-            self.redirectToProductpageWithProductID("1")
-        } else if cell.isKindOfClass(TwoColumnGridCollectionViewCell) {
-            let twoColumnGridCollectionViewCell: TwoColumnGridCollectionViewCell = cell as! TwoColumnGridCollectionViewCell
-            println("Target: \(twoColumnGridCollectionViewCell.target)")
-            println("Target type: \(twoColumnGridCollectionViewCell.targetType)")
-            self.redirectToProductpageWithProductID("1")
-        } else if cell.isKindOfClass(VerticalImageCollectionViewCell) {
-            let verticalImageCollectionViewCell: VerticalImageCollectionViewCell = cell as! VerticalImageCollectionViewCell
-            println("Target: \(verticalImageCollectionViewCell.target)")
-            println("Target type: \(verticalImageCollectionViewCell.targetType)")
-            self.redirectToProductpageWithProductID("1")
-        } else if cell.isKindOfClass(SellerCollectionViewCell) {
-            let sellerCollectionViewCell: SellerCollectionViewCell = cell as! SellerCollectionViewCell
-            println("Target: \(sellerCollectionViewCell.target)")
-            println("Target type: \(sellerCollectionViewCell.targetType)")
-            self.redirectToSellerWithID("sellerID")
-        }
-    
-    }
-    
-    func didSelectectCellWithTarget(target: String, targetType: String) {
-        println("target: \(target) \ntarget type:\(targetType)")
-        self.redirectToResultView("target")
-    }
-    
-    func didSelectSellerCellWithTarget(target: String, targetType: String) {
-        println("target: \(target) \ntarget type:\(targetType)")
-        self.redirectToSellerWithID("asdasdas3w")
-    }
-    
-    func didSelectViewMoreWithtarget(target: String, targetType: String) {
-        println("target: \(target) \ntarget type:\(targetType)")
-        self.redirectToResultView("target")
-    }
-    
-    func redirectToResultView(target: String) {
-        let resultViewController: ResultViewController = ResultViewController(nibName: "ResultViewController", bundle: nil)
-        self.navigationController!.pushViewController(resultViewController, animated: true)
-    }
-    
-    func didSelectProductWithTarget(target: String, targetType: String) {
-        println("target: \(target) \ntarget type:\(targetType)")
-        self.redirectToProductpageWithProductID("1")
-    }
-    
-    func redirectToProductpageWithProductID(productID: String) {
-        let productViewController: ProductViewController = ProductViewController(nibName: "ProductViewController", bundle: nil)
-        productViewController.tabController = self.tabBarController as! CustomTabBarController
-        self.navigationController?.pushViewController(productViewController, animated: true)
-    }
-    
-    func redirectToSellerWithID(sellerID: String) {
-        let sellerViewController: SellerViewController = SellerViewController(nibName: "SellerViewController", bundle: nil)
-        self.navigationController!.pushViewController(sellerViewController, animated: true)
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginAndRegisterContentViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginAndRegisterContentViewController.swift
deleted file mode 100644
index bf9746c..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginAndRegisterContentViewController.swift
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-//  LoginAndLogoutContentViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/8/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-
-class LoginAndRegisterContentViewController: UIViewController {
-    
-    @IBOutlet weak var contentView: UIView!
-    @IBOutlet weak var signInButton: DynamicRoundedButton!
-    @IBOutlet weak var registerButton: DynamicRoundedButton!
-    @IBOutlet weak var closeButton: DynamicRoundedButton!
-    
-    var viewControllers = [UIViewController]()
-    var selectedChildViewController: UIViewController?
-    var contentViewFrame: CGRect?
-    
-    var loginViewController: LoginViewController?
-    var registerViewController: RegisterViewController?
-    
-    var isFromDrawer: Bool = false
-    
-    @IBOutlet weak var logoWidthConstraint: NSLayoutConstraint!
-    @IBOutlet weak var logoHeightConstraint: NSLayoutConstraint!
-    @IBOutlet weak var verticalSpaceConstraint: NSLayoutConstraint!
-    
-    var defaultViewControllerIndex: Int = 0
-    
-    override func viewWillAppear(animated: Bool) {
-        super.viewWillAppear(animated)
-        if self.registerViewController != nil {
-            self.setSelectedViewControllerWithIndex(self.defaultViewControllerIndex)
-            if self.defaultViewControllerIndex == 0 {
-                self.signIn(self.signInButton)
-            } else {
-                self.register(self.registerButton)
-            }
-        }
-    }
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        self.initViewControllers()
-        
-        self.setSelectedViewControllerWithIndex(self.defaultViewControllerIndex)
-        if IphoneType.isIphone4() {
-            if self.logoWidthConstraint != nil {
-                self.logoHeightConstraint.constant = 50
-                self.logoWidthConstraint.constant = 50
-            }
-        }
-        
-        if self.defaultViewControllerIndex == 0 {
-            self.signIn(self.signInButton)
-        } else {
-            self.register(self.registerButton)
-        }
-        
-        
-    }
-    
-    override func viewDidLayoutSubviews() {
-        super.viewDidLayoutSubviews()
-        self.contentViewFrame = CGRectMake(0, 0, self.contentView.frame.size.width, self.contentView.frame.size.height)
-    }
-    
-    func initViewControllers() {
-        self.loginViewController  = self.storyboard!.instantiateViewControllerWithIdentifier("LoginViewController") as? LoginViewController
-        self.registerViewController = self.storyboard?.instantiateViewControllerWithIdentifier("RegisterViewController") as? RegisterViewController
-        
-        loginViewController?.parentView = self.view
-        
-        self.viewControllers.append(self.loginViewController!)
-        self.viewControllers.append(self.registerViewController!)
-    }
-    
-    // This function is for executing child view logic code
-    func setSelectedViewControllerWithIndex(index: Int) {
-        if self.viewControllers.count != 0 {
-            let viewController: UIViewController = viewControllers[index]
-            setSelectedViewController(viewController)
-        }
-    }
-    
-    func setSelectedViewController(viewController: UIViewController) {
-        if !(selectedChildViewController == viewController) {
-            if self.isViewLoaded() {
-                selectedChildViewController?.willMoveToParentViewController(self)
-                selectedChildViewController?.view.removeFromSuperview()
-                selectedChildViewController?.removeFromParentViewController()
-            }
-        }
-        self.view.layoutIfNeeded()
-        self.addChildViewController(viewController)
-        viewController.view.frame = contentViewFrame!
-        contentView.addSubview(viewController.view)
-        viewController.didMoveToParentViewController(self)
-        selectedChildViewController = viewController
-    }
-    
-    @IBAction func signIn(sender: AnyObject) {
-        self.setSelectedViewControllerWithIndex(0)
-       
-        self.signInButton.backgroundColor = Constants.Colors.appTheme
-        self.signInButton.setTitleColor(UIColor.whiteColor(), forState: UIControlState.Normal)
-        
-        self.registerButton.backgroundColor = UIColor.whiteColor()
-        self.registerButton.setTitleColor(Constants.Colors.appTheme, forState: UIControlState.Normal)
-    }
-    
-    @IBAction func register(sender: AnyObject) {
-        self.setSelectedViewControllerWithIndex(1)
-        
-        self.signInButton.backgroundColor = UIColor.whiteColor()
-        self.signInButton.setTitleColor(Constants.Colors.appTheme, forState: UIControlState.Normal)
-        
-        self.registerButton.backgroundColor = Constants.Colors.appTheme
-        self.registerButton.setTitleColor(UIColor.whiteColor(), forState: UIControlState.Normal)
-    }
-
-    @IBAction func close(sender: AnyObject) {
-       self.dismissViewControllerAnimated(true, completion: nil)
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginViewController.swift
deleted file mode 100644
index bf17f1b..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/LoginViewController.swift
+++ /dev/null
@@ -1,317 +0,0 @@
-//
-//  LoginViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/8/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-
-class LoginViewController: UIViewController, FBSDKLoginButtonDelegate, GIDSignInUIDelegate, GIDSignInDelegate, UITextFieldDelegate {
-   
-    @IBOutlet weak var facebookButtonHeightConstraints: NSLayoutConstraint!
-    @IBOutlet weak var facebookButton: FBSDKLoginButton!
-    @IBOutlet weak var gmailLoginButton: GIDSignInButton!
-    @IBOutlet weak var gmailButtonHeightConstraints: NSLayoutConstraint!
-    
-    @IBOutlet weak var emailAddressTextField: UITextField!
-    @IBOutlet weak var passwordTextField: UITextField!
-    
-    var currentTextFieldTag: Int = 1
-    var parentView: UIView?
-    
-    override func viewDidAppear(animated: Bool) {
-        super.viewDidAppear(animated)
-    }
-    
-    override func viewWillDisappear(animated: Bool) {
-        super.viewWillDisappear(animated)
-        
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            self.done()
-        }
-    }
-    
-    override func viewDidLoad() {
-        self.facebookButton.layer.cornerRadius = 5
-        self.facebookButtonHeightConstraints.constant = 40
-        self.view.needsUpdateConstraints()
-        self.view.layoutIfNeeded()
-        
-        if (FBSDKAccessToken.currentAccessToken() != nil) {
-            self.returnUserData()
-        } else {
-            self.facebookButton.readPermissions = [Constants.Facebook.userPermissionPublicProfileKey, Constants.Facebook.userPermissionEmailKey, Constants.Facebook.userPermissionFriendsKey]
-            self.facebookButton.delegate = self
-        }
-        GIDSignIn.sharedInstance().uiDelegate = self
-        GIDSignIn.sharedInstance().delegate = self
-  
-        self.setUpTextFields()
-    }
-    
-    @IBAction func signIn(sender: AnyObject) {
-        self.login()
-    }
-    
-    func setUpTextFields() {
-        self.passwordTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-        self.emailAddressTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-        self.emailAddressTextField.delegate = self
-        self.passwordTextField.delegate = self
-    }
-    
-    func loginButton(loginButton: FBSDKLoginButton!, didCompleteWithResult result: FBSDKLoginManagerLoginResult!, error: NSError!) {
-        if ((error) != nil) {
-            // Process error
-        } else if result.isCancelled {
-            // Handle cancellations
-        } else {
-            // If you ask for multiple permissions at once, you
-            // should check if specific permissions missing
-            if result.grantedPermissions.contains(Constants.Facebook.userPermissionEmailKey) {
-                // Do work
-                self.returnUserData()
-            }
-        }
-    
-    }
-    
-    func loginButtonDidLogOut(loginButton: FBSDKLoginButton!) {
-        
-    }
-    
-    
-    func returnUserData() {
-        let graphRequest : FBSDKGraphRequest = FBSDKGraphRequest(graphPath: "me", parameters: nil)
-        graphRequest.startWithCompletionHandler({ (connection, result, error) -> Void in
-            if ((error) != nil) {
-                // Process error
-                println("Error: \(error)")
-            } else {
-                var uid: String = ""
-                
-                if let val: AnyObject = result.valueForKey(Constants.Facebook.userNameKey) {
-                    let userName : NSString = result.valueForKey(Constants.Facebook.userNameKey) as! NSString
-                    println("fetched user: \(userName)")
-                }
-                
-                if let val: AnyObject = result.valueForKey(Constants.Facebook.userIDKey) {
-                    uid = result.valueForKey(Constants.Facebook.userIDKey) as! String
-                    println("fetched userID: \(uid)")
-                }
-               
-                if let val: AnyObject = result.valueForKey(Constants.Facebook.userEmail) {
-                    let email : String = result.valueForKey(Constants.Facebook.userEmail) as! String
-                    println("fetched userID: \(email)")
-                } else {
-                    println("Email is not available!")
-                }
-                
-                self.getProfileImage(uid)
-                self.getFaceBookAccessToken()
-                self.showSuccessMessage()
-            }
-        })
-    }
-    
-    func getFaceBookAccessToken() {
-        var accessToken = FBSDKAccessToken.currentAccessToken().tokenString
-        SessionManager.setAccessToken(accessToken)
-    }
-    
-    @IBAction func facebookLogin(sender: AnyObject) {
-        let sessionManager: SessionManager = SessionManager.sharedInstance
-        sessionManager.loginType = LoginType.FacebookLogin
-    }
-    
-    
-    func signIn(signIn: GIDSignIn!, didDisconnectWithUser user:GIDGoogleUser!,
-        withError error: NSError!) {
-            // Perform any operations when the user disconnects from app here.
-            // ...
-    }
-    
-    func signIn(signIn: GIDSignIn!, didSignInForUser user: GIDGoogleUser!,
-        withError error: NSError!) {
-            if (error == nil) {
-                println(user.profile.name)
-                // Perform any operations on signed in user here.
-                let userId = user.userID                  // For client-side use only!
-                let idToken = user.authentication.idToken // Safe to send to the server
-                let name = user.profile.name
-                let email = user.profile.email
-                let image: NSURL = user.profile.imageURLWithDimension(300)
-                println(image)
-                SessionManager.setAccessToken(idToken)
-                SessionManager.setProfileImage("\(image)")
-                self.showSuccessMessage()
-            } else {
-                println("\(error.localizedDescription)")
-            }
-    }
-    
-    func done() {
-        self.view.endEditing(true)
-        self.adjustTextFieldYInsetWithInset(0)
-        self.showCloseButton()
-    }
-    
-    func previous() {
-        let previousTag: Int = self.currentTextFieldTag - 1
-        
-        if let textField: UITextField = self.view.viewWithTag(previousTag) as? UITextField {
-            textField.becomeFirstResponder()
-        } else {
-            self.done()
-        }
-    }
-    
-    
-    func next() {
-        let nextTag: Int = self.currentTextFieldTag + 1
-        
-        if let textField: UITextField = self.view.viewWithTag(nextTag) as? UITextField {
-            textField.becomeFirstResponder()
-        } else {
-            self.done()
-        }
-    }
-    
-    func textFieldShouldBeginEditing(textField: UITextField) -> Bool {
-        self.currentTextFieldTag = textField.tag
-        if IphoneType.isIphone6() {
-            let textFieldHeightWithInset: CGFloat = -25
-            self.adjustTextFieldYInsetWithInset(textFieldHeightWithInset)
-        } else if IphoneType.isIphone4() {
-            let textFieldHeightWithInset: CGFloat = -50
-            self.hideCloseButton()
-            if textField == self.passwordTextField {
-                self.adjustTextFieldYInsetWithInset(textFieldHeightWithInset)
-            } else {
-                self.adjustTextFieldYInsetWithInset(textFieldHeightWithInset)
-            }
-        }
-        return true
-    }
-    
-    func textFieldShouldEndEditing(textField: UITextField) -> Bool {
-        return true
-    }
-    
-    func textFieldShouldReturn(textField: UITextField) -> Bool {
-        if textField == self.emailAddressTextField {
-            self.next()
-        } else {
-            self.done()
-            self.login()
-        }
-        
-        return true
-    }
-    
-    func login() {
-        var errorMessage: String = ""
-        
-        if !self.emailAddressTextField.isNotEmpty() {
-            errorMessage = "Email is required."
-        } else if !self.emailAddressTextField.isValidEmail() {
-            errorMessage = "Email Address is not valid."
-        } else if !self.passwordTextField.isNotEmpty() {
-            errorMessage = "Password is required."
-        }
-        
-        if errorMessage != "" {
-            UIAlertController.displayErrorMessageWithTarget(self, errorMessage: errorMessage)
-        } else {
-            fireLogin()
-        }
-        
-        self.view.endEditing(true)
-        self.adjustTextFieldYInsetWithInset(0)
-    }
-    
-    func fireLogin() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-        let manager: APIManager = APIManager.sharedInstance
-        //seller@easyshop.ph
-        //password
-        let parameters: NSDictionary = ["email": self.emailAddressTextField.text,"password": self.passwordTextField.text, "client_id": "1_167rxzqvid8g8swggwokcoswococscocc8ck44wo0g88owgkcc", "client_secret": "317eq8nohry84ooc0o8woo8000c0k844c4cggws84g80scwwog", "grant_type": "http://yilinker-online.com/grant/buyer"]
-        
-        manager.POST(APIAtlas.loginUrl, parameters: parameters, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                SessionManager.parseTokensFromResponseObject(responseObject as! NSDictionary)
-                SVProgressHUD.dismiss()
-                self.showSuccessMessage()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
-                
-                if task.statusCode == 401 {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Mismatch username and password", title: "Login Failed")
-                } else {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Something went wrong", title: "Error")
-                }
-
-                SVProgressHUD.dismiss()
-        })
-    }
-    
-    func showSuccessMessage() {
-        let alertController = UIAlertController(title: "Success", message: "Successfully login.", preferredStyle: .Alert)
-    
-        let OKAction = UIAlertAction(title: "OK", style: .Default) { (action) in
-            alertController.dismissViewControllerAnimated(true, completion: nil)
-            
-            let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
-            appDelegate.changeRootToHomeView()
-        }
-        
-        alertController.addAction(OKAction)
-        
-        self.presentViewController(alertController, animated: true) {
-            
-        }
-    }
-    
-    func adjustTextFieldYInsetWithInset(inset: CGFloat) {
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            UIView.animateWithDuration(0.5, delay: 0.0, options: nil, animations: {
-                let parentViewController: LoginAndRegisterContentViewController = self.parentViewController as! LoginAndRegisterContentViewController
-                parentViewController.verticalSpaceConstraint.constant = inset
-                self.parentViewController!.view.layoutIfNeeded()
-                }, completion: {(value: Bool) in
-                    
-            })
-        }
-    }
-    
-    func hideCloseButton() {
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            UIView.animateWithDuration(0.3, delay: 0.0, options: nil, animations: {
-                let parentViewController: LoginAndRegisterContentViewController = self.parentViewController as! LoginAndRegisterContentViewController
-                parentViewController.closeButton.alpha = 0
-                }, completion: {(value: Bool) in
-                    
-            })
-        }
-       
-    }
-    
-    func showCloseButton() {
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            UIView.animateWithDuration(0.3, delay: 0.0, options: nil, animations: {
-                let parentViewController: LoginAndRegisterContentViewController = self.parentViewController as! LoginAndRegisterContentViewController
-                parentViewController.closeButton.alpha = 1
-                }, completion: {(value: Bool) in
-                    
-            })
-        }
-    }
-    
-    func getProfileImage(userID: String) {
-        SessionManager.setProfileImage("http://graph.facebook.com/\(userID)/picture?type=large")
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/MessagingViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/MessagingViewController.swift
deleted file mode 100644
index 04391d2..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/MessagingViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  MessagingViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class MessagingViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/OverViewViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/OverViewViewController.swift
deleted file mode 100644
index ea1ddf3..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/OverViewViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  OverViewViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/19/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class OverViewViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/PaymentViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/PaymentViewController.swift
deleted file mode 100644
index 1376c43..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/PaymentViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  PaymentViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/19/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class PaymentViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductAttributeViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductAttributeViewController.swift
deleted file mode 100644
index 1d695f7..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductAttributeViewController.swift
+++ /dev/null
@@ -1,510 +0,0 @@
-//
-//  ProductAttributeViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/5/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-protocol ProductAttributeViewControllerDelegate {
-    func dissmissAttributeViewController(controller: ProductAttributeViewController, type: String)
-    func doneActionPassDetailsToProductView(controller: ProductAttributeViewController, unitId: String, quantity: Int, selectedId: NSArray)
-    func gotoCheckoutFromAttributes(controller: ProductAttributeViewController)
-}
-
-class ProductAttributeViewController: UIViewController, UITableViewDelegate, ProductAttributeTableViewCellDelegate {
-
-    @IBOutlet weak var dimView: UIView!
-    @IBOutlet weak var productImageView: UIImageView!
-    @IBOutlet weak var nameLabel: UILabel!
-    @IBOutlet weak var priceLabel: UILabel!
-    @IBOutlet weak var availabilityStocksLabel: UILabel!
-    @IBOutlet weak var stocksLabel: UILabel!
-    @IBOutlet weak var decreaseButton: UIButton!
-    @IBOutlet weak var increaseButton: UIButton!
-    @IBOutlet weak var tableView: UITableView!
-    @IBOutlet weak var addToCartButton: UIButton!
-    @IBOutlet weak var buyItNowView: UIView!
-    @IBOutlet weak var checkoutButton: UIButton!
-    @IBOutlet weak var doneButton: UIButton!
-    @IBOutlet weak var buyItNowLabel: UILabel!
-    
-    var delegate: ProductAttributeViewControllerDelegate?
-    
-    var minimumStock = 1
-    var maximumStock = 1
-    var stocks: Int = 0
-    
-    var productDetailsModel: ProductDetailsModel!
-    var attributes: [ProductAttributeModel] = []
-    
-    var availableCombination: [String] = []
-    var selectedValue: [String] = []
-    var selectedId: [String] = []
-    
-    var selectedCombination: [String] = []
-    var combinationString: String = ""
-    
-    var screenWidth: CGFloat = 0.0
-    var seeMoreLabel = UILabel()
-    var setTitle: String = ""
-    
-    var tabController = CustomTabBarController()
-    
-    var accessToken = ""
-    var quantity: Int = 1
-    var unitId: String = ""
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        stocksLabel.layer.borderWidth = 1.2
-        stocksLabel.layer.borderColor = UIColor.grayColor().CGColor
-        stocksLabel.layer.cornerRadius = 5
-        
-        let nib = UINib(nibName: "ProductAttributeTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "AttributeTableCell")
-        
-        let tap = UITapGestureRecognizer()
-        tap.numberOfTapsRequired = 1
-        tap.addTarget(self, action: "dimViewAction:")
-        self.dimView.addGestureRecognizer(tap)
-        self.dimView.backgroundColor = .clearColor()
-        
-        setBorderOf(view: addToCartButton, width: 1, color: .grayColor(), radius: 3)
-        setBorderOf(view: buyItNowView, width: 1, color: .grayColor(), radius: 3)
-        setBorderOf(view: checkoutButton, width: 1, color: .grayColor(), radius: 3)
-        
-        buyItNowView.addGestureRecognizer(tapGesture("buyItNowAction:"))
-        
-        priceLabel.textColor = Constants.Colors.productPrice
-        
-    }
-
-    override func viewWillAppear(animated: Bool) {
-        super.viewWillAppear(animated)
-        
-//        if setTitle == "cart" {
-//            
-//            seeMoreLabel = UILabel(frame: CGRectMake(0, 0, buyItNowView.frame.size.width, buyItNowView.frame.size.height))
-//            seeMoreLabel.text = "PROCEED TO\nCHECKOUT"
-//        } else if setTitle == "buy" {
-//            self.checkoutButton.hidden = false
-//        } else {
-//            seeMoreLabel = UILabel(frame: CGRectMake((buyItNowView.frame.size.width / 2) - 60, 0, 90, buyItNowView.frame.size.height))
-//            seeMoreLabel.frame.origin.x = 0
-//            seeMoreLabel.frame.size.width = buyItNowView.frame.size.width
-//            seeMoreLabel.text = "BUY IT NOW"
-//            
-//            var seeMoreImageView = UIImageView(frame: CGRectMake(seeMoreLabel.frame.size.width, (seeMoreLabel.frame.size.height / 2) - 6, 13, 13))
-//            seeMoreImageView.image = UIImage(named: "buy")
-//            //            seeMoreLabel.addSubview(seeMoreImageView)
-//        }
-//        
-//        seeMoreLabel.numberOfLines = 2
-//        seeMoreLabel.textColor = .whiteColor()
-//        seeMoreLabel.textAlignment = .Center
-//        seeMoreLabel.font = UIFont.boldSystemFontOfSize(13.0)
-//        self.buyItNowView.addSubview(seeMoreLabel)
-        
-        if setTitle == "cart" {
-            buyItNowLabel.text = "PROCEED TO\n CHECKOUT"
-        } else if setTitle == "buy" {
-            checkoutButton.hidden = false
-        } else {
-            
-        }
-    }
-    
-    func convertCombinationToString() {
-        
-        for i in 0..<self.productDetailsModel.productUnits.count {
-            for j in 0..<self.productDetailsModel.productUnits[i].combination.count {
-                self.combinationString += self.productDetailsModel.productUnits[i].combination[j]
-                if j != self.productDetailsModel.productUnits[i].combination.count - 1{
-                    self.combinationString += "_"
-                }
-            }
-            self.combinationString += ","
-        }
-    }
-    
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return attributes.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: ProductAttributeTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("AttributeTableCell") as! ProductAttributeTableViewCell
-        
-        cell.delegate = self
-        cell.passProductDetailModel(self.productDetailsModel)
-        cell.tag = indexPath.row
-        println(selectedValue)
-        listAvailableCombinations()
-        cell.setAttribute(self.productDetailsModel.attributes[indexPath.row], availableCombination: self.availableCombination, selectedValue: self.selectedValue, selectedId: self.selectedId, width: self.view.frame.size.width)
-        
-        return cell
-    }
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        println(indexPath.row)
-    }
-    
-    // MARK: - Actions
-    
-    @IBAction func decreaseAction(sender: AnyObject) {
-        self.stocks -= 1
-        checkStock(self.stocks)
-    }
-    
-    @IBAction func increaseAction(sender: AnyObject) {
-        self.stocks += 1
-        checkStock(self.stocks)
-    }
-    
-    @IBAction func cancelAction(sender: AnyObject!) {
-        hideSelf("cancel")
-    }
-    
-    // MARK: - Methods
-    
-//    change 0 (zeros) to unitId
-//    enabling first combination only, make it dynamic
-    
-    func passModel(#productDetailsModel: ProductDetailsModel, selectedValue: NSArray, selectedId: NSArray, unitId: Int) {
-        let index: Int = unitId - 1
-        setDetail("http://shop.bench.com.ph/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/Y/W/YWH0089BU4.jpg", title: productDetailsModel.title, price: productDetailsModel.productUnits[index].price)
-        self.productDetailsModel = productDetailsModel
-        self.attributes = productDetailsModel.attributes as [ProductAttributeModel]
-        self.selectedId = selectedId as! [String]
-        self.selectedValue = selectedValue as! [String]
-        self.unitId = String(index)
-        self.selectedCombination = productDetailsModel.productUnits[index].combination
-        
-        self.maximumStock = productDetailsModel.productUnits[index].quantity
-        self.availabilityStocksLabel.text = "Available stocks : \(productDetailsModel.productUnits[index].quantity)"
-        
-        convertCombinationToString()
-        println(combinationString)
-        
-        if self.maximumStock != 0 {
-            stocks = 1
-            checkStock(stocks)
-        } else if self.maximumStock == 0 {
-            checkStock(0)
-        } else {
-            println("----ProductAttributeViewController")
-        }
-    }
-    
-    func selectedAttribute(controller: ProductAttributeTableViewCell, attributeIndex: Int, attributeValue: String!, attributeId: Int) {
-        self.selectedId[attributeIndex] = String(attributeId)
-        self.selectedValue[attributeIndex] = String(attributeValue)
-        self.selectedCombination[attributeIndex] = String(attributeId)
-
-        for i in 0..<self.productDetailsModel.productUnits.count {
-            if self.productDetailsModel.productUnits[i].combination == selectedId {
-                unitId = self.productDetailsModel.productUnits[i].productUnitId
-            }
-        }
-        
-        maximumStock = availableStock(selectedCombination)
-        self.availabilityStocksLabel.text = "Available stocks : " + String(maximumStock)
-
-        listAvailableCombinations()
-        println(self.availableCombination)
-        self.tableView.reloadData()
-        
-        if self.maximumStock != 0 {
-            stocks = 1
-            checkStock(stocks)
-        } else if self.maximumStock == 0 {
-            checkStock(0)
-        } else {
-            println("----ProductAttributeViewController")
-        }
-    }
-    
-    func listAvailableCombinations() {
-        self.availableCombination = []
-        let not = "[^,]*"
-        var regex: String = ""
-        
-        regex += "("
-
-        for i in 0..<self.selectedCombination.count {
-            if self.selectedCombination[i].toInt() != -1 {
-                regex += self.selectedCombination[i]
-                if i != self.selectedCombination.count - 1 {
-                    regex += "_"
-                }
-            }
-            
-            if i != self.selectedCombination.count - 1 {
-                regex += not
-            }
-        }
-        
-        regex += ")"
-        println(regex)
-        
-        let re = NSRegularExpression(pattern: regex, options: nil, error: nil)!
-        let matches = re.matchesInString(combinationString, options: nil, range: NSRange(location: 0, length: count(combinationString.utf16)))
-        
-        println("number of matches: \(matches.count)")
-        
-        for match in matches as! [NSTextCheckingResult] {
-            let substring = (combinationString as NSString).substringWithRange(match.rangeAtIndex(1))
-            if substring != "" {
-                self.availableCombination.append(substring)
-                // compare
-                // get the id
-            }
-        }
-        
-    }
-    
-    func availableStock(combination: NSArray) -> Int {
-        
-        for i in 0..<self.productDetailsModel.productUnits.count {
-            if selectedCombination == self.productDetailsModel.productUnits[i].combination {
-                println("PRODUCT UNIT ID : \(self.productDetailsModel.productUnits[i].productUnitId)")
-                return self.productDetailsModel.productUnits[i].quantity
-            }
-        }
-        return 0
-    }
-    
-    func checkStock(stocks: Int) {
-        
-        if stocks < 10 {
-            stocksLabel.text = "0\(String(stringInterpolationSegment: stocks))"
-        } else {
-            stocksLabel.text = String(stringInterpolationSegment: stocks)
-        }
-        
-        if stocks == 0 {
-            disableButton(increaseButton)
-            disableButton(decreaseButton)
-            stocksLabel.alpha = 0.3
-        } else if stocks == maximumStock {
-            stocksLabel.alpha = 1.0
-            disableButton(increaseButton)
-        } else if stocks == minimumStock {
-            stocksLabel.alpha = 1.0
-            disableButton(decreaseButton)
-            enableButton(increaseButton)
-        } else if stocks > 0 && stocks < maximumStock {
-            stocksLabel.alpha = 1.0
-            enableButton(increaseButton)
-            enableButton(decreaseButton)
-
-        }
-        
-    }
-    
-    func setDetail(image: String, title: String, price: String) {
-        
-        productImageView.sd_setImageWithURL(NSURL(string: image), placeholderImage: UIImage(named: "dummy-placeholder"))
-        nameLabel.text = title
-        priceLabel.text = price
-    }
-    
-    func disableButton(button: UIButton) {
-        button.userInteractionEnabled = false
-        button.alpha = 0.3
-    }
-    
-    func enableButton(button: UIButton) {
-        button.userInteractionEnabled = true
-        button.alpha = 1
-    }
-    
-    func pressedDimViewFromProductPage(controller: ProductViewController) {
-        self.dismissViewControllerAnimated(true, completion: nil)
-    }
-    
-    func dimViewAction(gesture: UIGestureRecognizer) {
-        cancelAction(nil)
-    }
-    
-    @IBAction func doneAction(sender: AnyObject) {
-        var selectionComplete: Bool = true
-        
-        for i in 0..<self.selectedId.count {
-            if selectedId[i] == "-1" {
-                selectionComplete = false
-            }
-        }
-        
-        if selectionComplete {
-            hideSelf("done")
-            if let delegate = self.delegate {
-                delegate.doneActionPassDetailsToProductView(self, unitId: unitId, quantity: quantity, selectedId: selectedId)
-            }
-        } else {
-            hideSelf("cancel")
-        }
-        
-    }
-    
-    @IBAction func checkoutAction(sender: AnyObject) {
-        hideSelf("buy")
-        if let delegate = self.delegate {
-            delegate.gotoCheckoutFromAttributes(self)
-        }
-    }
-    
-    @IBAction func addToCartAction(sender: AnyObject) {
-        
-        let url: String = "http://online.api.easydeal.ph/api/v1/auth/cart/updateCartItem"
-        let quantity: String = String(stringInterpolationSegment: stocksLabel.text?.toInt())
-        
-        let params: NSDictionary = ["access_token": SessionManager.accessToken(),
-                                       "productId": self.productDetailsModel.id,
-                                          "unitId": String(unitId.toInt()! + 1),
-                                        "quantity": quantity]
-        
-        println(params)
-        
-        requestAddCartItem(url, params: params)
-    }
-    
-    func requestAddCartItem(url: String, params: NSDictionary!) {
-        SVProgressHUD.show()
-        let manager = APIManager.sharedInstance
-        manager.POST(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            
-            SVProgressHUD.dismiss()
-            
-            if responseObject.isKindOfClass(NSDictionary) {
-                
-                if let tempVar = responseObject["isSuccessful"] as? Bool {
-                    if tempVar {
-                        self.hideSelf("cart")
-                        self.addBadge()
-                    } else {
-                        if let tempVar = responseObject["message"] as? String {
-                            let alertController = UIAlertController(title: "Error", message: tempVar, preferredStyle: .Alert)
-                            let defaultAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
-                            alertController.addAction(defaultAction)
-                            self.presentViewController(alertController, animated: true, completion: nil)
-                        }
-                    }
-                }
-            }
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                
-                
-                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
-                
-                if task.statusCode == 401 {
-                    self.requestRefreshToken()
-                } else {
-                    SVProgressHUD.dismiss()
-                }
-                
-                let alertController = UIAlertController(title: "Something Went Wrong", message: nil, preferredStyle: .Alert)
-                let defaultAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
-                alertController.addAction(defaultAction)
-                self.presentViewController(alertController, animated: true, completion: nil)
-        })
-    }
-    
-    func requestRefreshToken() {
-        let url: String = "http://online.api.easydeal.ph/api/v1/login"
-        let params: NSDictionary = ["client_id": Constants.Credentials.client_id,
-            "client_secret": Constants.Credentials.cliend_secret,
-            "grant_type": Constants.Credentials.grantRefresh,
-            "refresh_token": SessionManager.refreshToken()]
-        
-        let manager = APIManager.sharedInstance
-        manager.POST(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            
-            SVProgressHUD.dismiss()
-            
-            if responseObject.isKindOfClass(NSDictionary) {
-                
-                if let tempVar = responseObject["isSuccessful"] as? Bool {
-                    if tempVar {
-                        SessionManager.parseTokensFromResponseObject(responseObject as! NSDictionary)
-                        
-                        let url: String = "http://online.api.easydeal.ph/api/v1/auth/cart/updateCartItem"
-                        let quantity: String = String(stringInterpolationSegment: self.stocksLabel.text?.toInt())
-                        
-                        let params: NSDictionary = ["access_token": SessionManager.accessToken(),
-                            "productId": self.productDetailsModel.id,
-                            "unitId": String(self.unitId.toInt()! + 1),
-                            "quantity": quantity]
-                        self.requestAddCartItem(url, params: params)
-                    } else {
-                        SVProgressHUD.dismiss()
-                        if let tempVar = responseObject["message"] as? String {
-                            let alertController = UIAlertController(title: "Error", message: tempVar, preferredStyle: .Alert)
-                            let defaultAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
-                            alertController.addAction(defaultAction)
-                            self.presentViewController(alertController, animated: true, completion: nil)
-                        }
-                    }
-                }
-            }
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                SVProgressHUD.dismiss()
-                SVProgressHUD.dismiss()
-                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
-                
-                let alertController = UIAlertController(title: "Something Went Wrong", message: nil, preferredStyle: .Alert)
-                let defaultAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
-                alertController.addAction(defaultAction)
-                self.presentViewController(alertController, animated: true, completion: nil)
-                
-        })
-    }
-    
-    func hideSelf(action: String) {
-        self.dismissViewControllerAnimated(true, completion: nil)
-        if let delegate = self.delegate {
-            delegate.dissmissAttributeViewController(self, type: action)
-        }
-    }
-    
-    func addBadge() {
-        if let badgeValue = (self.tabController.tabBar.items![4] as! UITabBarItem).badgeValue?.toInt() {
-            (self.tabController.tabBar.items![4] as! UITabBarItem).badgeValue = String(badgeValue + 1)
-        } else {
-            (self.tabController.tabBar.items![4] as! UITabBarItem).badgeValue = "1"
-        }
-    }
-    
-    func tapGesture(action: Selector) -> UITapGestureRecognizer {
-        var tap = UITapGestureRecognizer()
-        tap.numberOfTapsRequired = 1
-        tap.addTarget(self, action: action)
-        
-        return tap
-    }
-    
-    func buyItNowAction(gesture: UIGestureRecognizer) {
-        hideSelf("buy")
-        if let delegate = self.delegate {
-            delegate.gotoCheckoutFromAttributes(self)
-        }
-    }
-    
-    func setBorderOf(#view: AnyObject, width: CGFloat, color: UIColor, radius: CGFloat) {
-        view.layer.borderWidth = width
-        view.layer.borderColor = color.CGColor
-        view.layer.cornerRadius = radius
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductDescriptionViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductDescriptionViewController.swift
deleted file mode 100644
index 8a88668..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductDescriptionViewController.swift
+++ /dev/null
@@ -1,27 +0,0 @@
-//
-//  ProductDescriptionViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/9/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class ProductDescriptionViewController: UIViewController {
-
-    @IBOutlet weak var webView: UIWebView!
-    
-    var url: String = ""
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-        webView.loadHTMLString(url, baseURL: nil)
-    }
-
-    @IBAction func closeAction(sender: AnyObject) {
-        self.dismissViewControllerAnimated(true, completion: nil)
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductReviewViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductReviewViewController.swift
deleted file mode 100644
index 5cd43f2..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductReviewViewController.swift
+++ /dev/null
@@ -1,148 +0,0 @@
-//
-//  ProductReviewViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/5/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-protocol ProductReviewViewControllerDelegate {
-    func pressedCancelReview(controller: ProductReviewViewController)
-}
-
-class ProductReviewViewController: UIViewController {
-
-    @IBOutlet weak var rateLabel: UILabel!
-    @IBOutlet weak var numberOfPeopleLabel: UILabel!
-    @IBOutlet weak var tableView: UITableView!
-    @IBOutlet weak var dimView: UIView!
-    @IBOutlet weak var cancelContainer: UIView!
-    
-    @IBOutlet weak var rate1: UIImageView!
-    @IBOutlet weak var rate2: UIImageView!
-    @IBOutlet weak var rate3: UIImageView!
-    @IBOutlet weak var rate4: UIImageView!
-    @IBOutlet weak var rate5: UIImageView!
-    
-    var model: ProductReviewModel!
-    
-    var delegate: ProductReviewViewControllerDelegate?
-    
-    let bodyText = ["Proin gravida nibh vel velit auctor aliquet. Aenean solicitudin, lorem quis bibendum auctir, nisi elit consequat ipsum.",
-        "Proin gravida nibh vel velit auctor aliquet. Aenean solicitudin, lorem quis bibendum auctir, nisi elit consequat ipsum, nec sagittis sem nibh id elit. Duis sed odio sit amet nibh vulputate."]
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        let nib = UINib(nibName: "ReviewTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "reviewIdentifier")
-        self.tableView.rowHeight = UITableViewAutomaticDimension
-        self.tableView.estimatedRowHeight = 100.0
-        
-        numberOfPeopleLabel.layer.shadowColor = UIColor.redColor().CGColor
-        numberOfPeopleLabel.layer.shadowOffset = CGSizeMake(-1, 1)
-        numberOfPeopleLabel.layer.shadowOpacity = 0.2
-        numberOfPeopleLabel.layer.shadowRadius = 2
-        
-        rateLabel.layer.cornerRadius = rateLabel.frame.size.width / 2
-        rateLabel.clipsToBounds = true
-        
-        let tap = UITapGestureRecognizer()
-        tap.numberOfTapsRequired = 1
-        tap.addTarget(self, action: "dimViewAction:")
-        self.dimView.addGestureRecognizer(tap)
-        self.dimView.backgroundColor = .clearColor()
-        
-        rateLabel.backgroundColor = Constants.Colors.productReviewGreen
-        
-    }
-
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return model.reviews.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: ReviewTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("reviewIdentifier") as! ReviewTableViewCell
-        
-        cell.selectionStyle = UITableViewCellSelectionStyle.None
-        
-        cell.nameLabel.text = model.reviews[indexPath.row].fullName
-        cell.setDisplayPicture(model.reviews[indexPath.row].profileImageUrl)
-        cell.setRating(model.reviews[indexPath.row].rating)
-        cell.messageLabel.text = model.reviews[indexPath.row].review
-        
-//        cell.setName(model.reviews[indexPath.row].name)
-//        cell.setDisplayPicture(model.reviews[indexPath.row].imageUrl)
-//        cell.setMessage(model.reviews[indexPath.row].message)
-//        cell.setRating(model.reviews[indexPath.row].rating)
-        
-        return cell
-    }
-    
-    @IBAction func cancelAction(sender: AnyObject!) {
-        self.dismissViewControllerAnimated(true, completion: nil)
-        if let delegate = self.delegate {
-            delegate.pressedCancelReview(self)
-        }
-    }
-    
-    func passModel(model: ProductReviewModel) {
-        self.model = model
-        
-        setRating(model.ratingAverage)
-        
-        var font = [NSFontAttributeName : UIFont.boldSystemFontOfSize(35.0)]
-        var rater = NSMutableAttributedString(string: String(model.ratingAverage), attributes: font)
-        var textToAppend = NSMutableAttributedString(string: rateLabel.text!)
-        rater.appendAttributedString(textToAppend)
-        
-        rateLabel.text = String(format: "%.f/5", model.ratingAverage)
-        rateLabel.attributedText = rater
-        
-        font = [NSFontAttributeName : UIFont.boldSystemFontOfSize(14.0)]
-        rater = NSMutableAttributedString(string: "\(model.reviews.count)", attributes: font)
-        textToAppend = NSMutableAttributedString(string: " people rate this product")
-        rater.appendAttributedString(textToAppend)
-        
-        numberOfPeopleLabel.attributedText = rater
-    }
-    
-    func dimViewAction(gesture: UIGestureRecognizer) {
-        cancelAction(nil)
-    }
-    
-    func setRating(rate: Int) {
-        
-        if rate > 4 {
-            rateImage(rate5)
-        }
-        
-        if rate > 3 {
-            rateImage(rate4)
-        }
-        
-        if rate > 2 {
-            rateImage(rate3)
-        }
-        
-        if rate > 1  {
-            rateImage(rate2)
-        }
-        
-        if rate > 0 {
-            rateImage(rate1)
-        }
-        
-    }
-    
-    func rateImage(ctr: UIImageView) {
-        ctr.image = UIImage(named: "rating2")
-    }
-    
-    
-    
-}
\ No newline at end of file
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewController.swift
deleted file mode 100644
index b8e3f9b..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewController.swift
+++ /dev/null
@@ -1,822 +0,0 @@
-//
-//  ProductViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/3/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-protocol ProductViewControllerDelegate {
-    func pressedDimViewFromProductPage(controller: ProductViewController)
-}
-
-class ProductViewController: UIViewController, ProductImagesViewDelegate, ProductDescriptionViewDelegate, ProductReviewFooterViewDelegate, ProductSellerViewDelegate, ProductReviewViewControllerDelegate, ProductAttributeViewControllerDelegate, EmptyViewDelegate {
-
-    @IBOutlet weak var tableView: UITableView!
-    @IBOutlet weak var dimView: UIView!
-    @IBOutlet weak var addToCartButton: UIButton!
-    @IBOutlet weak var buyItNowView: UIView!
-    @IBOutlet weak var buttonsContainer: UIView!
-    @IBOutlet weak var buttonSubContainer: UIView!
-    
-    var headerView: UIView!
-    var footerView: UIView!
-    
-    var productImagesView: ProductImagesView!
-    var productDetailsView: UIView!
-    var productAttributeView: UIView!
-    var productDescriptionView: ProductDescriptionView!
-    var productReviewHeaderView: ProductReviewHeaderView!
-    var productReviewFooterView: ProductReviewFooterView!
-    var productSellerView: ProductSellerView!
-    
-    let manager = APIManager.sharedInstance
-    
-    var productDetailsModel: ProductDetailsModel!
-    var attributes: [ProductAttributeModel] = []
-    var combinations: [ProductAvailableAttributeCombinationModel] = []
-    var productReviewModel: ProductReviewModel!
-    var productSellerModel: ProductSellerModel!
-    
-    var selectedName: [String] = []
-    var selectedValue: [String] = []
-    var selectedId: [String] = []
-
-    var unitId: String = "1"
-    
-    var newFrame: CGRect!
-    var visibility = 0.0
-    var lastContentOffset: CGFloat = 0.0
-    
-    var productRequest = false
-    var reviewRequest = false
-    var sellerRequest = false
-    
-    var productSuccess = false
-    var reviewSuccess = false
-    var sellerSuccess = false
-    
-    var delegate: ProductViewControllerDelegate?
-    
-    var emptyView: EmptyView?
-    
-    let productUrl = "https://demo1928934.mockable.io/yi/getproductDetails?productId=1000"
-    let reviewUrl = "https://demo5885209.mockable.io/api/v1/product/getReviews?productId=1000"
-    
-    var tabController = CustomTabBarController()
-    
-    // MARK: - View Life Cycle
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        let nib = UINib(nibName: "ReviewTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "reviewIdentifier")
-        self.tableView.rowHeight = UITableViewAutomaticDimension
-        self.tableView.estimatedRowHeight = 100.0
-        
-        setBorderOf(view: addToCartButton, width: 1, color: .grayColor(), radius: 3)
-        setBorderOf(view: buyItNowView, width: 1, color: .grayColor(), radius: 3)
-        
-        requestProductDetails(productUrl, params: nil)
-//        requestReviewDetails(reviewUrl, params: nil)
-        requestReviewDetails("http://online.api.easydeal.ph/api/v1/product/getProductReviews", params: ["productId": "1"])
-        
-        buyItNowView.addGestureRecognizer(tapGesture("buyItNowAction:"))
-    }
-    
-    override func viewWillAppear(animated: Bool) {
-        configureNavigationBar()
-        
-        var seeMoreLabel = UILabel(frame: CGRectMake((buyItNowView.frame.size.width / 2) - 60, 0, 90, buyItNowView.frame.size.height))
-        seeMoreLabel.frame.origin.x = 0
-        seeMoreLabel.frame.size.width = addToCartButton.frame.size.width
-        seeMoreLabel.text = "BUY IT NOW"
-        seeMoreLabel.textAlignment = .Center
-        seeMoreLabel.textColor = .whiteColor()
-        seeMoreLabel.backgroundColor = .redColor()
-        seeMoreLabel.font = UIFont.boldSystemFontOfSize(13.0)
-        
-        var seeMoreImageView = UIImageView(frame: CGRectMake(seeMoreLabel.frame.size.width, (seeMoreLabel.frame.size.height / 2) - 6, 13, 13))
-        seeMoreImageView.image = UIImage(named: "buy")
-//        seeMoreLabel.addSubview(seeMoreImageView)
-//        self.buyItNowView.addSubview(seeMoreLabel)
-    }
-    
-    override func viewWillDisappear(animated: Bool) {
-        self.navigationController?.navigationBar.alpha = 1.0
-        self.navigationController?.navigationBar.barTintColor = Constants.Colors.appTheme
-        UIApplication.sharedApplication().statusBarStyle = UIStatusBarStyle.LightContent        
-        SVProgressHUD.dismiss()
-        
-        super.viewWillDisappear(animated)
-    }
-    
-    func requestProductDetails(url: String, params: NSDictionary!) {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.clearColor())
-        
-        manager.GET("http://online.api.easydeal.ph/api/v1/product/getProductDetail?productId=1", parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            
-            self.productDetailsModel = ProductDetailsModel.parseDataWithDictionary(responseObject)
-            self.attributes = self.productDetailsModel.attributes
-//            self.combinations = self.productDetailsModel.combinations
-            self.populateDetails()
-            
-            let seller = "https://demo5885209.mockable.io/api/v1/seller/getDetails?sellerId=111"
-            self.requestSellerDetails(seller, params: nil)
-            
-            self.productRequest = true
-            self.productSuccess = true
-            self.checkRequests()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("product failed")
-                self.productRequest = true
-                self.productSuccess = false
-                self.checkRequests()
-        })
-    }
-    
-    func requestReviewDetails(url: String, params: NSDictionary!) {
-        manager.POST(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            
-            self.productReviewModel = ProductReviewModel.parseDataWithDictionary(responseObject)
-            self.reviewRequest = true
-            self.reviewSuccess = true
-            self.checkRequests()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("review failed")
-                self.reviewRequest = true
-                self.reviewSuccess = false
-                self.checkRequests()
-        })
-    }
-    
-    func requestSellerDetails(url: String, params: NSDictionary!) {
-        
-        manager.GET("https://demo3526363.mockable.io/productSeller", parameters: nil, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            
-            self.productSellerModel = ProductSellerModel.parseDataWithDictionary(responseObject)
-            self.sellerRequest = true
-            self.sellerSuccess = true
-            self.checkRequests()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("seller failed")
-                self.sellerRequest = true
-                self.sellerSuccess = false
-                self.checkRequests()
-        })
-    }
-    
-    func configureNavigationBar() {
-        self.navigationController?.navigationBar.alpha = 0
-        UIApplication.sharedApplication().statusBarStyle = UIStatusBarStyle.Default
-        self.navigationController?.navigationBar.barTintColor = .whiteColor()
-        self.navigationController?.navigationBar.tintColor = .grayColor()
-        
-//        let close = UIBarButtonItem(image: img.image, style: .Plain, target: self, action: "barCloseAction")
-        let close = UIBarButtonItem(barButtonSystemItem: .Stop, target: self, action: "barCloseAction")
-        let wishlist = UIBarButtonItem(image: UIImage(named: "wishlist"), style: .Plain, target: self, action: "barWishlistAction")
-        let rate = UIBarButtonItem(image: UIImage(named: "rating"), style: .Plain, target: self, action: "barRateAction")
-        let message = UIBarButtonItem(image: UIImage(named: "msg"), style: .Plain, target: self, action: "barMessageAction")
-        let share = UIBarButtonItem(image: UIImage(named: "share"), style: .Plain, target: self, action: "barShareAction")
-        let negativeSpacer = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FixedSpace, target: nil, action: nil)
-        negativeSpacer.width = -10
-        
-        self.navigationItem.setLeftBarButtonItem(close, animated: false)
-        self.navigationItem.setRightBarButtonItems([share, negativeSpacer, message, negativeSpacer, rate, negativeSpacer, wishlist], animated: true)
-    }
-    
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        if productReviewModel != nil && productReviewModel.reviews.count > 1 {
-            return 2
-        } else if productReviewModel != nil && productReviewModel.reviews.count < 2 {
-            return productReviewModel.reviews.count
-        }
-        
-        return 0
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: ReviewTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("reviewIdentifier") as! ReviewTableViewCell
-        
-        cell.selectionStyle = UITableViewCellSelectionStyle.None
-
-        cell.nameLabel.text = productReviewModel.reviews[indexPath.row].fullName
-        cell.setDisplayPicture(productReviewModel.reviews[indexPath.row].profileImageUrl)
-        cell.setRating(productReviewModel.reviews[indexPath.row].rating)
-        cell.messageLabel.text = productReviewModel.reviews[indexPath.row].review
-        
-        return cell
-    }
-    
-    // MARK: - Init Views
-    
-    func getHeaderView() -> UIView {
-        if self.headerView == nil {
-            self.headerView = UIView(frame: CGRectZero)
-            self.headerView.autoresizesSubviews = false
-        }
-        return self.headerView
-    }
-    
-    func getFooterView() -> UIView {
-        if self.footerView == nil {
-            self.footerView = UIView(frame: CGRectZero)
-            self.footerView.autoresizesSubviews = false
-        }
-        return self.footerView
-    }
-    
-    func getProductImagesView() -> ProductImagesView {
-        if self.productImagesView == nil {
-            self.productImagesView = XibHelper.puffViewWithNibName("ProductViewsViewController", index: 0) as! ProductImagesView
-            self.productImagesView.frame.size.width = self.view.frame.size.width
-            self.productImagesView.frame.size.height = self.view.frame.size.height - 114
-        }
-        return self.productImagesView
-    }
-    
-    func getProductDetailsView(list: NSArray!) -> UIView {
-        if self.productDetailsView == nil {
-            self.productDetailsView = UIView(frame: CGRectMake(0, 0, self.view.frame.size.width, 25))
-            self.productDetailsView.backgroundColor = UIColor.whiteColor()
-        }
-        return self.productDetailsView
-    }
-    
-    func getProductAttributeView() -> UIView {
-        if self.productAttributeView == nil {
-            self.productAttributeView = UIView(frame: CGRectMake(0, 41, self.view.frame.size.width, 50))
-            self.productAttributeView.backgroundColor = .whiteColor()
-            
-            var titleLabel = UILabel(frame: CGRectMake(8, 0, self.productAttributeView.frame.size.width - 16, 40))
-            titleLabel.text = "Details"
-            titleLabel.font = UIFont.systemFontOfSize(16.0)
-            titleLabel.textColor = UIColor.darkGrayColor()
-            titleLabel.userInteractionEnabled = true
-            
-            var tap = UITapGestureRecognizer()
-            tap.numberOfTapsRequired = 1
-            tap.addTarget(self, action: "gotoAttributes:")
-            titleLabel.addGestureRecognizer(tap)
-            
-            var arrowImageView = UIImageView(frame: CGRectMake(self.productAttributeView.frame.size.width - 20, 11.5, 9, 17))
-            arrowImageView.image = UIImage(named: "right-gray")
-            
-            var separatorView = UIView(frame: CGRectMake(0, 41, self.view.frame.size.width, 1))
-            separatorView.backgroundColor = .lightGrayColor()
-            
-            self.productAttributeView.addSubview(titleLabel)
-            self.productAttributeView.addSubview(arrowImageView)
-            self.productAttributeView.addSubview(separatorView)
-        }
-        return self.productAttributeView
-    }
-    
-    func getProductDescriptionView() -> ProductDescriptionView {
-        if self.productDescriptionView == nil {
-            self.productDescriptionView = XibHelper.puffViewWithNibName("ProductViewsViewController", index: 1) as! ProductDescriptionView
-            self.productDescriptionView.frame.size.width = self.view.frame.size.width
-            
-            var seeMoreLabel = UILabel(frame: CGRectMake(0, 0, 90, 41))
-            seeMoreLabel.text = "SEE MORE"
-            seeMoreLabel.textColor = .blueColor()
-            seeMoreLabel.font = UIFont.systemFontOfSize(15.0)
-            seeMoreLabel.textAlignment = .Center
-            
-            var seeMoreImageView = UIImageView(frame: CGRectMake(seeMoreLabel.frame.size.width, (seeMoreLabel.frame.size.height / 2) - 6, 8, 12))
-            seeMoreImageView.image = UIImage(named: "seeMore")
-            seeMoreLabel.addSubview(seeMoreImageView)
-            
-            seeMoreLabel.center.x = self.view.center.x - 5
-            self.productDescriptionView.seeMoreView.addSubview(seeMoreLabel)
-        }
-        return self.productDescriptionView
-    }
-    
-    func getProductReviewHeaderView() -> ProductReviewHeaderView {
-        if self.productReviewHeaderView == nil {
-            self.productReviewHeaderView = XibHelper.puffViewWithNibName("ProductViewsViewController", index: 2) as! ProductReviewHeaderView
-            self.productReviewHeaderView.frame.size.width = self.view.frame.size.width
-        }
-        return self.productReviewHeaderView
-    }
-    
-    func getProductReviewFooterView() -> ProductReviewFooterView {
-        if self.productReviewFooterView == nil {
-            self.productReviewFooterView = XibHelper.puffViewWithNibName("ProductViewsViewController", index: 3) as! ProductReviewFooterView
-            self.productReviewFooterView.frame.size.width = self.view.frame.size.width
-            
-            var seeMoreLabel = UILabel(frame: self.productReviewFooterView.frame)
-            seeMoreLabel.frame.size.width = 90
-            seeMoreLabel.text = "SEE MORE"
-            seeMoreLabel.textColor = .blueColor()
-            seeMoreLabel.font = UIFont.systemFontOfSize(15.0)
-            seeMoreLabel.textAlignment = .Center
-            
-            var seeMoreImageView = UIImageView(frame: CGRectMake(seeMoreLabel.frame.size.width, (seeMoreLabel.frame.size.height / 2) - 6, 8, 12))
-            seeMoreImageView.image = UIImage(named: "seeMore")
-            seeMoreLabel.addSubview(seeMoreImageView)
-            
-            seeMoreLabel.center.x = self.view.center.x - 5
-            self.productReviewFooterView.addSubview(seeMoreLabel)
-        }
-        return self.productReviewFooterView
-    }
-    
-    func getProductSellerView() -> ProductSellerView {
-        if self.productSellerView == nil {
-            self.productSellerView = XibHelper.puffViewWithNibName("ProductViewsViewController", index: 4) as! ProductSellerView
-            self.productSellerView.frame.size.width = self.view.frame.size.width
-        }
-        return self.productSellerView
-    }
-    
-    // MARK: - Functions
-    
-    func setUpViews() {
-        self.setPosition(self.productDetailsView, from: self.productImagesView)
-        self.setPosition(self.productAttributeView, from: self.productDetailsView)
-        self.setPosition(self.productDescriptionView, from: self.productAttributeView)
-        self.setPosition(self.productReviewHeaderView, from: self.productDescriptionView)
-        self.setPosition(self.productSellerView, from: self.productReviewFooterView)
-        
-        newFrame = self.headerView.frame
-        newFrame.size.height = CGRectGetMaxY(self.productReviewHeaderView.frame)
-        self.headerView.frame = newFrame
-        
-        newFrame = self.footerView.frame
-        newFrame.size.height = CGRectGetMaxY(self.productSellerView.frame)
-        self.footerView.frame = newFrame
-        
-        self.tableView.tableFooterView = nil
-        self.tableView.tableFooterView = self.footerView
-        self.tableView.tableHeaderView = nil
-        self.tableView.tableHeaderView = self.headerView
-    }
-    
-    func setPosition(view: UIView!, from: UIView!) {
-        newFrame = view.frame
-        newFrame.origin.y = CGRectGetMaxY(from.frame) + 20
-        view.frame = newFrame
-    }
-    
-    func setBorderOf(#view: AnyObject, width: CGFloat, color: UIColor, radius: CGFloat) {
-        view.layer.borderWidth = width
-        view.layer.borderColor = color.CGColor
-        view.layer.cornerRadius = radius
-    }
-    
-    // MARK: - Product View Delegates
-    
-    func close(controller: ProductImagesView) {
-        self.navigationController?.popToRootViewControllerAnimated(true)
-    }
-    
-    func wishlist(controller: ProductImagesView) {
-        barWishlistAction()
-    }
-    
-    func rate(controller: ProductImagesView) {
-        showAlert("Rate")
-    }
-    
-    func message(controller: ProductImagesView) {
-        showAlert("Message")
-    }
-    
-    func seeMoreAttribute(title: String) {
-        var attributeModal = ProductAttributeViewController(nibName: "ProductAttributeViewController", bundle: nil)
-        attributeModal.delegate = self
-        attributeModal.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext
-        attributeModal.providesPresentationContextTransitionStyle = true
-        attributeModal.definesPresentationContext = true
-        attributeModal.view.backgroundColor = UIColor.clearColor()
-        attributeModal.view.frame.origin.y = attributeModal.view.frame.size.height
-        attributeModal.passModel(productDetailsModel: productDetailsModel, selectedValue: selectedValue, selectedId: selectedId, unitId: unitId.toInt()!)
-        attributeModal.setTitle = title
-        attributeModal.tabController = self.tabController
-        attributeModal.screenWidth = self.view.frame.width
-        self.tabBarController?.presentViewController(attributeModal, animated: true, completion: nil)
-        
-        UIView.animateWithDuration(0.3, animations: {
-            self.dimView.alpha = 0.5
-            self.dimView.layer.zPosition = 2
-            self.view.transform = CGAffineTransformMakeScale(0.92, 0.95)
-            self.navigationController?.navigationBar.alpha = 0.0
-        })
-    }
-    
-    func seeMoreDescription(controller: ProductDescriptionView) {
-        let description = ProductDescriptionViewController(nibName: "ProductDescriptionViewController", bundle: nil)
-        description.url = self.productDetailsModel.fullDescription
-        self.tabBarController?.presentViewController(description, animated: true, completion: nil)
-    }
-    
-    func seeMoreReview(controller: ProductReviewFooterView) {
-        var reviewModal = ProductReviewViewController(nibName: "ProductReviewViewController", bundle: nil)
-        reviewModal.delegate = self
-        reviewModal.modalPresentationStyle = UIModalPresentationStyle.OverCurrentContext
-        reviewModal.providesPresentationContextTransitionStyle = true
-        reviewModal.definesPresentationContext = true
-        reviewModal.view.backgroundColor = UIColor.clearColor()
-        reviewModal.view.frame.origin.y = reviewModal.view.frame.size.height
-        reviewModal.passModel(self.productReviewModel)
-        self.tabBarController?.presentViewController(reviewModal, animated: true, completion: nil)
-        
-        UIView.animateWithDuration(0.3, animations: {
-            self.dimView.alpha = 0.5
-            self.dimView.layer.zPosition = 2
-            self.view.transform = CGAffineTransformMakeScale(0.92, 0.93)
-            self.navigationController?.navigationBar.alpha = 0.0
-        })
-    }
-    
-    func seeMoreSeller(controller: ProductSellerView) {
-        let seller = SellerViewController(nibName: "SellerViewController", bundle: nil)
-        self.navigationController?.pushViewController(seller, animated: true)
-    }
-    
-    func share(controller: ProductImagesView) {
-        shareTextImageAndURL(sharingText: "Sample Text", sharingImage: UIImage(named: "s61"), sharingURL: NSURL(fileURLWithPath: "http://www.Easyshop.ph"))
-    }
-    
-    func shareTextImageAndURL(#sharingText: String?, sharingImage: UIImage?, sharingURL: NSURL?) {
-        var sharingItems = [AnyObject]()
-        
-        if let text = sharingText {
-            sharingItems.append(text)
-        }
-        if let image = sharingImage {
-            sharingItems.append(image)
-        }
-        if let url = sharingURL {
-            sharingItems.append(url)
-        }
-        
-        let activityViewController = UIActivityViewController(activityItems: sharingItems, applicationActivities: nil)
-        self.presentViewController(activityViewController, animated: true, completion: nil)
-    }
-    
-    func dissmissAttributeViewController(controller: ProductAttributeViewController, type: String) {
-        
-        UIView.animateWithDuration(0.3, animations: {
-            self.view.transform = CGAffineTransformMakeTranslation(1, 1)
-            self.dimView.alpha = 0
-            self.dimView.layer.zPosition = -1
-            self.navigationController?.navigationBar.alpha = CGFloat(self.visibility)
-            }, completion: { finished in
-                if type == "cart" {
-                    self.showAlert("This item has been added to your cart.")
-                } else if type == "done" {
-//                    self.showAlert(type)
-                }
-            })
-
-    }
-    
-    func doneActionPassDetailsToProductView(controller: ProductAttributeViewController, unitId: String, quantity: Int, selectedId: NSArray) {
-        self.unitId = unitId
-        self.selectedId = selectedId as! [String]
-        self.setAttributes(self.productDetailsModel.attributes, productUnits: self.productDetailsModel.productUnits, unitId: unitId, quantity: quantity)
-    }
-
-    func gotoCheckoutFromAttributes(controller: ProductAttributeViewController) {
-        let checkout = CheckoutContainerViewController(nibName: "CheckoutContainerViewController", bundle: nil)
-        self.navigationController?.pushViewController(checkout, animated: true)
-    }
-    
-    func pressedCancelReview(controller: ProductReviewViewController) {
-        UIView.animateWithDuration(0.3, animations: {
-            self.view.transform = CGAffineTransformMakeTranslation(1, 1)
-            self.dimView.alpha = 0
-            self.dimView.layer.zPosition = -1
-            self.navigationController?.navigationBar.alpha = CGFloat(self.visibility)
-        })
-    }
-    
-    func populateDetails() {
-//        self.productImagesView.setDetails(productDetailsModel.title, price: productDetailsModel.newPrice, images: images)
-//        self.setDetails(productDetailsModel.details)
-//        self.setAttributes(productDetailsModel.attributes, combinationModel: productDetailsModel.combinations)
-//        self.productDescriptionView.setDescription(productDetailsModel.shortDescription, full: productDetailsModel.fullDescription)
-    }
-    
-    func populateReviews() {
-//        println("POPULATING PRODUCT REVIEWS")
-//        self.productReviewHeaderView.setRating(self.productReviewModel.rating)
-//        self.tableView.reloadData()
-    }
-    
-    func populateSeller() {
-        println("POPULATING DETAILS")
-        
-    }
-    
-    func loadViewsWithDetails() {
-        
-        self.buttonsContainer.hidden = false
-        
-        self.getHeaderView().addSubview(self.getProductImagesView())
-        self.getHeaderView().addSubview(self.getProductDetailsView([]))
-        self.getHeaderView().addSubview(self.getProductAttributeView())
-        self.getHeaderView().addSubview(self.getProductDescriptionView())
-        self.getHeaderView().addSubview(self.getProductReviewHeaderView())
-        
-        self.getFooterView().addSubview(self.getProductReviewFooterView())
-        self.getFooterView().addSubview(self.getProductSellerView())
-        
-        self.productImagesView.setDetails(self.productDetailsModel, width: self.view.frame.size.width)
-//        self.setDetails(productDetailsModel.details)
-        self.setAttributes(self.productDetailsModel.attributes, productUnits: self.productDetailsModel.productUnits, unitId: "1", quantity: 0)
-        self.productDescriptionView.setDescription(productDetailsModel.shortDescription, full: productDetailsModel.fullDescription)
-        
-        self.productReviewHeaderView.setRating(self.productReviewModel.ratingAverage)
-        self.tableView.reloadData()
-        
-        self.productSellerView.setSellerDetails(self.productSellerModel)
-        
-        setUpViews()
-        
-        self.productImagesView.delegate = self
-        self.productDescriptionView.delegate = self
-        self.productReviewFooterView.delegate = self
-        self.productSellerView.delegate = self
-        
-        SVProgressHUD.dismiss()
-    }
-    
-    func setDetails(list: NSArray) {
-        var topMargin: CGFloat = 0
-        
-        for i in 0..<list.count {
-            
-            topMargin = CGFloat(i * 25) + 10
-            
-            var label = UILabel(frame: CGRectMake(43, topMargin, self.productDetailsView.frame.size.width - 50, 25))
-            label.text = list[i] as? String
-            label.textColor = Constants.Colors.productDetails
-            label.font = UIFont(name: label.font.fontName, size: 13)
-            
-            topMargin = CGFloat(i * 25) + 14
-            
-            var imageView = UIImageView(frame: CGRectMake(17, topMargin, 17, 17))
-            imageView.image = UIImage(named: "check")
-            
-            self.productDetailsView.addSubview(imageView)
-            self.productDetailsView.addSubview(label)
-        }
-        
-        newFrame = self.productDetailsView.frame
-        newFrame.size.height = CGFloat(self.productDetailsView.frame.size.height * CGFloat(list.count)) + 20
-        self.productDetailsView.frame = newFrame
-    }
-    
-    func setAttributes(attributes: [ProductAttributeModel], productUnits: [ProductUnitsModel], unitId: String, quantity: Int) {
-        
-        for view in self.productAttributeView.subviews {
-            if view is UILabel {
-                let label: UILabel = view as! UILabel
-                if label.text != "Details" {
-                    view.removeFromSuperview()
-                }
-            }
-        }
-        
-        selectedName = []
-        selectedValue = []
-        selectedId = []
-//        selectedName.append("Quantity")
-//        selectedValue.append(String(combinationModel[0].quantity) + "x")
-        
-        let index: Int = unitId.toInt()! - 1
-        println(index)
-        for i in 0..<attributes.count {
-            for j in 0..<attributes[i].valueId.count {
-                if productUnits[index].combination[i] == attributes[i].valueId[j] {
-                    selectedName.append(attributes[i].attributeName)
-                    selectedId.append(attributes[i].valueId[j])
-                    selectedValue.append(attributes[i].valueName[j])
-                }
-            }
-        }
-        
-        var tempSelectedName: [String] = ["Quantity"]
-        var tempSelectedValue: [String] = [String(quantity) + "x"]
-        var tempSelectedId: [String] = [""]
-        
-        for i in 0..<self.selectedName.count {
-            tempSelectedName.append(selectedName[i])
-            tempSelectedValue.append(selectedValue[i])
-        }
-        
-        if quantity == 0 {
-            createAttributesLabel(selectedName.count, name: selectedName, value: selectedValue)
-        } else if quantity > 0 {
-            createAttributesLabel(selectedName.count + 1, name: tempSelectedName, value: tempSelectedValue)
-        } else {
-            println("ProductViewController - setAttributes")
-        }
-    }
-    
-    func createAttributesLabel(numberOfAttributes: Int, name: NSArray, value: NSArray) {
-        var topMargin: CGFloat = 0
-        var leftMargin: CGFloat = 0
-        var reseter: Int = 0
-        var counter: Int = 1
-        var labelWidth = (self.view.frame.size.width / 3)
-        
-        for i in 0..<numberOfAttributes {
-            if i % 3 == 0 && i != 0 {
-                topMargin += 23
-                reseter = 0
-                counter += 1
-            }
-            
-            leftMargin = CGFloat(reseter * Int(labelWidth))
-            reseter += 1
-            
-            var attributesLabel = UILabel(frame: CGRectMake(leftMargin + 10, topMargin + 50, labelWidth - 12, 23))
-            attributesLabel.font = UIFont.systemFontOfSize(14.0)
-            attributesLabel.textColor = .grayColor()
-            
-            var attributedCategory = NSMutableAttributedString(string: "\(name[i]): ")
-            var font = [NSFontAttributeName : UIFont.boldSystemFontOfSize(14.0)]
-            var attributeItem = NSMutableAttributedString(string: value[i] as! String, attributes: font)
-            attributedCategory.appendAttributedString(attributeItem)
-            
-            attributesLabel.attributedText = attributedCategory
-            
-            self.productAttributeView.addSubview(attributesLabel)
-        }
-        
-        newFrame = self.productAttributeView.frame
-        newFrame.size.height = CGFloat(counter * 23) + 60 //60 = height of header + 10 for bottom margin
-        self.productAttributeView.frame = newFrame
-        
-        setUpViews()
-    }
-    
-    // MARK: Actions
-    
-    @IBAction func addToCartAction(sender: AnyObject) {
-        seeMoreAttribute("cart")
-        
-    }
-    
-    func buyItNowAction(gesture: UIGestureRecognizer) {
-        seeMoreAttribute("buy")
-    }
-    
-    func scrollViewDidScroll(scrollView: UIScrollView) {
-        
-        if self.lastContentOffset > scrollView.contentOffset.y && scrollView.contentOffset.y <= 140.0 { // hide
-            if visibility >= 0.0 && visibility <= 1.0 {
-                visibility -= Double(scrollView.contentOffset.y / 14) * 0.005
-            }
-        } else if self.lastContentOffset < scrollView.contentOffset.y && scrollView.contentOffset.y >= 140.0 { // show
-            if  visibility <= 1.0 && visibility >= 0.0 {
-                visibility += Double(scrollView.contentOffset.y / 14) * 0.005
-            }
-        }
-        
-        if visibility > 1.0 {
-            visibility = 1.0
-        } else if visibility < 0.0 {
-            visibility = 0.0
-        }
-        
-        // reached top or bottom
-        
-        if scrollView.contentOffset.y <= 0.0 {
-             visibility = 0.0
-        } else if scrollView.contentOffset.y + scrollView.frame.size.height == scrollView.contentSize.height {
-            visibility = 1.0
-        }
-        
-        self.navigationController?.navigationBar.alpha = CGFloat(visibility)
-        self.lastContentOffset = scrollView.contentOffset.y
-    }
-    
-    func showAlert(text: String) {
-        let alertController = UIAlertController(title: "YiLinker", message: text, preferredStyle: .Alert)
-        let defaultAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
-        alertController.addAction(defaultAction)
-        presentViewController(alertController, animated: true, completion: nil)
-    }
-    
-    func tapGesture(action: Selector) -> UITapGestureRecognizer {
-        var tap = UITapGestureRecognizer()
-        tap.numberOfTapsRequired = 1
-        tap.addTarget(self, action: action)
-        
-        return tap
-    }
-    
-    // Navigation Bar Actions
-    
-    func gotoAttributes(gesture: UIGestureRecognizer) {
-        seeMoreAttribute("")
-    }
-    
-    func checkRequests() {
-        
-//        println("Request Product Details Successful: " + String(stringInterpolationSegment: productSuccess))
-//        println("Request Review  Details Successful: " + String(stringInterpolationSegment: reviewSuccess))
-//        println("Request Seller  Details Successful: " + String(stringInterpolationSegment: sellerSuccess))
-        
-        if productSuccess && reviewSuccess && sellerSuccess {
-            self.loadViewsWithDetails()
-        } else if productRequest && reviewRequest && sellerRequest {
-            if productSuccess == false || reviewSuccess == false || sellerSuccess == false {
-                addEmptyView()
-                SVProgressHUD.dismiss()
-            }
-        }
-    }
-    
-    func addEmptyView() {
-        self.emptyView = UIView.loadFromNibNamed("EmptyView", bundle: nil) as? EmptyView
-        self.emptyView!.delegate = self
-        self.view.addSubview(self.emptyView!)
-    }
-    
-    func didTapReload() {
-        self.requestProductDetails(productUrl, params: nil)
-        self.requestReviewDetails(reviewUrl, params: nil)
-        self.emptyView?.removeFromSuperview()
-    }
-
-    func barCloseAction() {
-        self.navigationController?.popToRootViewControllerAnimated(true)
-    }
-
-    func barWishlistAction() {
-//        var imageToAnimate = UIImageView()
-//        imageToAnimate.frame = self.productImagesView.collectionView.frame
-//        
-//        for subView in self.productImagesView.collectionView.subviews as! [UIView] {
-//            for views in subView.subviews as! [UIView] {
-//                for imageView in views.subviews as! [UIImageView] {
-//                    if imageView.isKindOfClass(UIImageView) {
-//                        imageToAnimate.image = imageView.image
-//                    }
-//                }
-//            }
-//        }
-//        
-//        self.view.addSubview(imageToAnimate)
-//        UIView.animateWithDuration(0.3, animations: {
-//            imageToAnimate.transform = CGAffineTransformMakeScale(0.1, 0.1)
-//            }, completion: { finished in //after scaling
-//                UIView.animateWithDuration(0.3, animations: { //after animating
-//                    imageToAnimate.center = CGPointMake(250, self.tabController.tabBar.frame.origin.y - (self.tabController.tabBar.frame.size.height / 2))
-//                    imageToAnimate.alpha = 0.0
-//                    }, completion: { finished in
-//                        if let badgeValue = (self.tabController.tabBar.items![3] as! UITabBarItem).badgeValue?.toInt() {
-//                            (self.tabController.tabBar.items![3] as! UITabBarItem).badgeValue = String(badgeValue + 1)
-//                        } else {
-//                            (self.tabController.tabBar.items![3] as! UITabBarItem).badgeValue = "1"
-//                        }
-//                })
-//        })
-        
-        showAlert("This item has been added to your wishlist")
-        
-        if let badgeValue = (self.tabController.tabBar.items![3] as! UITabBarItem).badgeValue?.toInt() {
-            (self.tabController.tabBar.items![3] as! UITabBarItem).badgeValue = String(badgeValue + 1)
-        } else {
-            (self.tabController.tabBar.items![3] as! UITabBarItem).badgeValue = "1"
-        }
-        
-        
-//        SVProgressHUD.dismiss()
-    }
-
-    func barRateAction() {
-        showAlert("Rate")
-    }
-
-    func barMessageAction() {
-        showAlert("Message")
-    }
-
-    func barShareAction() {
-        shareTextImageAndURL(sharingText: "Sample Text", sharingImage: UIImage(named: "s61"), sharingURL: NSURL(fileURLWithPath: "http://www.Easyshop.ph"))
-    }
-    
-}
\ No newline at end of file
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewsViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewsViewController.swift
deleted file mode 100644
index f1745de..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProductViewsViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  ProductViewsViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/3/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class ProductViewsViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProfileViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProfileViewController.swift
deleted file mode 100644
index 36a5d5c..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ProfileViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  ProfileViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class ProfileViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/RegisterViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/RegisterViewController.swift
deleted file mode 100644
index 1fddb59..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/RegisterViewController.swift
+++ /dev/null
@@ -1,285 +0,0 @@
-//
-//  RegisterViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/9/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-
-class RegisterViewController: UIViewController, UITextFieldDelegate {
-    
-    @IBOutlet weak var firstNameTextField: UITextField!
-    @IBOutlet weak var lastNameTextField: UITextField!
-    @IBOutlet weak var emailAddressTextField: UITextField!
-    @IBOutlet weak var passwordTextField: UITextField!
-    @IBOutlet weak var reTypePasswordTextField: UITextField!
-    @IBOutlet weak var registerButton: DynamicRoundedButton!
-    
-    var currentTextFieldTag: Int = 1
-    
-    
-    override func viewDidAppear(animated: Bool) {
-        super.viewDidAppear(animated)
-    }
-    
-    override func viewWillDisappear(animated: Bool) {
-        super.viewWillDisappear(animated)
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            self.done()
-        }
-    }
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        self.view.needsUpdateConstraints()
-        self.view.layoutIfNeeded()
-        self.setUpTextFields()
-        self.registerButton.addTarget(self, action: "register", forControlEvents: UIControlEvents.TouchUpInside)
-    }
-    
-    override func viewDidLayoutSubviews() {
-        super.viewDidLayoutSubviews()
-    }
-
-    func setUpTextFields() {
-        self.firstNameTextField.delegate = self
-        self.firstNameTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-        self.lastNameTextField.delegate = self
-        self.lastNameTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-        self.emailAddressTextField.delegate = self
-        self.emailAddressTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-        self.passwordTextField.delegate = self
-        self.passwordTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-        self.reTypePasswordTextField.delegate = self
-        self.reTypePasswordTextField.addToolBarWithTarget(self, next: "next", previous: "previous", done: "done")
-    }
-    
-    func done() {
-        self.view.endEditing(true)
-        self.showCloseButton()
-        self.adjustTextFieldYInsetWithInset(0)
-    }
-    
-    func previous() {
-        let previousTag: Int = self.currentTextFieldTag - 1
-       
-        if let textField: UITextField = self.view.viewWithTag(previousTag) as? UITextField {
-            textField.becomeFirstResponder()
-        } else {
-            self.done()
-        }
-
-    }
-    
-    
-    func next() {
-        let nextTag: Int = self.currentTextFieldTag + 1
-        
-        if let textField: UITextField = self.view.viewWithTag(nextTag) as? UITextField {
-            textField.becomeFirstResponder()
-        } else {
-            self.done()
-        }
-    }
-    
-    func textFieldShouldBeginEditing(textField: UITextField) -> Bool {
-        self.currentTextFieldTag = textField.tag
-        let textFieldHeightWithInset: CGFloat = -30
-        if IphoneType.isIphone6Plus() {
-            if textField == self.passwordTextField || textField == self.reTypePasswordTextField {
-                self.adjustTextFieldYInsetWithInset(textFieldHeightWithInset)
-            } else {
-                self.adjustTextFieldYInsetWithInset(0)
-            }
-        } else if IphoneType.isIphone6() {
-            if textField == self.firstNameTextField {
-                self.adjustTextFieldYInsetWithInset(textFieldHeightWithInset)
-            } else if textField == self.lastNameTextField {
-                self.adjustTextFieldYInsetWithInset(textFieldHeightWithInset)
-            } else if textField == self.emailAddressTextField {
-                self.adjustTextFieldYInsetWithInset(CGFloat(textField.tag) * textFieldHeightWithInset)
-            } else {
-                self.adjustTextFieldYInsetWithInset(3 * textFieldHeightWithInset)
-            }
-        } else if IphoneType.isIphone5() {
-            if textField == self.firstNameTextField || textField == self.lastNameTextField {
-                self.showCloseButton()
-                self.adjustTextFieldYInsetWithInset(0)
-            } else if textField == self.emailAddressTextField {
-                self.showCloseButton()
-                self.adjustTextFieldYInsetWithInset(-50)
-            } else if textField == self.passwordTextField  || textField == self.reTypePasswordTextField {
-                self.hideCloseButton()
-                self.adjustTextFieldYInsetWithInset(-70)
-            }
-        } else if IphoneType.isIphone4() {
-            self.hideCloseButton()
-            if textField == self.firstNameTextField || textField == self.lastNameTextField {
-                self.adjustTextFieldYInsetWithInset(-50)
-            } else  {
-                if textField.tag != 5 {
-                    self.adjustTextFieldYInsetWithInset(CGFloat(textField.tag) * textFieldHeightWithInset)
-                } else {
-                    self.adjustTextFieldYInsetWithInset(CGFloat(textField.tag - 1) * textFieldHeightWithInset)
-                }
-            }
-        }
-    
-        
-        return true
-    }
-    
-    func textFieldShouldEndEditing(textField: UITextField) -> Bool {
-        return true
-    }
-    
-    func textFieldShouldReturn(textField: UITextField) -> Bool {
-        if textField.tag != 5 {
-            self.next()
-        } else {
-            self.done()
-            self.register()
-        }
-        
-        return true
-    }
-    
-    
-    func adjustTextFieldYInsetWithInset(inset: CGFloat) {
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            UIView.animateWithDuration(0.5, delay: 0.0, options: nil, animations: {
-                let parentViewController: LoginAndRegisterContentViewController = self.parentViewController as! LoginAndRegisterContentViewController
-                parentViewController.verticalSpaceConstraint.constant = inset
-                self.parentViewController!.view.layoutIfNeeded()
-                }, completion: {(value: Bool) in
-                    
-            })
-        }
-    }
-    
-    func register() {
-        var errorMessage: String = ""
-        
-        if !self.firstNameTextField.isNotEmpty() {
-            errorMessage = "First name is required."
-        } else if !self.firstNameTextField.isValidName() {
-            errorMessage = "First name contains illegal characters. It can only contain letters, numbers and underscores."
-        } else if !self.lastNameTextField.isNotEmpty() {
-            errorMessage = "Last name is required."
-        } else if !self.lastNameTextField.isValidName() {
-            errorMessage = "Last name contains illegal characters. It can only contain letters, numbers and underscores."
-        } else if !self.emailAddressTextField.isNotEmpty() {
-            errorMessage = "Email is required."
-        } else if !self.emailAddressTextField.isValidEmail() {
-            errorMessage = "The email address you enter is not a valid email address."
-        } else if !self.passwordTextField.isNotEmpty() {
-            errorMessage = "Password is required."
-        } else if !self.passwordTextField.isAlphaNumeric() {
-            errorMessage = "Password contains illegal characters. It can only contain letters, numbers and underscores."
-        } else if !self.reTypePasswordTextField.isNotEmpty() {
-            errorMessage = "Re-type password is required."
-        } else if self.passwordTextField.text != self.passwordTextField.text {
-            errorMessage = "The password does not match."
-        }
-        
-        if errorMessage != "" {
-            UIAlertController.displayErrorMessageWithTarget(self, errorMessage: errorMessage)
-        } else {
-            self.fireRegister()
-        }
-    }
-    
-    func hideCloseButton() {
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            UIView.animateWithDuration(0.3, delay: 0.0, options: nil, animations: {
-                let parentViewController: LoginAndRegisterContentViewController = self.parentViewController as! LoginAndRegisterContentViewController
-                parentViewController.closeButton.alpha = 0
-                }, completion: {(value: Bool) in
-                    
-            })
-        }
-    }
-    
-    func showCloseButton() {
-        if self.parentViewController!.isKindOfClass(LoginAndRegisterContentViewController) {
-            UIView.animateWithDuration(0.3, delay: 0.0, options: nil, animations: {
-                let parentViewController: LoginAndRegisterContentViewController = self.parentViewController as! LoginAndRegisterContentViewController
-                parentViewController.closeButton.alpha = 1
-                }, completion: {(value: Bool) in
-                    
-            })
-        }
-    }
-    
-    func fireRegister() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-        let manager: APIManager = APIManager.sharedInstance
-
-        let parameters: NSDictionary = ["email": self.emailAddressTextField.text,"password": self.passwordTextField.text, "fullname": "\(self.firstNameTextField.text) \(self.lastNameTextField.text)"]
-        
-        manager.POST(APIAtlas.registerUrl, parameters: parameters, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                let registerModel: RegisterModel = RegisterModel.parseDataFromDictionary(responseObject as! NSDictionary)
-                if registerModel.isSuccessful {
-                    self.fireLogin(self.emailAddressTextField.text, password: self.passwordTextField.text)
-                } else {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: registerModel.message, title: "Error")
-                     SVProgressHUD.dismiss()
-                }
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
-                
-                if !Reachability.isConnectedToNetwork() {
-                    UIAlertController.displayNoInternetConnectionError(self)
-                } else {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Something went wrong", title: "Error")
-                }
-                
-                SVProgressHUD.dismiss()
-        })
-    }
-    
-    func fireLogin(email: String, password: String) {
-        let manager: APIManager = APIManager.sharedInstance
-        //seller@easyshop.ph
-        //password
-        let parameters: NSDictionary = ["email": email,"password": password, "client_id": "1_167rxzqvid8g8swggwokcoswococscocc8ck44wo0g88owgkcc", "client_secret": "317eq8nohry84ooc0o8woo8000c0k844c4cggws84g80scwwog", "grant_type": "http://yilinker-online.com/grant/buyer"]
-        
-        manager.POST(APIAtlas.loginUrl, parameters: parameters, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            SessionManager.parseTokensFromResponseObject(responseObject as! NSDictionary)
-            SVProgressHUD.dismiss()
-            self.showSuccessMessage()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                let task: NSHTTPURLResponse = task.response as! NSHTTPURLResponse
-                
-                if task.statusCode == 401 {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Mismatch username and password", title: "Login Failed")
-                } else {
-                    UIAlertController.displayErrorMessageWithTarget(self, errorMessage: "Something went wrong", title: "Error")
-                }
-                
-                SVProgressHUD.dismiss()
-        })
-    }
-    
-    func showSuccessMessage() {
-        let alertController = UIAlertController(title: "Success", message: "Successfully login.", preferredStyle: .Alert)
-        
-        let OKAction = UIAlertAction(title: "OK", style: .Default) { (action) in
-            alertController.dismissViewControllerAnimated(true, completion: nil)
-            let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
-            appDelegate.changeRootToHomeView()
-        }
-        
-        alertController.addAction(OKAction)
-        
-        self.presentViewController(alertController, animated: true) {
-            
-        }
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ResultViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/ResultViewController.swift
deleted file mode 100644
index 534c002..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/ResultViewController.swift
+++ /dev/null
@@ -1,154 +0,0 @@
-//
-//  ResultViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/18/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class ResultViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {
-    
-    let grid:String = "GRID"
-    let list:String = "LIST"
-    let seller:String = "SELLER"
-    
-    let reuseIdentifierGrid: String = "ProductResultGridCollectionViewCell"
-    let reuseIdentifierList: String = "ProductResultListCollectionViewCell"
-    let reuseIdentifierSeller: String = "SellerResultCollectionViewCell"
-    var type: String = "GRID"
-    
-    @IBOutlet weak var resultCollectionView: UICollectionView!
-    
-    @IBOutlet weak var sortView: UIView!
-    @IBOutlet weak var filterView: UIView!
-    @IBOutlet weak var viewTypeView: UIView!
-    
-    var collectionViewData: [String] = ["Item 1", "Item 3", "Item 3", "Item 1", "Item 3", "Item 3"]
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        self.initializeViews()
-        self.registerNibs()
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-
-    func initializeViews() {
-        //Add Nav Bar
-        if self.respondsToSelector("edgesForExtendedLayout") {
-            self.edgesForExtendedLayout = UIRectEdge.None
-        }
-    
-        // Add tap event to Sort View
-        var sort = UITapGestureRecognizer(target:self, action:"tapSortViewAction")
-        sortView.addGestureRecognizer(sort)
-        
-        // Add tap event to Sort View
-        var filter = UITapGestureRecognizer(target:self, action:"tapFilterViewAction")
-        filterView.addGestureRecognizer(filter)
-
-        // Add tap event to Sort View
-        var viewType = UITapGestureRecognizer(target:self, action:"tapViewTypeViewAction")
-        viewTypeView.addGestureRecognizer(viewType)
-        
-    }
-    
-    func registerNibs() {
-        var cellNibGrid = UINib(nibName: reuseIdentifierGrid, bundle: nil)
-        self.resultCollectionView?.registerNib(cellNibGrid, forCellWithReuseIdentifier: reuseIdentifierGrid)
-        
-        var cellNibList = UINib(nibName: reuseIdentifierList, bundle: nil)
-        self.resultCollectionView?.registerNib(cellNibList, forCellWithReuseIdentifier: reuseIdentifierList)
-        
-        var cellNib = UINib(nibName: reuseIdentifierSeller, bundle: nil)
-        self.resultCollectionView?.registerNib(cellNib, forCellWithReuseIdentifier: reuseIdentifierSeller)
-    }
-    
-
-    func changeViewType() {
-        if type == grid {
-            type = list
-        } else if type == list {
-            type = seller
-        } else {
-            type = grid
-        }
-        self.resultCollectionView?.reloadData()
-    }
-    
-    // Tap Gesture Action
-    func tapSortViewAction() {
-        println("Sort Tapped!")
-    }
-    
-    func tapFilterViewAction() {
-        println("Filter Tapped!")
-    }
-    
-    func tapViewTypeViewAction() {
-        println("View Type Tapped!")
-        self.changeViewType()
-        
-    }
-    
-    // MARK: UICollectionViewDataSource
-    
-    func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {
-        //#warning Incomplete method implementation -- Return the number of sections
-        return 1
-    }
-    
-    
-    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
-        //#warning Incomplete method implementation -- Return the number of items in the section
-        return collectionViewData.count
-    }
-    
-    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
-        if type == grid {
-            let cell: ProductResultGridCollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifierGrid, forIndexPath: indexPath) as! ProductResultGridCollectionViewCell
-            return cell
-        } else if type == list {
-            let cell: ProductResultListCollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifierList, forIndexPath: indexPath) as! ProductResultListCollectionViewCell
-            return cell
-        } else{
-            let cell: SellerResultCollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier(reuseIdentifierSeller, forIndexPath: indexPath) as! SellerResultCollectionViewCell
-            return cell
-        }
-    }
-    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {
-        let screenSize: CGRect = UIScreen.mainScreen().bounds
-        let screenWidth = screenSize.width
-        let screenHeight = screenSize.height
-        
-        if type == grid {
-            return CGSize(width: ((screenWidth / 2) - 0.5), height: 185)
-        } else if type == list {
-            return CGSize(width: screenWidth, height: 120)
-        } else {
-            return CGSize(width: screenWidth, height: 225)
-        }
-    }
-    // MARK: UICollectionViewDelegate
-    
-    func collectionView(collectionView: UICollectionView, didDeselectItemAtIndexPath indexPath: NSIndexPath) {
-    }
-
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SearchViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/SearchViewController.swift
deleted file mode 100644
index 22e1cfd..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SearchViewController.swift
+++ /dev/null
@@ -1,120 +0,0 @@
-//
-//  SearchViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/28/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class SearchViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate {
-
-    let viewControllerIndex = 1
-    
-    @IBOutlet weak var searchBar: UISearchBar!
-    @IBOutlet weak var searchResultTableView: UITableView!
-    
-    var tableData: [SearchSuggestionModel] = []
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        self.initializeViews()
-        
-        let transaction = TransactionViewController(nibName: "TransactionViewController", bundle: nil)
-        transaction.edgesForExtendedLayout = UIRectEdge.None
-        self.navigationController?.pushViewController(transaction, animated: true)
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    func initializeViews() {
-        // Connect all delegate prototypes
-        self.searchBar.delegate = self
-        self.searchResultTableView.dataSource = self
-        self.searchResultTableView.delegate = self
-        
-        // Do any additional setup after loading the view.
-        let titleDict = [NSForegroundColorAttributeName: UIColor.whiteColor()]
-            as [NSObject : AnyObject]
-        self.navigationController!.navigationBar.titleTextAttributes = titleDict
-        
-        // Remove trailing cells
-        self.searchResultTableView.tableFooterView = UIView(frame: CGRectZero)
-        
-        // Remove NavigationBar shadow
-        self.navigationController?.navigationBar.barStyle = UIBarStyle.Black
-        
-        //Register Nib to Tableview
-        var nib = UINib(nibName: "SearchSuggestionTableViewCell", bundle: nil)
-        searchResultTableView.registerNib(nib, forCellReuseIdentifier: "SearchSuggestionTableViewCell")
-        
-        if(self.tableData.isEmpty) {
-            var temp: SearchSuggestionModel = SearchSuggestionModel(suggestion: "Browse by Category", imageURL: "SearchBrowseCategory") as SearchSuggestionModel
-            
-            tableData.append(temp)
-            self.searchResultTableView.reloadData()
-        }
-
-    }
-    
-    // Mark: - UISearchBarDelegate
-    func searchBarShouldBeginEditing(searchBar: UISearchBar) -> Bool {
-        // Show Scope bar with cancel
-        self.searchBar.showsScopeBar = true
-        self.searchBar.sizeToFit()
-        self.searchBar.setShowsCancelButton(true, animated: true)
-        
-        return true
-    }
-    
-    func searchBarShouldEndEditing(searchBar: UISearchBar) -> Bool {
-        self.searchBar.showsScopeBar = false
-        self.searchBar.sizeToFit()
-        self.searchBar.setShowsCancelButton(false, animated: true)
-        return true
-    }
-    
-    func searchBarCancelButtonClicked(searchBar: UISearchBar) {
-        self.searchBar.resignFirstResponder()
-    }
-    
-    func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {
-        self.searchResultTableView.reloadData()
-    }
-    
-    // Mark: - UITableViewDataSource methods
-    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
-        return 1
-    }
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return tableData.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell = searchResultTableView.dequeueReusableCellWithIdentifier("SearchSuggestionTableViewCell") as! SearchSuggestionTableViewCell
-        
-        var tempModel: SearchSuggestionModel = tableData[indexPath.row]
-        
-        cell.suggestionTextLabel?.text = tempModel.suggestion
-        if tempModel.imageURL == "SearchBrowseCategory" {
-            cell.suggestionImageView.image = UIImage(named: "SearchBrowseCategory")
-        } else {
-            cell.suggestionImageView.sd_setImageWithURL(NSURL(string: tempModel.imageURL), placeholderImage: UIImage(named: "dummy-placeholder"))
-        }
-        
-        return cell
-    }
-    
-    // Mark: - UITableViewDelegate methods
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        var resultController = ResultViewController(nibName: "ResultViewController", bundle: nil)
-        self.navigationController?.pushViewController(resultController, animated:true);
-    }
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SellerViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/SellerViewController.swift
deleted file mode 100644
index 4a23d3c..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SellerViewController.swift
+++ /dev/null
@@ -1,217 +0,0 @@
-//
-//  SellerViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/17/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class SellerViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, SellerTableHeaderViewDelegate, ProductsTableViewCellDelegate {
-
-    @IBOutlet weak var tableView: UITableView!
-    
-    var sellerModel: SellerModel?
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        self.backButton()
-        self.tableView.estimatedRowHeight = 112.0
-        self.tableView.rowHeight = UITableViewAutomaticDimension
-        self.registerNib()
-      
-        self.titleView()
-        self.fireSeller()
-        
-        let footerView: UIView = UIView(frame: CGRectZero)
-        self.tableView.tableFooterView = footerView
-    }
-    
-    func populateData() {
-        self.tableView.delegate = self
-        self.tableView.dataSource = self
-        self.tableView.backgroundColor = UIColor.clearColor()
-        self.headerView()
-        self.tableView.reloadData()
-    }
-    
-    func titleView() {
-        let label: UILabel = UILabel(frame: CGRectMake(0, 0, 100, 50))
-        label.text = "Vendor Page"
-        label.textAlignment = NSTextAlignment.Center
-        label.textColor = UIColor.whiteColor()
-        self.navigationItem.titleView = label
-    }
-    
-    override func viewDidAppear(animated: Bool) {
-        super.viewDidAppear(animated)
-        self.tableView.reloadData()
-    }
-    
-    func headerView() {
-        let sellerTableHeaderView: SellerTableHeaderView = SellerTableHeaderView.loadFromNibNamed("SellerTableHeaderView", bundle: nil) as! SellerTableHeaderView
-        sellerTableHeaderView.delegate = self
-        
-        sellerTableHeaderView.coverPhotoImageView.sd_setImageWithURL(self.sellerModel!.coverPhoto, placeholderImage: UIImage(named: "dummy-placeholder"))
-       
-        let imageView: UIImageView = UIImageView(frame: CGRectMake(0, 0, sellerTableHeaderView.profileImageView.frame.width, sellerTableHeaderView.profileImageView.frame.height))
-        imageView.sd_setImageWithURL(self.sellerModel!.avatar, placeholderImage: UIImage(named: "dummy-placeholder"))
-        
-        sellerTableHeaderView.profileImageView.addSubview(imageView)
-        sellerTableHeaderView.sellernameLabel.text = sellerModel!.name
-        sellerTableHeaderView.addressLabel.text = sellerModel!.address
-        
-        self.tableView.tableHeaderView = sellerTableHeaderView
-        self.tableView.reloadData()
-    }
-    
-    func registerNib() {
-        let sellerNib: UINib = UINib(nibName: Constants.Seller.aboutSellerTableViewCellNibNameAndIdentifier, bundle: nil)
-        self.tableView.registerNib(sellerNib, forCellReuseIdentifier: Constants.Seller.aboutSellerTableViewCellNibNameAndIdentifier)
-        
-        let productsNib: UINib = UINib(nibName: Constants.Seller.productsTableViewCellNibNameAndIdentifier, bundle: nil)
-        self.tableView.registerNib(productsNib, forCellReuseIdentifier: Constants.Seller.productsTableViewCellNibNameAndIdentifier)
-        
-        let generalRatingNib: UINib = UINib(nibName: Constants.Seller.generalRatingTableViewCellNibNameAndIndentifier, bundle: nil)
-        self.tableView.registerNib(generalRatingNib, forCellReuseIdentifier: Constants.Seller.generalRatingTableViewCellNibNameAndIndentifier)
-        
-        let reviewNib: UINib = UINib(nibName: Constants.Seller.reviewNibName, bundle: nil)
-        self.tableView.registerNib(reviewNib, forCellReuseIdentifier: Constants.Seller.reviewIdentifier)
-        
-        let seeMoreNib: UINib = UINib(nibName: Constants.Seller.seeMoreTableViewCellNibNameAndIdentifier, bundle: nil)
-        self.tableView.registerNib(seeMoreNib, forCellReuseIdentifier: Constants.Seller.seeMoreTableViewCellNibNameAndIdentifier)
-    }
-    
-    func fireSeller() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-        let manager = APIManager.sharedInstance
-        manager.GET("http://demo9190076.mockable.io/v1/seller", parameters: nil, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-                self.sellerModel = SellerModel.parseDataFromDictionary(responseObject as! NSDictionary)
-                self.populateData()
-                SVProgressHUD.dismiss()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                SVProgressHUD.dismiss()
-
-        })
-    }
-    
-    func backButton() {
-        var backButton:UIButton = UIButton.buttonWithType(UIButtonType.Custom) as! UIButton
-        backButton.frame = CGRectMake(0, 0, 40, 40)
-        backButton.addTarget(self, action: "back", forControlEvents: UIControlEvents.TouchUpInside)
-        backButton.setImage(UIImage(named: "back-white"), forState: UIControlState.Normal)
-        var customBackButton:UIBarButtonItem = UIBarButtonItem(customView: backButton)
-        
-        let navigationSpacer: UIBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FixedSpace, target: nil, action: nil)
-        navigationSpacer.width = -20
-        
-        self.navigationItem.leftBarButtonItems = [navigationSpacer, customBackButton]
-    }
-    
-    func back() {
-        self.navigationController!.popViewControllerAnimated(true)
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return 1
-    }
-    
-    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
-        return self.sellerModel!.reviews.count + 3
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        if indexPath.section == 0 {
-            let aboutSellerTableViewCell: AboutSellerTableViewCell = self.tableView.dequeueReusableCellWithIdentifier(Constants.Seller.aboutSellerTableViewCellNibNameAndIdentifier) as! AboutSellerTableViewCell
-                aboutSellerTableViewCell.aboutLabel.text = self.sellerModel!.sellerAbout
-            return aboutSellerTableViewCell
-        } else if indexPath.section == 1 {
-            let productsTableViewCell: ProductsTableViewCell = self.tableView.dequeueReusableCellWithIdentifier(Constants.Seller.productsTableViewCellNibNameAndIdentifier) as! ProductsTableViewCell
-                productsTableViewCell.productModels = sellerModel!.products
-                productsTableViewCell.delegate = self
-            return productsTableViewCell
-        } else if indexPath.section == 2 {
-            let generalRatingTableViewCell: GeneralRatingTableViewCell = self.tableView.dequeueReusableCellWithIdentifier(Constants.Seller.generalRatingTableViewCellNibNameAndIndentifier) as! GeneralRatingTableViewCell
-            
-            generalRatingTableViewCell.setRating(self.sellerModel!.ratingAndFeedback)
-            return generalRatingTableViewCell
-        } else {
-            let index: Int = indexPath.section - 3
-            let reviewCell: ReviewTableViewCell = self.tableView.dequeueReusableCellWithIdentifier(Constants.Seller.reviewIdentifier) as! ReviewTableViewCell
-            
-            let reviewModel: ProductReviewsModel = self.sellerModel!.reviews[index]
-//            reviewCell.displayPictureImageView.sd_setImageWithURL(NSURL(string: reviewModel.imageUrl)!, placeholderImage: UIImage(named: "dummy-placeholder"))
-//            reviewCell.messageLabel.text = reviewModel.message
-//            reviewCell.nameLabel.text = reviewModel.name
-            reviewCell.setRating(reviewModel.rating)
-            return reviewCell
-        }
-    }
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        self.tableView.deselectRowAtIndexPath(indexPath, animated: true)
-    }
-    
-    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
-        if section == 0 || section >= 3 {
-            return 0
-        } else {
-            return 10
-        }
-    }
-    
-    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
-        if indexPath.section == 1 {
-            return 174
-        } else if indexPath.section == 2 {
-            return 41
-        } else {
-            return UITableViewAutomaticDimension
-        }
-    }
-    
-    //Seller View Delegate
-    func sellerTableHeaderViewDidViewFeedBack() {
-        println("view feedback")
-    }
-    
-    func sellerTableHeaderViewDidFollow() {
-        println("follow")
-    }
-    
-    func sellerTableHeaderViewDidMessage() {
-        println("message")
-    }
-    
-    func sellerTableHeaderViewDidCall() {
-        println("call")
-    }
-    
-    func productstableViewCellDidTapMoreProductWithTarget(target: String) {
-        println("Target: \(target)")
-        self.redirectToResultView("target")
-    }
-    
-    func productstableViewCellDidTapProductWithTarget(target: String, type: String) {
-        self.redirectToProductpageWithProductID("1")
-    }
-    
-    func redirectToProductpageWithProductID(productID: String) {
-        let productViewController: ProductViewController = ProductViewController(nibName: "ProductViewController", bundle: nil)
-        self.navigationController?.pushViewController(productViewController, animated: true)
-    }
-    
-    func redirectToResultView(target: String) {
-        let resultViewController: ResultViewController = ResultViewController(nibName: "ResultViewController", bundle: nil)
-        self.navigationController!.pushViewController(resultViewController, animated: true)
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/StartPageViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/StartPageViewController.swift
deleted file mode 100644
index e8d0c8a..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/StartPageViewController.swift
+++ /dev/null
@@ -1,206 +0,0 @@
-//
-//  StartPageViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/30/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class StartPageViewController: UIViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate, UIScrollViewDelegate {
-    
-    @IBOutlet weak var companyLogoImageView: UIImageView!
-    @IBOutlet weak var getStartedButton: UIButton!
-    @IBOutlet weak var titleLabel: UILabel!
-    @IBOutlet weak var orLabel: UILabel!
-    
-    var pageViewController: UIPageViewController?
-    var pageTitles: NSArray?
-    var pageImages: NSArray?
-    
-    @IBOutlet weak var signInButton: DynamicRoundedButton!
-    var timer = NSTimer()
-
-    @IBOutlet weak var pageControlVerticalConstraint: NSLayoutConstraint!
-    @IBOutlet weak var pageControl: UIPageControl!
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        if IphoneType.isIphone4() {
-            self.pageControlVerticalConstraint.constant = 10
-        }
-        
-        self.pageTitles = ["SHOES IN ONE PLACE", "CAMERA IN ONE PLACE", "SHOES IN ONE PLACE", "CAMERA IN ONE PLACE"]
-        self.pageImages = ["shoes", "camera", "shoes", "camera"]
-    
-        self.pageViewController = self.storyboard?.instantiateViewControllerWithIdentifier("PageViewController") as? UIPageViewController
-        
-        self.pageViewController?.dataSource = self
-        self.pageViewController?.delegate = self
-        
-        let startingViewController = viewControllerAtIndex(0)
-        var viewControllers: NSArray = NSArray(object: startingViewController!)
-        
-        self.pageViewController!.setViewControllers(viewControllers as! [AnyObject],
-            direction: .Forward,
-            animated: true,
-            completion: nil)
-        
-        
-        self.pageViewController?.view.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)
-        self.addChildViewController(self.pageViewController!)
-        self.view.addSubview(self.pageViewController!.view)
-        self.pageViewController?.didMoveToParentViewController(self)
-        
-        self.pageControl.pageIndicatorTintColor = UIColor.lightGrayColor()
-        self.pageControl.currentPageIndicatorTintColor = UIColor.blackColor()
-        self.pageControl.backgroundColor = UIColor.clearColor()
-        self.pageControl.numberOfPages = self.pageImages!.count
-        
-        self.pageControl.layer.zPosition = 100
-        self.companyLogoImageView.layer.zPosition = 100
-        self.orLabel.layer.zPosition = 100
-        
-        self.view.bringSubviewToFront(self.getStartedButton)
-        self.view.bringSubviewToFront(self.signInButton)
-        
-        for view in self.pageViewController!.view.subviews {
-            if let scrollView = view as? UIScrollView {
-                scrollView.delegate = self
-            }
-        }
-        self.timer = NSTimer.scheduledTimerWithTimeInterval(2.0, target: self, selector: Selector("scrollPage"), userInfo: nil, repeats: false)
-    }
-    
-    func scrollPage() {
-        var index = 0
-        if self.pageControl.currentPage != (self.pageImages!.count - 1) {
-            index = self.pageControl.currentPage + 1
-            self.pageControl.currentPage = index
-        } else {
-            self.pageControl.currentPage = 0
-        }
-        self.titleLabel.text = self.pageTitles?.objectAtIndex(index) as? String
-        let viewControllers: NSArray = NSArray(object: self.viewControllerAtIndex(index)!)
-        self.pageViewController!.setViewControllers(viewControllers as! [AnyObject],
-            direction: .Forward,
-            animated: true,
-            completion: nil)
-    }
-    
-    func pageViewController(pageViewController: UIPageViewController,
-        viewControllerAfterViewController viewController: UIViewController) ->
-        UIViewController? {
-            var index = (viewController as! StarterContentPageViewController).pageIndex
-            if (index == NSNotFound) {
-                return nil
-            }
-
-            index++
-            if (index == pageTitles!.count ){
-                return nil
-            }
-            return viewControllerAtIndex(index)
-    }
-    func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -> UIViewController? {
-        
-        var index = (viewController as! StarterContentPageViewController).pageIndex
-        if ((index == 0) || (index == NSNotFound)) {
-            return nil
-        }
-        
-        index--
-        
-        return viewControllerAtIndex(index)
-    }
-    func presentationCountForPageViewController(pageViewController: UIPageViewController) -> Int {
-        return self.pageTitles!.count
-    }
-    func presentationIndexForPageViewController(pageViewController: UIPageViewController) -> Int {
-        return 0
-    }
-    
-    
-    //MARK: Instance methods
-    func viewControllerAtIndex(index:Int) -> StarterContentPageViewController? {
-        if ((pageTitles!.count == 0) || (index >= pageTitles!.count)) {
-            return nil
-        }
-        let pageContentVC =
-        storyboard?.instantiateViewControllerWithIdentifier(
-            "StarterContentPageViewController") as! StarterContentPageViewController
-        //set the properties for the controller.
-        pageContentVC.imageFile = self.pageImages?.objectAtIndex(index) as! String
-        pageContentVC.pageIndex = index
-        return pageContentVC
-    }
-    
-
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    func pageViewController(pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [AnyObject], transitionCompleted completed: Bool) {
-        
-        if completed {
-            let contentViewController: StarterContentPageViewController = self.pageViewController?.viewControllers.last as! StarterContentPageViewController
-            self.pageControl.currentPage = contentViewController.pageIndex
-            self.titleLabel.text = self.pageTitles?.objectAtIndex(contentViewController.pageIndex) as? String
-            let delay = 2.5 * Double(NSEC_PER_SEC)
-            let time = dispatch_time(DISPATCH_TIME_NOW, Int64(delay))
-            dispatch_after(time, dispatch_get_main_queue()) {
-                self.timer = NSTimer.scheduledTimerWithTimeInterval(2.0, target: self, selector: Selector("scrollPage"), userInfo: nil, repeats: false)
-            }
-        }
-    }
-    
-    func scrollViewDidEndScrollingAnimation(scrollView: UIScrollView) {
-        let delay = 2.5 * Double(NSEC_PER_SEC)
-        let time = dispatch_time(DISPATCH_TIME_NOW, Int64(delay))
-        dispatch_after(time, dispatch_get_main_queue()) {
-            self.timer = NSTimer.scheduledTimerWithTimeInterval(2.0, target: self, selector: Selector("scrollPage"), userInfo: nil, repeats: false)
-        }
-    }
-    
-    func scrollViewWillBeginDragging(scrollView: UIScrollView) {
-        self.timer.invalidate()
-    }
-    
-    func scrollViewDidScroll(scrollView: UIScrollView) {
-        self.timer.invalidate()
-    }
-    
-    func touchesEnd() {
-        let delay = 1.5 * Double(NSEC_PER_SEC)
-        let time = dispatch_time(DISPATCH_TIME_NOW, Int64(delay))
-        dispatch_after(time, dispatch_get_main_queue()) {
-            self.timer = NSTimer.scheduledTimerWithTimeInterval(2.0, target: self, selector: Selector("scrollPage"), userInfo: nil, repeats: false)
-        }
-    }
-    
-    @IBAction func getStarted(sender: AnyObject) {
-        let homeStoryBoard: UIStoryboard = UIStoryboard(name: "HomeStoryBoard", bundle: nil)
-        let tabController: UITabBarController = homeStoryBoard.instantiateViewControllerWithIdentifier("TabBarController") as! UITabBarController
-        var modalStyle: UIModalTransitionStyle = UIModalTransitionStyle.CrossDissolve
-        tabController.modalTransitionStyle = modalStyle
-        self.presentViewController(tabController, animated: true, completion: nil)
-    }
-    
-    
-    @IBAction func signIn(sender: AnyObject) {
-        var loginContainerView: LoginAndRegisterContentViewController
-        if IphoneType.isIphone5() || IphoneType.isIphone4() {
-            loginContainerView = self.storyboard!.instantiateViewControllerWithIdentifier("LoginAndRegisterContentViewController5") as! LoginAndRegisterContentViewController
-        } else {
-            loginContainerView = self.storyboard!.instantiateViewControllerWithIdentifier("LoginAndRegisterContentViewController") as! LoginAndRegisterContentViewController
-        }
-        
-        self.presentViewController(loginContainerView, animated: true, completion: nil)
-    }
-    
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/StarterContentPageViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/StarterContentPageViewController.swift
deleted file mode 100644
index fb69563..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/StarterContentPageViewController.swift
+++ /dev/null
@@ -1,37 +0,0 @@
-//
-//  StarterContentPageViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/30/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class StarterContentPageViewController: UIViewController {
-    
-    var pageIndex = 0
-    var imageFile = ""
-    
-    @IBOutlet weak var imageView: UIImageView!
-    
-    @IBOutlet weak var titleLabel: UILabel!
-    override func viewWillAppear(animated: Bool) {
-        super.viewWillAppear(true)
-        self.imageView.image = UIImage(named: imageFile)
-        
-    }
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-    }
-    
-    override func viewDidLayoutSubviews() {
-        super.viewDidLayoutSubviews()
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SummaryViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/SummaryViewController.swift
deleted file mode 100644
index 2685de0..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/SummaryViewController.swift
+++ /dev/null
@@ -1,106 +0,0 @@
-//
-//  SummaryViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/19/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class SummaryViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
-
-    @IBOutlet weak var tableView: UITableView!
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        self.registerNib()
-        self.tableView.estimatedRowHeight = 71
-        self.tableView.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 0, -5)
-        self.tableView.rowHeight = UITableViewAutomaticDimension
-    }
-    
-    func registerNib() {
-        let orderSummaryNib: UINib = UINib(nibName: Constants.Checkout.orderSummaryTableViewCellNibNameAndIdentifier, bundle: nil)
-        self.tableView.registerNib(orderSummaryNib, forCellReuseIdentifier: Constants.Checkout.orderSummaryTableViewCellNibNameAndIdentifier)
-        
-        let shipToNib: UINib = UINib(nibName: Constants.Checkout.shipToTableViewCellNibNameAndIdentifier, bundle: nil)
-        self.tableView.registerNib(shipToNib, forCellReuseIdentifier: Constants.Checkout.shipToTableViewCellNibNameAndIdentifier)
-    }
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
-        return 58
-    }
-    
-    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
-        return 41
-    }
-    
-    func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
-        var headerView: CheckoutViews
-        if section == 0 {
-          headerView = XibHelper.puffViewWithNibName("CheckoutViews", index: 0) as! CheckoutViews
-        } else {
-          headerView = XibHelper.puffViewWithNibName("CheckoutViews", index: 2) as! CheckoutViews
-        }
-        
-        return headerView
-    }
-    
-    func tableView(tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
-        if section == 0 {
-            let footerView: CheckoutViews = XibHelper.puffViewWithNibName("CheckoutViews", index: 1) as! CheckoutViews
-            return footerView
-        } else {
-            return UIView(frame: CGRectZero)
-        }
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        if indexPath.section == 0 {
-            let orderSummaryCell: OrderSummaryTableViewCell = tableView.dequeueReusableCellWithIdentifier(Constants.Checkout.orderSummaryTableViewCellNibNameAndIdentifier) as! OrderSummaryTableViewCell
-            
-            return orderSummaryCell
-        } else {
-            let shipToTableViewCell: ShipToTableViewCell = self.tableView.dequeueReusableCellWithIdentifier(Constants.Checkout.shipToTableViewCellNibNameAndIdentifier) as! ShipToTableViewCell
-            shipToTableViewCell.accessoryType = UITableViewCellAccessoryType.DisclosureIndicator
-            return shipToTableViewCell
-        }
-        
-    }
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        if section == 0 {
-            return 3
-        } else {
-            return 1
-        }
-    }
-    
-    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
-        return 2
-    }
-    
-    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
-        if indexPath.section == 0 {
-            return 71
-        } else {
-            return UITableViewAutomaticDimension
-        }
-    }
-    
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        self.tableView.deselectRowAtIndexPath(indexPath, animated: true)
-        if indexPath.section == 1 {
-            
-        }
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TodaysPromoViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TodaysPromoViewController.swift
deleted file mode 100644
index 19f79b7..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TodaysPromoViewController.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  TodaysPromoViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 8/12/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class TodaysPromoViewController: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.swift
deleted file mode 100644
index 70ce5f1..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.swift
+++ /dev/null
@@ -1,211 +0,0 @@
-//
-//  TransactionDetailsViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/21/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class TransactionDetailsViewController: UIViewController {
-
-    @IBOutlet weak var tableView: UITableView!
-    
-    let list = ["North Face Super Uber Traver Bag", "Beats Studio Type 20 Headphones", "Sony Super Bass"]
-    
-    var newFrame: CGRect!
-    
-    var headerView: UIView!
-    var transactionIdView: TransactionIdView!
-    var transactionDetailsView: TransactionDetailsView!
-    var transactionProductListView: UIView!
-    
-    var footerView: UIView!
-    var transactionDeliveryStatusView: TransactionDeliveryStatusView!
-    var transactionSellerView: TransactionSellerView!
-    var transactionButtonView: UIView!
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        
-    }
-    
-    override func viewWillAppear(animated: Bool) {
-        super.viewWillAppear(animated)
-        
-        loadViewsWithDetails()
-    }
-    
-    // MARK: - Table View Data Souce
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return list.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell = UITableViewCell(style: .Default, reuseIdentifier: "identifier")
-        
-        cell.accessoryType = UITableViewCellAccessoryType.DisclosureIndicator
-        cell.textLabel?.text = list[indexPath.row]
-        cell.textLabel?.font = UIFont.systemFontOfSize(15.0)
-        cell.textLabel?.textColor = .darkGrayColor()
-        
-        return cell
-    }
-    
-    // MARK: - Table View Delegate
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        let productDetails = TransactionProductDetailsViewController(nibName: "TransactionProductDetailsViewController", bundle: nil)
-        self.navigationController?.pushViewController(productDetails, animated: true)
-    }
-    
-    // MARK: - Init Views
-    
-    func getHeaderView() -> UIView {
-        if self.headerView == nil {
-            self.headerView = UIView(frame: CGRectZero)
-            self.headerView.autoresizesSubviews = false
-            self.headerView.backgroundColor = Constants.Colors.backgroundGray
-        }
-        return self.headerView
-    }
-    
-    func getTransactionIdView() -> TransactionIdView {
-        if self.transactionIdView == nil {
-            self.transactionIdView = XibHelper.puffViewWithNibName("TransactionViews", index: 0) as! TransactionIdView
-            self.transactionIdView.frame.size.width = self.view.frame.size.width
-        }
-        return self.transactionIdView
-    }
-
-    func getTransactionDetailsView() -> TransactionDetailsView {
-        if self.transactionDetailsView == nil {
-            self.transactionDetailsView = XibHelper.puffViewWithNibName("TransactionViews", index: 1) as! TransactionDetailsView
-            self.transactionDetailsView.frame.size.width = self.view.frame.size.width
-        }
-        return self.transactionDetailsView
-    }
-    
-    func getTransactionProductListView() -> UIView {
-        if self.transactionProductListView == nil {
-            self.transactionProductListView = UIView(frame: (CGRectMake(0, 0, self.view.frame.size.width, 30)))
-            
-            var listLabel = UILabel(frame: CGRectMake(8, 0, self.transactionProductListView.frame.size.width - 8, self.transactionProductListView.frame.size.height))
-            listLabel.text = "PRODUCT LIST"
-            listLabel.textColor = .darkGrayColor()
-            listLabel.font = UIFont.systemFontOfSize(12.0)
-            
-            self.transactionProductListView.addSubview(listLabel)
-        }
-        return self.transactionProductListView
-    }
-    
-    // MARK: FOOTER
-    
-    func getFooterView() -> UIView {
-        if self.footerView == nil {
-            self.footerView = UIView(frame: CGRectZero)
-            self.footerView.autoresizesSubviews = false
-            self.footerView.backgroundColor = Constants.Colors.backgroundGray
-        }
-        return self.footerView
-    }
-    
-    func getTransactionSellerView() -> TransactionSellerView {
-        if self.transactionSellerView == nil {
-            self.transactionSellerView = XibHelper.puffViewWithNibName("TransactionViews", index: 2) as! TransactionSellerView
-            self.transactionSellerView.frame.size.width = self.view.frame.size.width
-        }
-        return self.transactionSellerView
-    }
-    
-    func getTransactionDeliveryStatusView() -> TransactionDeliveryStatusView {
-        if self.transactionDeliveryStatusView == nil {
-            self.transactionDeliveryStatusView = XibHelper.puffViewWithNibName("TransactionViews", index: 3) as! TransactionDeliveryStatusView
-            self.transactionDeliveryStatusView.frame.size.width = self.view.frame.size.width
-        }
-        return self.transactionDeliveryStatusView
-    }
-    
-    func getTransactionButtonView() -> UIView {
-        if self.transactionButtonView == nil {
-            self.transactionButtonView = UIView(frame: CGRectMake(0, 0, self.view.frame.size.width, 50))
-            
-            var feedbackButton: UIButton = UIButton(frame: CGRectZero)
-            feedbackButton.addTarget(self, action: "leaveFeedback", forControlEvents: .TouchUpInside)
-            feedbackButton.setTitle("LEAVE FEEDBACK FOR SELLER", forState: .Normal)
-            feedbackButton.setTitleColor(UIColor.whiteColor(), forState: .Normal)
-            feedbackButton.backgroundColor = Constants.Colors.productPrice
-            feedbackButton.titleLabel?.font = UIFont.boldSystemFontOfSize(10.0)
-            feedbackButton.sizeToFit()
-            feedbackButton.frame.size = CGSize(width: feedbackButton.frame.size.width + 20, height: 30)
-            feedbackButton.center.x = self.view.center.x
-            feedbackButton.layer.cornerRadius = feedbackButton.frame.size.height / 2
-            
-            self.transactionButtonView.addSubview(feedbackButton)
-        }
-        
-        return self.transactionButtonView
-    }
-    
-    // MARK: - Methods
-    
-    func loadViewsWithDetails() {
-        // HEADERS
-        self.getHeaderView().addSubview(self.getTransactionIdView())
-        self.getHeaderView().addSubview(self.getTransactionDetailsView())
-        self.getHeaderView().addSubview(self.getTransactionProductListView())
-        
-        // FOOTERS
-        self.getFooterView().addSubview(self.getTransactionSellerView())
-        self.getFooterView().addSubview(self.getTransactionDeliveryStatusView())
-        self.getFooterView().addSubview(self.getTransactionButtonView())
-        
-        setUpViews()
-    }
-    
-    func setUpViews() {
-        // header
-        self.setPosition(self.transactionDetailsView, from: self.transactionIdView)
-        self.setPosition(self.transactionProductListView, from: self.transactionDetailsView)
-
-        newFrame = self.headerView.frame
-        newFrame.size.height = CGRectGetMaxY(self.transactionProductListView.frame)
-        self.headerView.frame = newFrame
-
-        self.tableView.tableHeaderView = nil
-        self.tableView.tableHeaderView = self.headerView
-        
-        // footer
-        var footerGrayColor = UIView(frame: self.view.frame)
-        footerGrayColor.backgroundColor = Constants.Colors.backgroundGray
-        self.getFooterView().addSubview(footerGrayColor)
-        
-        self.setPosition(self.transactionDeliveryStatusView, from: self.transactionSellerView)
-        self.setPosition(self.transactionButtonView, from: self.transactionDeliveryStatusView)
-        self.setPosition(footerGrayColor, from: self.transactionButtonView)
-        footerGrayColor.frame.origin.y -= 20
-        
-        newFrame = self.footerView.frame
-        newFrame.size.height = CGRectGetMaxY(self.transactionButtonView.frame)
-        self.footerView.frame = newFrame
-        
-        self.tableView.tableFooterView = nil
-        self.tableView.tableFooterView = self.footerView
-    }
-    
-    func setPosition(view: UIView!, from: UIView!) {
-        newFrame = view.frame
-        newFrame.origin.y = CGRectGetMaxY(from.frame) + 20
-        view.frame = newFrame
-    }
-    
-    // MARK: - Actions
-    
-    func leaveFeedback() {
-        println("leave a feedback")
-    }
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.xib b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.xib
deleted file mode 100644
index b970e7a..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionDetailsViewController.xib
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7706" systemVersion="14E46" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7703"/>
-    </dependencies>
-    <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="TransactionDetailsViewController" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <connections>
-                <outlet property="tableView" destination="nqh-Hi-Wlb" id="pIM-j2-nWs"/>
-                <outlet property="view" destination="i5M-Pr-FkT" id="sfx-zR-JGt"/>
-            </connections>
-        </placeholder>
-        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="i5M-Pr-FkT">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <tableView clipsSubviews="YES" contentMode="scaleToFill" alwaysBounceVertical="YES" style="plain" separatorStyle="default" rowHeight="44" sectionHeaderHeight="22" sectionFooterHeight="22" translatesAutoresizingMaskIntoConstraints="NO" id="nqh-Hi-Wlb">
-                    <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <color key="sectionIndexBackgroundColor" red="0.28386391449999998" green="0.78515804840000003" blue="1" alpha="1" colorSpace="calibratedRGB"/>
-                    <connections>
-                        <outlet property="dataSource" destination="-1" id="w9I-Nv-d0g"/>
-                        <outlet property="delegate" destination="-1" id="x6K-t5-cUj"/>
-                    </connections>
-                </tableView>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
-            <constraints>
-                <constraint firstAttribute="trailing" secondItem="nqh-Hi-Wlb" secondAttribute="trailing" id="MDe-p9-QLG"/>
-                <constraint firstAttribute="bottom" secondItem="nqh-Hi-Wlb" secondAttribute="bottom" id="UXh-wx-Pdv"/>
-                <constraint firstItem="nqh-Hi-Wlb" firstAttribute="top" secondItem="i5M-Pr-FkT" secondAttribute="top" id="XeN-zn-wkt"/>
-                <constraint firstItem="nqh-Hi-Wlb" firstAttribute="leading" secondItem="i5M-Pr-FkT" secondAttribute="leading" id="hpX-ix-YvJ"/>
-            </constraints>
-            <simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina47"/>
-        </view>
-    </objects>
-</document>
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.swift
deleted file mode 100644
index b794052..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.swift
+++ /dev/null
@@ -1,196 +0,0 @@
-//
-//  TransactionProductDetailsViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/22/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class TransactionProductDetailsViewController: UIViewController {
-
-    @IBOutlet weak var tableView: UITableView!
-    
-    var newFrame: CGRect!
-    
-    var headerView: UIView!
-    var transactionProductImagesView: TransactionProductImagesView!
-    var transactionPurchaseDetailsView: TransactionPurchaseDetailsView!
-    var transactionProductDetailsView: UIView!
-    
-    var footerView: UIView!
-    var transactionDescriptionView: TransactionDescriptionView!
-    var transactionButtonView: UIView!
-    
-    var name = ["SKU", "Brand", "Weight (kg)", "Height (mm)", "Type of Jack"]
-    var value = ["ABCD-1234-5678-91022", "Beats Audio Version", "0.26", "203", "3.5mm"]
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        
-        let nib = UINib(nibName: "TransactionProductDetailsTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "TransactionProductDetailsIdentifier")
-    }
-    
-    override func viewWillAppear(animated: Bool) {
-        super.viewWillAppear(animated)
-        
-        loadViewsWithDetails()
-    }
-    
-    // MARK: - Table View Data Souce
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return name.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: TransactionProductDetailsTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("TransactionProductDetailsIdentifier") as! TransactionProductDetailsTableViewCell
-        
-        cell.attributeNameLabel.text = name[indexPath.row]
-        cell.attributeValueLabel.text = value[indexPath.row]
-        
-        return cell
-    }
-    
-    // MARK: - Init Views
-    
-    // MARK: HEADER
-    func getHeaderView() -> UIView {
-        if self.headerView == nil {
-            self.headerView = UIView(frame: CGRectZero)
-            self.headerView.autoresizesSubviews = false
-            self.headerView.backgroundColor = Constants.Colors.backgroundGray
-        }
-        return self.headerView
-    }
-    
-    func getTransactionProductImagesView() -> TransactionProductImagesView {
-        if self.transactionProductImagesView == nil {
-            self.transactionProductImagesView = XibHelper.puffViewWithNibName("TransactionViews", index: 4) as! TransactionProductImagesView
-            self.transactionProductImagesView.frame.size.width = self.view.frame.size.width
-        }
-        return self.transactionProductImagesView
-    }
-    
-    func getTransactionPurchaseDetailsView() -> TransactionPurchaseDetailsView {
-        if self.transactionPurchaseDetailsView == nil {
-            self.transactionPurchaseDetailsView = XibHelper.puffViewWithNibName("TransactionViews", index: 5) as! TransactionPurchaseDetailsView
-            self.transactionPurchaseDetailsView.frame.size.width = self.view.frame.size.width
-        }
-        return self.transactionPurchaseDetailsView
-    }
-    
-    func getTransactionProductDetailsView() -> UIView {
-        if self.transactionProductDetailsView == nil {
-            self.transactionProductDetailsView = UIView(frame: (CGRectMake(0, 0, self.view.frame.size.width, 40)))
-            self.transactionProductDetailsView.backgroundColor = .whiteColor()
-            
-            var textLabel = UILabel(frame: CGRectMake(8, 0, self.transactionProductDetailsView.frame.size.width - 8, self.transactionProductDetailsView.frame.size.height))
-            textLabel.text = "Product Details"
-            textLabel.textColor = .darkGrayColor()
-            textLabel.font = UIFont.systemFontOfSize(15.0)
-            
-            self.transactionProductDetailsView.addSubview(textLabel)
-        }
-        return self.transactionProductDetailsView
-    }
-    
-    // MARK: FOOTER
-    func getFooterView() -> UIView {
-        if self.footerView == nil {
-            self.footerView = UIView(frame: CGRectZero)
-            self.footerView.autoresizesSubviews = false
-            self.footerView.backgroundColor = Constants.Colors.backgroundGray
-        }
-        return self.footerView
-    }
-    
-    func getTransactionDescriptionView() -> TransactionDescriptionView {
-        if self.transactionDescriptionView == nil {
-            self.transactionDescriptionView = XibHelper.puffViewWithNibName("TransactionViews", index: 6) as! TransactionDescriptionView
-            self.transactionDescriptionView.frame.size.width = self.view.frame.size.width
-            self.transactionDescriptionView.frame.origin.y += CGFloat(20)
-        }
-        return self.transactionDescriptionView
-    }
-    
-    func getTransactionButtonView() -> UIView {
-        if self.transactionButtonView == nil {
-            self.transactionButtonView = UIView(frame: CGRectMake(0, 0, self.view.frame.size.width, 50))
-            
-            var feedbackButton: UIButton = UIButton(frame: CGRectZero)
-            feedbackButton.addTarget(self, action: "leaveFeedback", forControlEvents: .TouchUpInside)
-            feedbackButton.setTitle("LEAVE FEEDBACK FOR SELLER", forState: .Normal)
-            feedbackButton.setTitleColor(UIColor.whiteColor(), forState: .Normal)
-            feedbackButton.backgroundColor = Constants.Colors.productPrice
-            feedbackButton.titleLabel?.font = UIFont.boldSystemFontOfSize(10.0)
-            feedbackButton.sizeToFit()
-            feedbackButton.frame.size = CGSize(width: feedbackButton.frame.size.width + 20, height: 30)
-            feedbackButton.center.x = self.view.center.x
-            feedbackButton.layer.cornerRadius = feedbackButton.frame.size.height / 2
-            
-            self.transactionButtonView.addSubview(feedbackButton)
-        }
-        
-        return self.transactionButtonView
-    }
-    
-    // MARK: - Methods
-    
-    func loadViewsWithDetails() {
-        // HEADERS
-        self.getHeaderView().addSubview(self.getTransactionProductImagesView())
-        self.getHeaderView().addSubview(self.getTransactionPurchaseDetailsView())
-        self.getHeaderView().addSubview(self.getTransactionProductDetailsView())
-        
-        // FOOTERS
-        self.getFooterView().addSubview(self.getTransactionDescriptionView())
-        self.getFooterView().addSubview(self.getTransactionButtonView())
-        
-        setUpViews()
-    }
-    
-    func setUpViews() {
-        // header
-        self.setPosition(self.transactionPurchaseDetailsView, from: self.transactionProductImagesView)
-        self.setPosition(self.transactionProductDetailsView, from: self.transactionPurchaseDetailsView)
-        
-        newFrame = self.headerView.frame
-        newFrame.size.height = CGRectGetMaxY(self.transactionProductDetailsView.frame)
-        self.headerView.frame = newFrame
-        
-        self.tableView.tableHeaderView = nil
-        self.tableView.tableHeaderView = self.headerView
-        
-        // footer
-        var footerGrayColor = UIView(frame: self.view.frame)
-        footerGrayColor.backgroundColor = Constants.Colors.backgroundGray
-        self.getFooterView().addSubview(footerGrayColor)
-        
-        self.setPosition(self.transactionButtonView, from: self.transactionDescriptionView)
-        self.setPosition(footerGrayColor, from: self.transactionButtonView)
-        footerGrayColor.frame.origin.y -= 20
-        
-        newFrame = self.footerView.frame
-        newFrame.size.height = CGRectGetMaxY(self.transactionButtonView.frame)
-        self.footerView.frame = newFrame
-
-        self.tableView.tableFooterView = nil
-        self.tableView.tableFooterView = self.footerView
-    }
-    
-    func setPosition(view: UIView!, from: UIView!) {
-        newFrame = view.frame
-        newFrame.origin.y = CGRectGetMaxY(from.frame) + 20
-        view.frame = newFrame
-    }
-    
-    // MARK: - Actions
-    
-    func leaveFeedback() {
-        println("leave a feedback")
-    }
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.xib b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.xib
deleted file mode 100644
index e3719c2..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionProductDetailsViewController.xib
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7706" systemVersion="14E46" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7703"/>
-    </dependencies>
-    <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="TransactionProductDetailsViewController" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <connections>
-                <outlet property="tableView" destination="I2j-fp-DAn" id="cAB-7z-XJJ"/>
-                <outlet property="view" destination="i5M-Pr-FkT" id="sfx-zR-JGt"/>
-            </connections>
-        </placeholder>
-        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="i5M-Pr-FkT">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <tableView clipsSubviews="YES" contentMode="scaleToFill" fixedFrame="YES" alwaysBounceVertical="YES" style="plain" separatorStyle="none" allowsSelection="NO" rowHeight="45" sectionHeaderHeight="22" sectionFooterHeight="22" translatesAutoresizingMaskIntoConstraints="NO" id="I2j-fp-DAn">
-                    <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <connections>
-                        <outlet property="dataSource" destination="-1" id="fGD-Ra-Zxy"/>
-                    </connections>
-                </tableView>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
-            <simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina47"/>
-        </view>
-    </objects>
-</document>
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.swift
deleted file mode 100644
index 2de0a90..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.swift
+++ /dev/null
@@ -1,23 +0,0 @@
-//
-//  TransactionTableViewCell.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/20/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class TransactionTableViewCell: UITableViewCell {
-
-    @IBOutlet weak var transactionIdLabel: UILabel!
-    @IBOutlet weak var numberAndDateLabel: UILabel!
-    @IBOutlet weak var priceLabel: UILabel!
-
-    override func awakeFromNib() {
-        super.awakeFromNib()
-        // Initialization code
-        self.priceLabel.layer.cornerRadius = (self.priceLabel.frame.size.height / 2)
-    }
-    
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.xib b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.xib
deleted file mode 100644
index b092262..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionTableViewCell.xib
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7706" systemVersion="14E46" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7703"/>
-    </dependencies>
-    <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner"/>
-        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
-        <tableViewCell contentMode="scaleToFill" selectionStyle="default" indentationWidth="10" reuseIdentifier="TransactionIdentifier" id="KGk-i7-Jjw" customClass="TransactionTableViewCell" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="100"/>
-            <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
-            <tableViewCellContentView key="contentView" opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" tableViewCell="KGk-i7-Jjw" id="H2p-sc-9uM">
-                <rect key="frame" x="0.0" y="0.0" width="320" height="43"/>
-                <autoresizingMask key="autoresizingMask"/>
-                <subviews>
-                    <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="TID-203-553-918" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="BG9-ai-ps2">
-                        <rect key="frame" x="8" y="12" width="334" height="21"/>
-                        <constraints>
-                            <constraint firstAttribute="height" constant="21" id="0AC-Qm-C1R"/>
-                        </constraints>
-                        <fontDescription key="fontDescription" type="boldSystem" pointSize="17"/>
-                        <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                        <nil key="highlightedColor"/>
-                    </label>
-                    <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="P4,500" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="VHu-cT-2FF">
-                        <rect key="frame" x="8" y="66" width="98" height="21"/>
-                        <color key="backgroundColor" red="0.43529411759999997" green="0.20392156859999999" blue="0.52156862749999999" alpha="1" colorSpace="calibratedRGB"/>
-                        <fontDescription key="fontDescription" type="system" pointSize="17"/>
-                        <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                        <nil key="highlightedColor"/>
-                    </label>
-                    <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="e3z-72-K8Y" userLabel="arrow view">
-                        <rect key="frame" x="350" y="0.0" width="25" height="99"/>
-                        <subviews>
-                            <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="right-gray" translatesAutoresizingMaskIntoConstraints="NO" id="YAh-Y9-TIp">
-                                <rect key="frame" x="0.0" y="40" width="10" height="20"/>
-                            </imageView>
-                        </subviews>
-                        <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                        <constraints>
-                            <constraint firstAttribute="width" constant="25" id="8is-fU-ixZ"/>
-                            <constraint firstAttribute="height" constant="99" id="L5m-ex-7Q9"/>
-                        </constraints>
-                    </view>
-                    <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="I89-8h-WuF" userLabel="separator">
-                        <rect key="frame" x="0.0" y="99" width="375" height="1"/>
-                        <color key="backgroundColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                        <constraints>
-                            <constraint firstAttribute="height" constant="1" id="DO9-CG-nAr"/>
-                        </constraints>
-                    </view>
-                    <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="5 products     January 21, 2014" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="KID-Y2-zv8">
-                        <rect key="frame" x="8" y="35" width="334" height="21"/>
-                        <constraints>
-                            <constraint firstAttribute="height" constant="21" id="4zh-36-Dfb"/>
-                        </constraints>
-                        <fontDescription key="fontDescription" type="system" weight="light" pointSize="16"/>
-                        <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                        <nil key="highlightedColor"/>
-                    </label>
-                </subviews>
-                <constraints>
-                    <constraint firstItem="KID-Y2-zv8" firstAttribute="leading" secondItem="H2p-sc-9uM" secondAttribute="leading" constant="8" id="16S-oe-gv1"/>
-                    <constraint firstAttribute="trailing" secondItem="I89-8h-WuF" secondAttribute="trailing" id="1Bs-t4-b5P"/>
-                    <constraint firstItem="e3z-72-K8Y" firstAttribute="top" secondItem="H2p-sc-9uM" secondAttribute="top" id="1lg-es-AlZ"/>
-                    <constraint firstItem="e3z-72-K8Y" firstAttribute="leading" secondItem="BG9-ai-ps2" secondAttribute="trailing" constant="8" id="CLi-Wf-Mwd"/>
-                    <constraint firstAttribute="trailing" secondItem="e3z-72-K8Y" secondAttribute="trailing" id="Km8-5S-CAx"/>
-                    <constraint firstItem="e3z-72-K8Y" firstAttribute="leading" secondItem="KID-Y2-zv8" secondAttribute="trailing" constant="8" id="U3w-Ut-49c"/>
-                    <constraint firstItem="BG9-ai-ps2" firstAttribute="top" secondItem="H2p-sc-9uM" secondAttribute="top" constant="12" id="gmj-Lj-cyJ"/>
-                    <constraint firstItem="I89-8h-WuF" firstAttribute="leading" secondItem="H2p-sc-9uM" secondAttribute="leading" id="jjI-oz-3K5"/>
-                    <constraint firstItem="BG9-ai-ps2" firstAttribute="leading" secondItem="H2p-sc-9uM" secondAttribute="leading" constant="8" id="txd-PU-dzi"/>
-                    <constraint firstAttribute="bottom" secondItem="I89-8h-WuF" secondAttribute="bottom" constant="-1" id="xo5-AY-Se7"/>
-                    <constraint firstItem="KID-Y2-zv8" firstAttribute="top" secondItem="BG9-ai-ps2" secondAttribute="bottom" constant="2" id="yDQ-S9-tFU"/>
-                </constraints>
-            </tableViewCellContentView>
-            <connections>
-                <outlet property="numberAndDateLabel" destination="KID-Y2-zv8" id="EuX-Ev-Co4"/>
-                <outlet property="priceLabel" destination="VHu-cT-2FF" id="P4i-DA-KVj"/>
-                <outlet property="transactionIdLabel" destination="BG9-ai-ps2" id="wGC-CB-Qhz"/>
-            </connections>
-            <point key="canvasLocation" x="340.5" y="346"/>
-        </tableViewCell>
-    </objects>
-    <resources>
-        <image name="right-gray" width="97" height="200"/>
-    </resources>
-</document>
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.swift
deleted file mode 100644
index 7652e81..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.swift
+++ /dev/null
@@ -1,141 +0,0 @@
-//
-//  TransactionViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/20/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class TransactionViewController: UIViewController {
-
-    @IBOutlet weak var tableView: UITableView!
-    @IBOutlet weak var allView: UIView!
-    @IBOutlet weak var pendingView: UIView!
-    @IBOutlet weak var onDeliveryView: UIView!
-    @IBOutlet weak var forFeedbackView: UIView!
-    @IBOutlet weak var supportView: UIView!
-    
-    @IBOutlet weak var allImageView: UIImageView!
-    @IBOutlet weak var pendingImageView: UIImageView!
-    @IBOutlet weak var onDeliveryImageView: UIImageView!
-    @IBOutlet weak var forFeedbackImageView: UIImageView!
-    @IBOutlet weak var supportImageView: UIImageView!
-    
-    @IBOutlet weak var allLabel: UILabel!
-    @IBOutlet weak var pendingLabel: UILabel!
-    @IBOutlet weak var onDeliveryLabel: UILabel!
-    @IBOutlet weak var forFeedbackLabel: UILabel!
-    @IBOutlet weak var supportLabel: UILabel!
-    
-    var viewsInArray: [UIView] = []
-    var imagesInArray: [UIImageView] = []
-    var labelsInArray: [UILabel] = []
-    var deselectedImages: [String] = []
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        
-        let nib = UINib(nibName: "TransactionTableViewCell", bundle: nil)
-        self.tableView.registerNib(nib, forCellReuseIdentifier: "TransactionIdentifier")
-        
-        viewsInArray = [allView, pendingView, onDeliveryView, forFeedbackView, supportView]
-        imagesInArray = [allImageView, pendingImageView, onDeliveryImageView, forFeedbackImageView, supportImageView]
-        labelsInArray = [allLabel, pendingLabel, onDeliveryLabel, forFeedbackLabel, supportLabel]
-        deselectedImages = ["all", "pending", "onDelivery", "forFeedback", "support"]
-        
-        addViewsActions()
-    }
-    
-    // MARK: - Table View Data Source
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return 5
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
-        let cell: TransactionTableViewCell = self.tableView.dequeueReusableCellWithIdentifier("TransactionIdentifier") as! TransactionTableViewCell
-        
-        return cell
-    }
-
-    // MARK: - Table View Delegate
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        let transactionDetails = TransactionDetailsViewController(nibName: "TransactionDetailsViewController", bundle: nil)
-        self.navigationController?.pushViewController(transactionDetails, animated: true)
-    }
-    
-    // Actions
-    
-    func allAction(gesture: UIGestureRecognizer) {
-        if allView.tag == 0 {
-            selectView(allView, label: allLabel, imageView: allImageView, imageName: "all2")
-            deselectOtherViews(allView)
-        }
-    }
-    
-    func pendingAction(gesture: UIGestureRecognizer) {
-        if pendingView.tag == 0 {
-            selectView(pendingView, label: pendingLabel, imageView: pendingImageView, imageName: "time")
-            deselectOtherViews(pendingView)
-        }
-    }
-    
-    func onDeliveryAction(gesture: UIGestureRecognizer) {
-        if onDeliveryView.tag == 0 {
-            selectView(onDeliveryView, label: onDeliveryLabel, imageView: onDeliveryImageView, imageName: "onDelivery2")
-            deselectOtherViews(onDeliveryView)
-        }
-    }
-    
-    func forFeedbackAction(gesture: UIGestureRecognizer) {
-        if forFeedbackView.tag == 0 {
-            selectView(forFeedbackView, label: forFeedbackLabel, imageView: forFeedbackImageView, imageName: "forFeedback2")
-            deselectOtherViews(forFeedbackView)
-        }
-    }
-    
-    func supportAction(gesture: UIGestureRecognizer) {
-        if supportView.tag == 0 {
-            selectView(supportView, label: supportLabel, imageView: supportImageView, imageName: "support2")
-            deselectOtherViews(supportView)
-        }
-    }
-    
-    // Methods
-    
-    func addViewsActions() {
-        self.allView.addGestureRecognizer(tap("allAction:"))
-        self.pendingView.addGestureRecognizer(tap("pendingAction:"))
-        self.onDeliveryView.addGestureRecognizer(tap("onDeliveryAction:"))
-        self.forFeedbackView.addGestureRecognizer(tap("forFeedbackAction:"))
-        self.supportView.addGestureRecognizer(tap("supportAction:"))
-    }
-    
-    func tap(action: Selector) -> UITapGestureRecognizer {
-        let tap = UITapGestureRecognizer()
-        tap.numberOfTapsRequired = 1
-        tap.addTarget(self, action: action)
-        return tap
-    }
-    
-    func selectView(view: UIView, label: UILabel, imageView: UIImageView, imageName: String) {
-        view.backgroundColor = .whiteColor()
-        label.textColor = Constants.Colors.appTheme
-        imageView.image = UIImage(named: imageName)
-        view.tag = 1
-    }
-    
-    func deselectOtherViews(view: UIView) {
-        for i in 0..<self.viewsInArray.count {
-            if view != self.viewsInArray[i] {
-                viewsInArray[i].backgroundColor = Constants.Colors.appTheme
-                labelsInArray[i].textColor = .whiteColor()
-                imagesInArray[i].image = UIImage(named: deselectedImages[i])
-                viewsInArray[i].tag = 0
-            }
-        }
-    }
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.xib b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.xib
deleted file mode 100644
index 2397a40..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViewController.xib
+++ /dev/null
@@ -1,185 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7706" systemVersion="14E46" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7703"/>
-    </dependencies>
-    <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="TransactionViewController" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <connections>
-                <outlet property="allImageView" destination="1LG-ES-22e" id="CUu-rv-hiX"/>
-                <outlet property="allLabel" destination="Xv1-iT-0na" id="4hv-QW-sTE"/>
-                <outlet property="allView" destination="67p-wN-uJa" id="rAO-5S-mhl"/>
-                <outlet property="forFeedbackImageView" destination="2xO-RK-Eta" id="avh-Wk-GrR"/>
-                <outlet property="forFeedbackLabel" destination="7Sv-7A-H5I" id="b6x-AH-gvV"/>
-                <outlet property="forFeedbackView" destination="mGm-4A-0gd" id="X8E-Sk-WuI"/>
-                <outlet property="onDeliveryImageView" destination="0BV-9b-3ee" id="tVb-rG-v3W"/>
-                <outlet property="onDeliveryLabel" destination="vdH-na-zaJ" id="GCh-PV-d5K"/>
-                <outlet property="onDeliveryView" destination="M4H-ai-uXl" id="0mA-SP-cWy"/>
-                <outlet property="pendingImageView" destination="SIU-sX-9DQ" id="AGL-Vx-OHc"/>
-                <outlet property="pendingLabel" destination="Vri-MS-s7W" id="Hur-hi-1z9"/>
-                <outlet property="pendingView" destination="sqe-Ue-eQ7" id="ATY-Ff-Gdj"/>
-                <outlet property="supportImageView" destination="sPq-Rs-D4a" id="Ttt-hb-QhP"/>
-                <outlet property="supportLabel" destination="eJh-XJ-zsM" id="PTp-NI-FaJ"/>
-                <outlet property="supportView" destination="LrB-uM-ar0" id="wV8-yN-Ky9"/>
-                <outlet property="tableView" destination="Szc-kr-kRl" id="gh8-e4-Io9"/>
-                <outlet property="view" destination="i5M-Pr-FkT" id="sfx-zR-JGt"/>
-            </connections>
-        </placeholder>
-        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="i5M-Pr-FkT">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="xR4-z3-FXA">
-                    <rect key="frame" x="0.0" y="0.0" width="375" height="70"/>
-                    <subviews>
-                        <view tag="1" contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="67p-wN-uJa" userLabel="All">
-                            <rect key="frame" x="0.0" y="0.0" width="75" height="70"/>
-                            <subviews>
-                                <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="all2" translatesAutoresizingMaskIntoConstraints="NO" id="1LG-ES-22e">
-                                    <rect key="frame" x="27" y="11" width="20" height="25"/>
-                                </imageView>
-                                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="ALL" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Xv1-iT-0na">
-                                    <rect key="frame" x="16" y="36" width="42" height="21"/>
-                                    <fontDescription key="fontDescription" type="boldSystem" pointSize="9"/>
-                                    <color key="textColor" red="0.43529411759999997" green="0.20392156859999999" blue="0.52156862749999999" alpha="1" colorSpace="calibratedRGB"/>
-                                    <nil key="highlightedColor"/>
-                                </label>
-                            </subviews>
-                            <constraints>
-                                <constraint firstAttribute="width" constant="75" id="XGS-8K-Dej"/>
-                                <constraint firstAttribute="height" constant="70" id="v7p-Nq-qCh"/>
-                            </constraints>
-                        </view>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="sqe-Ue-eQ7" userLabel="Pending">
-                            <rect key="frame" x="75" y="0.0" width="75" height="70"/>
-                            <subviews>
-                                <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="pending" translatesAutoresizingMaskIntoConstraints="NO" id="SIU-sX-9DQ">
-                                    <rect key="frame" x="26" y="11" width="23" height="23"/>
-                                </imageView>
-                                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="PENDING" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Vri-MS-s7W">
-                                    <rect key="frame" x="14" y="35" width="46" height="21"/>
-                                    <fontDescription key="fontDescription" type="boldSystem" pointSize="9"/>
-                                    <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                                    <nil key="highlightedColor"/>
-                                </label>
-                            </subviews>
-                            <color key="backgroundColor" red="0.43529411759999997" green="0.20392156859999999" blue="0.52156862749999999" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="70" id="iej-eK-ifC"/>
-                                <constraint firstAttribute="width" constant="75" id="yBG-DV-eGo"/>
-                            </constraints>
-                        </view>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="M4H-ai-uXl" userLabel="On Delivery">
-                            <rect key="frame" x="150" y="0.0" width="75" height="70"/>
-                            <subviews>
-                                <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="onDelivery" translatesAutoresizingMaskIntoConstraints="NO" id="0BV-9b-3ee">
-                                    <rect key="frame" x="25" y="13" width="25" height="20"/>
-                                </imageView>
-                                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="ON-DELIVERY" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="vdH-na-zaJ">
-                                    <rect key="frame" x="3" y="35" width="68" height="21"/>
-                                    <fontDescription key="fontDescription" type="boldSystem" pointSize="9"/>
-                                    <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                                    <nil key="highlightedColor"/>
-                                </label>
-                            </subviews>
-                            <color key="backgroundColor" red="0.43529411759999997" green="0.20392156859999999" blue="0.52156862749999999" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="width" constant="75" id="gyX-1r-dzJ"/>
-                                <constraint firstAttribute="height" constant="70" id="w6n-QJ-r7x"/>
-                            </constraints>
-                        </view>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="mGm-4A-0gd" userLabel="For Feedback">
-                            <rect key="frame" x="225" y="0.0" width="75" height="70"/>
-                            <subviews>
-                                <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="forFeedback" translatesAutoresizingMaskIntoConstraints="NO" id="2xO-RK-Eta">
-                                    <rect key="frame" x="26" y="12" width="23" height="23"/>
-                                </imageView>
-                                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="FOR FEEDBACK" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="7Sv-7A-H5I">
-                                    <rect key="frame" x="-2" y="36" width="79" height="21"/>
-                                    <fontDescription key="fontDescription" type="boldSystem" pointSize="9"/>
-                                    <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                                    <nil key="highlightedColor"/>
-                                </label>
-                            </subviews>
-                            <color key="backgroundColor" red="0.43529411759999997" green="0.20392156859999999" blue="0.52156862749999999" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="70" id="TpL-eR-s5j"/>
-                                <constraint firstAttribute="width" constant="75" id="fGh-pK-Mn0"/>
-                            </constraints>
-                        </view>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="LrB-uM-ar0" userLabel="Support">
-                            <rect key="frame" x="300" y="0.0" width="75" height="70"/>
-                            <subviews>
-                                <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="support" translatesAutoresizingMaskIntoConstraints="NO" id="sPq-Rs-D4a">
-                                    <rect key="frame" x="23" y="11" width="23" height="23"/>
-                                </imageView>
-                                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="SUPPORT" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="eJh-XJ-zsM">
-                                    <rect key="frame" x="10" y="35" width="49" height="21"/>
-                                    <fontDescription key="fontDescription" type="boldSystem" pointSize="9"/>
-                                    <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                                    <nil key="highlightedColor"/>
-                                </label>
-                            </subviews>
-                            <color key="backgroundColor" red="0.43529411759999997" green="0.20392156859999999" blue="0.52156862749999999" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="70" id="Taa-5y-A3M"/>
-                                <constraint firstAttribute="width" constant="75" id="vHu-HP-gZy"/>
-                            </constraints>
-                        </view>
-                    </subviews>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <constraints>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="width" secondItem="LrB-uM-ar0" secondAttribute="width" id="0o2-jd-QE3"/>
-                        <constraint firstAttribute="trailing" secondItem="LrB-uM-ar0" secondAttribute="trailing" id="13k-mi-Zh2"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="top" secondItem="xR4-z3-FXA" secondAttribute="top" id="GLI-Bl-31A"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="width" secondItem="M4H-ai-uXl" secondAttribute="width" id="GV1-Ih-XE2"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="width" secondItem="mGm-4A-0gd" secondAttribute="width" id="LcE-bL-P5M"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="height" secondItem="LrB-uM-ar0" secondAttribute="height" id="Ljm-NS-NAT"/>
-                        <constraint firstItem="M4H-ai-uXl" firstAttribute="top" secondItem="xR4-z3-FXA" secondAttribute="top" id="M1S-6a-E1f"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="height" secondItem="sqe-Ue-eQ7" secondAttribute="height" id="PrK-rB-z0y"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="leading" secondItem="xR4-z3-FXA" secondAttribute="leading" id="SZe-zV-4Gk"/>
-                        <constraint firstItem="mGm-4A-0gd" firstAttribute="leading" secondItem="M4H-ai-uXl" secondAttribute="trailing" id="Sqk-JZ-hHQ"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="width" secondItem="sqe-Ue-eQ7" secondAttribute="width" id="TRq-KV-eY9"/>
-                        <constraint firstItem="LrB-uM-ar0" firstAttribute="top" secondItem="xR4-z3-FXA" secondAttribute="top" id="TyG-1r-1rH"/>
-                        <constraint firstAttribute="height" constant="70" id="enk-xb-gD2"/>
-                        <constraint firstItem="sqe-Ue-eQ7" firstAttribute="leading" secondItem="67p-wN-uJa" secondAttribute="trailing" id="epy-22-69f"/>
-                        <constraint firstItem="M4H-ai-uXl" firstAttribute="leading" secondItem="sqe-Ue-eQ7" secondAttribute="trailing" id="j06-Cn-mQL"/>
-                        <constraint firstItem="LrB-uM-ar0" firstAttribute="leading" secondItem="mGm-4A-0gd" secondAttribute="trailing" id="pAo-3P-5ha"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="height" secondItem="mGm-4A-0gd" secondAttribute="height" id="tqp-oi-0Ot"/>
-                        <constraint firstItem="mGm-4A-0gd" firstAttribute="top" secondItem="xR4-z3-FXA" secondAttribute="top" id="w6K-aG-yB2"/>
-                        <constraint firstItem="67p-wN-uJa" firstAttribute="height" secondItem="M4H-ai-uXl" secondAttribute="height" id="xpd-uw-Ajf"/>
-                        <constraint firstItem="sqe-Ue-eQ7" firstAttribute="top" secondItem="xR4-z3-FXA" secondAttribute="top" id="znG-AA-J2f"/>
-                    </constraints>
-                </view>
-                <tableView clipsSubviews="YES" contentMode="scaleToFill" alwaysBounceVertical="YES" style="plain" separatorStyle="default" rowHeight="100" sectionHeaderHeight="22" sectionFooterHeight="22" translatesAutoresizingMaskIntoConstraints="NO" id="Szc-kr-kRl">
-                    <rect key="frame" x="0.0" y="70" width="375" height="597"/>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <connections>
-                        <outlet property="dataSource" destination="-1" id="Hkf-0a-BYE"/>
-                        <outlet property="delegate" destination="-1" id="VA8-7u-RVf"/>
-                    </connections>
-                </tableView>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
-            <constraints>
-                <constraint firstItem="xR4-z3-FXA" firstAttribute="top" secondItem="i5M-Pr-FkT" secondAttribute="top" id="2Ce-nk-JiQ"/>
-                <constraint firstItem="Szc-kr-kRl" firstAttribute="leading" secondItem="i5M-Pr-FkT" secondAttribute="leading" id="8d5-2x-TLn"/>
-                <constraint firstItem="xR4-z3-FXA" firstAttribute="leading" secondItem="i5M-Pr-FkT" secondAttribute="leading" id="Dss-6V-pYu"/>
-                <constraint firstItem="Szc-kr-kRl" firstAttribute="top" secondItem="xR4-z3-FXA" secondAttribute="bottom" id="O5F-O8-iLi"/>
-                <constraint firstAttribute="bottom" secondItem="Szc-kr-kRl" secondAttribute="bottom" id="YDK-Yc-7di"/>
-                <constraint firstAttribute="trailing" secondItem="xR4-z3-FXA" secondAttribute="trailing" id="iaL-dq-5wj"/>
-                <constraint firstAttribute="trailing" secondItem="Szc-kr-kRl" secondAttribute="trailing" id="rmY-HG-XPC"/>
-            </constraints>
-            <simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina47"/>
-            <point key="canvasLocation" x="226.5" y="240.5"/>
-        </view>
-    </objects>
-    <resources>
-        <image name="all2" width="169" height="200"/>
-        <image name="forFeedback" width="194" height="200"/>
-        <image name="onDelivery" width="200" height="156"/>
-        <image name="pending" width="200" height="200"/>
-        <image name="support" width="200" height="200"/>
-    </resources>
-</document>
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.swift
deleted file mode 100644
index 9b08a26..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.swift
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  TransactionViews.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Rj Constantino on 8/22/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class TransactionViews: UIViewController {
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-
-        // Do any additional setup after loading the view.
-    }
-
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-
-    /*
-    // MARK: - Navigation
-
-    // In a storyboard-based application, you will often want to do a little preparation before navigation
-    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
-        // Get the new view controller using segue.destinationViewController.
-        // Pass the selected object to the new view controller.
-    }
-    */
-
-}
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.xib b/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.xib
deleted file mode 100644
index 678a843..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/TransactionViews.xib
+++ /dev/null
@@ -1,804 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7706" systemVersion="14E46" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7703"/>
-    </dependencies>
-    <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="TransactionViews" customModule="YiLinkerOnlineBuyer" customModuleProvider="target"/>
-        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="5sJ-ab-PMa" userLabel="Transaction Id" customClass="TransactionIdView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="90"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="5 products" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="CCw-xJ-B0T">
-                    <rect key="frame" x="8" y="49" width="359" height="21"/>
-                    <constraints>
-                        <constraint firstAttribute="height" constant="21" id="6UR-xb-8rv"/>
-                    </constraints>
-                    <fontDescription key="fontDescription" type="system" weight="thin" pointSize="20"/>
-                    <color key="textColor" cocoaTouchSystemColor="darkTextColor"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="TID-203-553-918" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="xn2-ck-axI">
-                    <rect key="frame" x="8" y="20" width="359" height="21"/>
-                    <constraints>
-                        <constraint firstAttribute="height" constant="21" id="XKD-09-eE2"/>
-                    </constraints>
-                    <fontDescription key="fontDescription" type="boldSystem" pointSize="20"/>
-                    <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-            <constraints>
-                <constraint firstAttribute="trailing" secondItem="xn2-ck-axI" secondAttribute="trailing" constant="8" id="6k1-ex-NCF"/>
-                <constraint firstItem="xn2-ck-axI" firstAttribute="top" secondItem="5sJ-ab-PMa" secondAttribute="top" constant="20" id="IC4-Gk-JHG"/>
-                <constraint firstItem="CCw-xJ-B0T" firstAttribute="top" secondItem="xn2-ck-axI" secondAttribute="bottom" constant="8" id="NmN-qI-mkA"/>
-                <constraint firstItem="CCw-xJ-B0T" firstAttribute="leading" secondItem="5sJ-ab-PMa" secondAttribute="leading" constant="8" id="gWk-7T-4IQ"/>
-                <constraint firstAttribute="trailing" secondItem="CCw-xJ-B0T" secondAttribute="trailing" constant="8" id="m0E-CP-qkK"/>
-                <constraint firstItem="xn2-ck-axI" firstAttribute="leading" secondItem="5sJ-ab-PMa" secondAttribute="leading" constant="8" id="uie-zm-Ypu"/>
-            </constraints>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <connections>
-                <outlet property="numberOfProductsLabel" destination="CCw-xJ-B0T" id="eNA-62-8Qa"/>
-                <outlet property="transactionIdLabel" destination="xn2-ck-axI" id="F5S-KW-N0r"/>
-            </connections>
-            <point key="canvasLocation" x="361.5" y="-151"/>
-        </view>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="cNM-mw-Ly7" userLabel="Transaction Details" customClass="TransactionDetailsView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="288"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="DETAILS" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Cyc-a0-SVg">
-                    <rect key="frame" x="8" y="0.0" width="67" height="37"/>
-                    <constraints>
-                        <constraint firstAttribute="width" constant="67" id="300-JJ-2Y2"/>
-                        <constraint firstAttribute="height" constant="37" id="Jvu-Ky-5np"/>
-                    </constraints>
-                    <fontDescription key="fontDescription" type="system" pointSize="12"/>
-                    <color key="textColor" white="0.33333333333333331" alpha="1" colorSpace="calibratedWhite"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="hLe-9L-Eym">
-                    <rect key="frame" x="0.0" y="36" width="375" height="252"/>
-                    <subviews>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Status" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="sNJ-Cr-Fca">
-                            <rect key="frame" x="8" y="0.0" width="54" height="37"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="NEW ORDER" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="r0t-sZ-res">
-                            <rect key="frame" x="251" y="8" width="113" height="21"/>
-                            <color key="backgroundColor" red="0.87843137250000003" green="0.62352941179999999" blue="0.035294117649999998" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="width" priority="500" constant="113" id="Im1-dP-cVw"/>
-                                <constraint firstAttribute="height" constant="21" id="uAh-ac-Obq"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="boldSystem" pointSize="13"/>
-                            <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="DBP-d3-FFt">
-                            <rect key="frame" x="0.0" y="36" width="375" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="50e-LA-YSt"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Payment Type" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="DKl-6I-Lxr">
-                            <rect key="frame" x="8" y="36" width="101" height="37"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="YiLinker Wallet" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="n0j-Cp-vbq">
-                            <rect key="frame" x="236" y="36" width="131" height="37"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="37" id="7Zf-yl-Ilu"/>
-                                <constraint firstAttribute="width" priority="500" constant="131" id="QTw-78-djT"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="zdI-YP-Yve">
-                            <rect key="frame" x="0.0" y="72" width="375" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="1m7-nd-vku"/>
-                                <constraint firstAttribute="height" relation="greaterThanOrEqual" constant="1" id="2CA-dg-6tt"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Date Created" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="V4v-yD-xAF">
-                            <rect key="frame" x="8" y="72" width="102" height="37"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="January 21, 2016" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="fKS-m9-Umv">
-                            <rect key="frame" x="236" y="72" width="131" height="37"/>
-                            <constraints>
-                                <constraint firstAttribute="width" constant="131" id="SKb-Tg-try"/>
-                                <constraint firstAttribute="height" constant="37" id="j29-YG-zAB"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="H9s-gu-IdM">
-                            <rect key="frame" x="0.0" y="108" width="375" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="PFQ-0h-hFX"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Total Quantity" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="6Cg-pb-bpa">
-                            <rect key="frame" x="8" y="108" width="106" height="37"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="230" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="ti5-qQ-tXu">
-                            <rect key="frame" x="236" y="108" width="131" height="37"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="37" id="5sk-K7-9On"/>
-                                <constraint firstAttribute="width" constant="131" id="BX8-tb-B0P"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="Pac-fx-ROp">
-                            <rect key="frame" x="0.0" y="144" width="375" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="1gn-tM-VNV"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Total Unit Cost" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="McM-dh-3sc">
-                            <rect key="frame" x="8" y="144" width="114" height="37"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="35,999" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="fdg-L4-usM">
-                            <rect key="frame" x="236" y="144" width="131" height="37"/>
-                            <constraints>
-                                <constraint firstAttribute="width" constant="131" id="4WA-Nx-QIt"/>
-                                <constraint firstAttribute="height" constant="37" id="ymZ-K9-EIs"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="NzJ-To-ZZ3">
-                            <rect key="frame" x="0.0" y="180" width="375" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="ehL-wP-GcP"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Shipping Fee" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="BHx-rn-7Ju">
-                            <rect key="frame" x="8" y="180" width="101" height="37"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="15,999" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Dpg-kW-cES">
-                            <rect key="frame" x="236" y="180" width="131" height="37"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="37" id="LFD-Kt-ezL"/>
-                                <constraint firstAttribute="width" constant="131" id="jaq-uL-NEZ"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="yvF-Mf-Lji">
-                            <rect key="frame" x="0.0" y="216" width="375" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="YRT-Ht-XYv"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="51,998" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="K5P-w6-iC7">
-                            <rect key="frame" x="236" y="216" width="131" height="36"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="36" id="A3H-jE-sMs"/>
-                                <constraint firstAttribute="width" constant="131" id="asy-lq-Vog"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="thin" pointSize="25"/>
-                            <color key="textColor" red="0.50122048590000001" green="0.0" blue="0.7202493687" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Total Cost" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Y1c-2V-BTY">
-                            <rect key="frame" x="8" y="216" width="78" height="36"/>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                    </subviews>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <constraints>
-                        <constraint firstItem="n0j-Cp-vbq" firstAttribute="top" secondItem="r0t-sZ-res" secondAttribute="bottom" constant="7" id="0r0-kH-BcW"/>
-                        <constraint firstItem="fKS-m9-Umv" firstAttribute="top" secondItem="DBP-d3-FFt" secondAttribute="bottom" constant="35" id="120-uR-a7F"/>
-                        <constraint firstAttribute="trailing" secondItem="fKS-m9-Umv" secondAttribute="trailing" constant="8" id="1UW-hM-abg"/>
-                        <constraint firstItem="H9s-gu-IdM" firstAttribute="leading" secondItem="hLe-9L-Eym" secondAttribute="leading" id="3Zp-Qf-qox"/>
-                        <constraint firstItem="yvF-Mf-Lji" firstAttribute="leading" secondItem="hLe-9L-Eym" secondAttribute="leading" id="7EB-jq-mdV"/>
-                        <constraint firstItem="fdg-L4-usM" firstAttribute="top" secondItem="H9s-gu-IdM" secondAttribute="bottom" constant="35" id="DiI-Sc-AzK"/>
-                        <constraint firstItem="DBP-d3-FFt" firstAttribute="top" secondItem="r0t-sZ-res" secondAttribute="bottom" constant="7" id="H2w-TL-V6i"/>
-                        <constraint firstItem="ti5-qQ-tXu" firstAttribute="top" secondItem="zdI-YP-Yve" secondAttribute="bottom" constant="35" id="I6n-Iw-Ry3"/>
-                        <constraint firstAttribute="trailing" secondItem="NzJ-To-ZZ3" secondAttribute="trailing" id="MZQ-cZ-Xya"/>
-                        <constraint firstAttribute="trailing" secondItem="ti5-qQ-tXu" secondAttribute="trailing" constant="8" id="PBL-qy-JNf"/>
-                        <constraint firstAttribute="trailing" secondItem="Pac-fx-ROp" secondAttribute="trailing" id="Qae-Ba-BH7"/>
-                        <constraint firstItem="zdI-YP-Yve" firstAttribute="top" secondItem="DBP-d3-FFt" secondAttribute="bottom" constant="35" id="RcR-p4-6in"/>
-                        <constraint firstItem="Pac-fx-ROp" firstAttribute="leading" secondItem="hLe-9L-Eym" secondAttribute="leading" id="Vo1-yp-M2w"/>
-                        <constraint firstAttribute="trailing" secondItem="Dpg-kW-cES" secondAttribute="trailing" constant="8" id="Ydi-YL-PvN"/>
-                        <constraint firstItem="DBP-d3-FFt" firstAttribute="leading" secondItem="hLe-9L-Eym" secondAttribute="leading" id="aSE-WB-6Md"/>
-                        <constraint firstItem="NzJ-To-ZZ3" firstAttribute="top" secondItem="Pac-fx-ROp" secondAttribute="bottom" constant="35" id="aWU-Ei-aQs"/>
-                        <constraint firstItem="Pac-fx-ROp" firstAttribute="top" secondItem="H9s-gu-IdM" secondAttribute="bottom" constant="35" id="d1K-MJ-VBq"/>
-                        <constraint firstAttribute="trailing" secondItem="yvF-Mf-Lji" secondAttribute="trailing" id="dgh-FL-qtu"/>
-                        <constraint firstAttribute="trailing" secondItem="fdg-L4-usM" secondAttribute="trailing" constant="8" id="fni-ao-UM4"/>
-                        <constraint firstAttribute="trailing" secondItem="K5P-w6-iC7" secondAttribute="trailing" constant="8" id="fqi-Wv-X1s"/>
-                        <constraint firstItem="zdI-YP-Yve" firstAttribute="top" secondItem="DBP-d3-FFt" secondAttribute="bottom" constant="35" id="hZX-bU-j08"/>
-                        <constraint firstItem="zdI-YP-Yve" firstAttribute="leading" secondItem="hLe-9L-Eym" secondAttribute="leading" id="iEK-sx-YOq"/>
-                        <constraint firstItem="H9s-gu-IdM" firstAttribute="top" secondItem="zdI-YP-Yve" secondAttribute="bottom" constant="35" id="lA0-Zj-jAs"/>
-                        <constraint firstItem="Dpg-kW-cES" firstAttribute="top" secondItem="Pac-fx-ROp" secondAttribute="bottom" constant="35" id="m5J-EU-Sq6"/>
-                        <constraint firstAttribute="trailing" secondItem="n0j-Cp-vbq" secondAttribute="trailing" constant="8" id="meR-w8-LJh"/>
-                        <constraint firstAttribute="trailing" secondItem="zdI-YP-Yve" secondAttribute="trailing" id="meZ-m1-m15"/>
-                        <constraint firstAttribute="trailing" secondItem="H9s-gu-IdM" secondAttribute="trailing" id="omv-Ck-tKR"/>
-                        <constraint firstItem="r0t-sZ-res" firstAttribute="top" secondItem="hLe-9L-Eym" secondAttribute="top" constant="8" id="qM0-kN-9fQ"/>
-                        <constraint firstAttribute="trailing" secondItem="DBP-d3-FFt" secondAttribute="trailing" id="qb9-JA-snz"/>
-                        <constraint firstAttribute="trailing" secondItem="r0t-sZ-res" secondAttribute="trailing" constant="11" id="sHG-Zh-uhA"/>
-                        <constraint firstItem="NzJ-To-ZZ3" firstAttribute="leading" secondItem="hLe-9L-Eym" secondAttribute="leading" id="t2L-k3-RGF"/>
-                        <constraint firstAttribute="trailing" secondItem="zdI-YP-Yve" secondAttribute="trailing" id="tEi-ad-U1S"/>
-                        <constraint firstItem="K5P-w6-iC7" firstAttribute="top" secondItem="NzJ-To-ZZ3" secondAttribute="bottom" constant="35" id="tkl-8N-Vuj"/>
-                        <constraint firstItem="yvF-Mf-Lji" firstAttribute="top" secondItem="NzJ-To-ZZ3" secondAttribute="bottom" constant="35" id="wY5-xy-5II"/>
-                    </constraints>
-                </view>
-            </subviews>
-            <constraints>
-                <constraint firstAttribute="bottom" secondItem="hLe-9L-Eym" secondAttribute="bottom" id="2QZ-Zs-Ywn"/>
-                <constraint firstItem="hLe-9L-Eym" firstAttribute="top" secondItem="cNM-mw-Ly7" secondAttribute="top" constant="36" id="7JB-sp-YlR"/>
-                <constraint firstAttribute="trailing" secondItem="hLe-9L-Eym" secondAttribute="trailing" id="FeD-bD-m0Q"/>
-                <constraint firstItem="Cyc-a0-SVg" firstAttribute="leading" secondItem="cNM-mw-Ly7" secondAttribute="leading" constant="8" id="K9l-Pa-801"/>
-                <constraint firstItem="hLe-9L-Eym" firstAttribute="leading" secondItem="cNM-mw-Ly7" secondAttribute="leading" id="QTZ-LD-7ZP"/>
-                <constraint firstItem="Cyc-a0-SVg" firstAttribute="top" secondItem="cNM-mw-Ly7" secondAttribute="top" id="Sr5-SJ-DiS"/>
-            </constraints>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <connections>
-                <outlet property="dateCreatedLabel" destination="fKS-m9-Umv" id="PVH-7j-NwS"/>
-                <outlet property="paymentTypeLabel" destination="n0j-Cp-vbq" id="yVy-bo-wYB"/>
-                <outlet property="quantityLabel" destination="ti5-qQ-tXu" id="4OO-bZ-nuS"/>
-                <outlet property="shippingFeeLabel" destination="Dpg-kW-cES" id="3HQ-UU-Ygv"/>
-                <outlet property="statusLabel" destination="r0t-sZ-res" id="iyh-33-xrU"/>
-                <outlet property="totalCostLabel" destination="K5P-w6-iC7" id="uhZ-4K-TdR"/>
-                <outlet property="unitCostLabel" destination="fdg-L4-usM" id="56Y-k6-FWr"/>
-            </connections>
-            <point key="canvasLocation" x="361.5" y="92"/>
-        </view>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="NrC-nd-xMW" userLabel="Transaction Seller" customClass="TransactionSellerView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="314"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="SELLER" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="yxw-Sz-0np">
-                    <rect key="frame" x="8" y="20" width="63" height="37"/>
-                    <constraints>
-                        <constraint firstAttribute="height" constant="37" id="WPh-Ip-whL"/>
-                        <constraint firstAttribute="width" constant="63" id="p4b-gl-jTZ"/>
-                    </constraints>
-                    <fontDescription key="fontDescription" type="system" pointSize="12"/>
-                    <color key="textColor" white="0.33333333333333331" alpha="1" colorSpace="calibratedWhite"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="y3R-kk-mc8">
-                    <rect key="frame" x="0.0" y="57" width="375" height="257"/>
-                    <subviews>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="name" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="0Mm-CP-txf">
-                            <rect key="frame" x="6" y="10" width="246" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="oOp-8H-DkR"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" pointSize="14"/>
-                            <color key="textColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="address" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="fad-nH-1VS">
-                            <rect key="frame" x="8" y="71" width="355" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="T05-s3-QLe"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" pointSize="14"/>
-                            <color key="textColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Bogz Borja" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="6yG-3a-jk9">
-                            <rect key="frame" x="6" y="29" width="246" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="AJI-Eq-kiV"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="fZN-BE-opv">
-                            <rect key="frame" x="8" y="60" width="367" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="cpD-5J-sFZ"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" lineBreakMode="tailTruncation" numberOfLines="5" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="eub-7M-xgI">
-                            <rect key="frame" x="8" y="90" width="355" height="86"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="86" id="dkQ-Ge-FFv"/>
-                            </constraints>
-                            <string key="text">8C Marc 2000 Tower,
-1975 Taft Avenue,
-Malate, Manila 1004,
-Phiippines</string>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="Wfb-KA-LPT">
-                            <rect key="frame" x="8" y="186" width="367" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="AAF-cZ-V6U"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="contact number" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="ZSN-H5-vw1">
-                            <rect key="frame" x="10" y="197" width="242" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="cMy-cv-Wyz"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" pointSize="14"/>
-                            <color key="textColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="+63 (0912) 431 985" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="DW3-53-jF9">
-                            <rect key="frame" x="8" y="216" width="244" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="hWB-qe-89c"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <button opaque="NO" clipsSubviews="YES" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="FDj-gI-mo0">
-                            <rect key="frame" x="260" y="18" width="104" height="24"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="24" id="3eT-9K-2k2"/>
-                                <constraint firstAttribute="width" constant="104" id="USt-Pj-Prj"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" pointSize="15"/>
-                            <state key="normal" title="MESSAGE">
-                                <color key="titleColor" red="0.50122048590000001" green="0.0" blue="0.7202493687" alpha="1" colorSpace="calibratedRGB"/>
-                                <color key="titleShadowColor" white="0.5" alpha="1" colorSpace="calibratedWhite"/>
-                            </state>
-                        </button>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="sms" translatesAutoresizingMaskIntoConstraints="NO" id="WmQ-cD-Nsl">
-                            <rect key="frame" x="303" y="207" width="20" height="30"/>
-                            <constraints>
-                                <constraint firstAttribute="width" constant="20" id="BCg-vx-h5Q"/>
-                                <constraint firstAttribute="height" constant="30" id="CPW-Y6-SJM"/>
-                            </constraints>
-                        </imageView>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="call-gray" translatesAutoresizingMaskIntoConstraints="NO" id="gTB-kz-5PX">
-                            <rect key="frame" x="338" y="209" width="25" height="25"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="25" id="1DC-re-c3z"/>
-                                <constraint firstAttribute="width" constant="25" id="M8C-cQ-Lfj"/>
-                            </constraints>
-                        </imageView>
-                    </subviews>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <constraints>
-                        <constraint firstAttribute="trailing" secondItem="gTB-kz-5PX" secondAttribute="trailing" constant="12" id="0O8-ab-JnK"/>
-                        <constraint firstItem="0Mm-CP-txf" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="6" id="10o-ua-dJC"/>
-                        <constraint firstItem="Wfb-KA-LPT" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="8" id="6HB-UA-SUq"/>
-                        <constraint firstItem="WmQ-cD-Nsl" firstAttribute="leading" secondItem="ZSN-H5-vw1" secondAttribute="trailing" constant="51" id="6Os-QE-4yk"/>
-                        <constraint firstItem="6yG-3a-jk9" firstAttribute="top" secondItem="y3R-kk-mc8" secondAttribute="top" constant="29" id="7Bv-PK-yZP"/>
-                        <constraint firstItem="FDj-gI-mo0" firstAttribute="leading" secondItem="6yG-3a-jk9" secondAttribute="trailing" constant="8" id="8Lp-9z-4VG"/>
-                        <constraint firstItem="WmQ-cD-Nsl" firstAttribute="leading" secondItem="DW3-53-jF9" secondAttribute="trailing" constant="51" id="DM0-Gf-6CH"/>
-                        <constraint firstItem="6yG-3a-jk9" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="6" id="DvD-LH-8gI"/>
-                        <constraint firstItem="ZSN-H5-vw1" firstAttribute="top" secondItem="Wfb-KA-LPT" secondAttribute="bottom" constant="10" id="EVq-EU-ayH"/>
-                        <constraint firstItem="fZN-BE-opv" firstAttribute="top" secondItem="6yG-3a-jk9" secondAttribute="bottom" constant="10" id="G6Y-0f-n1m"/>
-                        <constraint firstItem="Wfb-KA-LPT" firstAttribute="top" secondItem="eub-7M-xgI" secondAttribute="bottom" constant="10" id="GEU-5r-XuI"/>
-                        <constraint firstItem="eub-7M-xgI" firstAttribute="top" secondItem="fZN-BE-opv" secondAttribute="bottom" constant="29" id="Gqv-pC-3zN"/>
-                        <constraint firstItem="gTB-kz-5PX" firstAttribute="top" secondItem="Wfb-KA-LPT" secondAttribute="bottom" constant="22" id="Hco-ly-eYL"/>
-                        <constraint firstItem="eub-7M-xgI" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="8" id="HsU-U1-d8b"/>
-                        <constraint firstAttribute="trailing" secondItem="eub-7M-xgI" secondAttribute="trailing" constant="12" id="Hst-5o-gBf"/>
-                        <constraint firstItem="ZSN-H5-vw1" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="10" id="Ie1-jo-IOk"/>
-                        <constraint firstItem="gTB-kz-5PX" firstAttribute="leading" secondItem="WmQ-cD-Nsl" secondAttribute="trailing" constant="15" id="Iv1-rh-QLp"/>
-                        <constraint firstAttribute="trailing" secondItem="fad-nH-1VS" secondAttribute="trailing" constant="12" id="LeK-l8-r4K"/>
-                        <constraint firstItem="DW3-53-jF9" firstAttribute="top" secondItem="Wfb-KA-LPT" secondAttribute="bottom" constant="29" id="LhP-2P-QqP"/>
-                        <constraint firstItem="FDj-gI-mo0" firstAttribute="top" secondItem="y3R-kk-mc8" secondAttribute="top" constant="18" id="PhL-Gg-A8e"/>
-                        <constraint firstItem="0Mm-CP-txf" firstAttribute="top" secondItem="y3R-kk-mc8" secondAttribute="top" constant="10" id="PwM-cV-6UQ"/>
-                        <constraint firstItem="fZN-BE-opv" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="8" id="Rk2-LY-aCM"/>
-                        <constraint firstAttribute="trailing" secondItem="fZN-BE-opv" secondAttribute="trailing" id="TTx-mZ-1mD"/>
-                        <constraint firstAttribute="trailing" secondItem="Wfb-KA-LPT" secondAttribute="trailing" id="bDM-bK-Chc"/>
-                        <constraint firstItem="fad-nH-1VS" firstAttribute="top" secondItem="fZN-BE-opv" secondAttribute="bottom" constant="10" id="bR1-r9-C1G"/>
-                        <constraint firstItem="FDj-gI-mo0" firstAttribute="leading" secondItem="0Mm-CP-txf" secondAttribute="trailing" constant="8" id="dhL-0l-PHf"/>
-                        <constraint firstItem="fad-nH-1VS" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="8" id="fs2-tw-pzK"/>
-                        <constraint firstItem="DW3-53-jF9" firstAttribute="leading" secondItem="y3R-kk-mc8" secondAttribute="leading" constant="8" id="jfB-Pd-IZI"/>
-                        <constraint firstItem="WmQ-cD-Nsl" firstAttribute="top" secondItem="Wfb-KA-LPT" secondAttribute="bottom" constant="20" id="s13-d3-GZ7"/>
-                        <constraint firstAttribute="trailing" secondItem="FDj-gI-mo0" secondAttribute="trailing" constant="11" id="x0I-lZ-vCZ"/>
-                    </constraints>
-                </view>
-            </subviews>
-            <constraints>
-                <constraint firstItem="y3R-kk-mc8" firstAttribute="leading" secondItem="NrC-nd-xMW" secondAttribute="leading" id="VSj-d7-a99"/>
-                <constraint firstItem="yxw-Sz-0np" firstAttribute="leading" secondItem="NrC-nd-xMW" secondAttribute="leading" constant="8" id="XZ8-Us-2DO"/>
-                <constraint firstItem="y3R-kk-mc8" firstAttribute="top" secondItem="yxw-Sz-0np" secondAttribute="bottom" id="b8C-f6-ASL"/>
-                <constraint firstAttribute="bottom" secondItem="y3R-kk-mc8" secondAttribute="bottom" id="iaA-ux-y1j"/>
-                <constraint firstAttribute="trailing" secondItem="y3R-kk-mc8" secondAttribute="trailing" id="jTS-Lp-SlD"/>
-                <constraint firstItem="yxw-Sz-0np" firstAttribute="top" secondItem="NrC-nd-xMW" secondAttribute="top" constant="20" id="v0f-Tc-Ww0"/>
-            </constraints>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <connections>
-                <outlet property="addressLabel" destination="eub-7M-xgI" id="4Qf-UZ-kxT"/>
-                <outlet property="callImageView" destination="gTB-kz-5PX" id="uou-8v-0oP"/>
-                <outlet property="messageLabel" destination="FDj-gI-mo0" id="fHn-Z9-UFb"/>
-                <outlet property="nameLabel" destination="6yG-3a-jk9" id="6yp-29-2v4"/>
-                <outlet property="numberLabel" destination="DW3-53-jF9" id="5OH-T6-K0y"/>
-                <outlet property="smsImageView" destination="WmQ-cD-Nsl" id="J7Q-6e-rED"/>
-            </connections>
-            <point key="canvasLocation" x="361.5" y="473"/>
-        </view>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="LRr-bJ-2sh" userLabel="Transaction Status" customClass="TransactionDeliveryStatusView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="245"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="DELIVERY STATUS" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="owQ-FA-h7I">
-                    <rect key="frame" x="8" y="0.0" width="147" height="37"/>
-                    <constraints>
-                        <constraint firstAttribute="height" constant="37" id="1pq-Fb-RMb"/>
-                        <constraint firstAttribute="width" constant="147" id="MoM-ji-YNs"/>
-                    </constraints>
-                    <fontDescription key="fontDescription" type="system" pointSize="12"/>
-                    <color key="textColor" white="0.33333333333333331" alpha="1" colorSpace="calibratedWhite"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="sMK-Ta-LV4">
-                    <rect key="frame" x="0.0" y="37" width="375" height="208"/>
-                    <subviews>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Jan 1, 2015 at 11:59pm" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="NUx-yp-pQt">
-                            <rect key="frame" x="8" y="32" width="330" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="gOP-qD-j6s"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Bogz Borja, Manila" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="bbn-ft-Jy2">
-                            <rect key="frame" x="8" y="54" width="330" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="4fQ-3H-2SS"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="ej9-dX-Ui8">
-                            <rect key="frame" x="8" y="85" width="367" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="gr9-fT-uNh"/>
-                            </constraints>
-                        </view>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Apo ni Lario Mabini" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="S4E-Ye-PKY">
-                            <rect key="frame" x="8" y="111" width="286" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="GAv-97-beM"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="KaX-3x-6wG">
-                            <rect key="frame" x="8" y="142" width="367" height="1"/>
-                            <color key="backgroundColor" red="0.80000001190000003" green="0.80000001190000003" blue="0.80000001190000003" alpha="1" colorSpace="calibratedRGB"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="1" id="NDm-Uc-4ww"/>
-                            </constraints>
-                        </view>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="right2" translatesAutoresizingMaskIntoConstraints="NO" id="FN9-Ix-E4X">
-                            <rect key="frame" x="357" y="36" width="10" height="18"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="18" id="CVz-kU-mm6"/>
-                                <constraint firstAttribute="width" constant="10" id="NZX-6c-avw"/>
-                            </constraints>
-                        </imageView>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="last check-in" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="mr3-vS-KA3">
-                            <rect key="frame" x="8" y="10" width="330" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="kmJ-hU-bFX"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="pickup rider" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="5om-iF-rnT">
-                            <rect key="frame" x="9" y="91" width="285" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="3EC-re-Etg"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Tata Lino" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="h47-5W-Ndm">
-                            <rect key="frame" x="8" y="167" width="286" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="50R-P4-ubZ"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="delivery rider" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="YHa-Hz-Wbm">
-                            <rect key="frame" x="9" y="148" width="285" height="21"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="21" id="Uqw-4Q-jvM"/>
-                            </constraints>
-                            <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                            <color key="textColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="sms" translatesAutoresizingMaskIntoConstraints="NO" id="iuS-Dw-7Fc">
-                            <rect key="frame" x="307" y="99" width="20" height="30"/>
-                            <constraints>
-                                <constraint firstAttribute="width" constant="20" id="WfK-C9-Agx"/>
-                                <constraint firstAttribute="height" constant="30" id="uKY-hX-qfd"/>
-                            </constraints>
-                        </imageView>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="call-gray" translatesAutoresizingMaskIntoConstraints="NO" id="TPx-1b-Ida">
-                            <rect key="frame" x="342" y="102" width="25" height="25"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="25" id="4PV-YV-ZFH"/>
-                                <constraint firstAttribute="width" constant="25" id="Zbq-an-kOp"/>
-                            </constraints>
-                        </imageView>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="sms" translatesAutoresizingMaskIntoConstraints="NO" id="XMI-n2-oX4">
-                            <rect key="frame" x="307" y="157" width="20" height="30"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="30" id="7Vf-BX-FoN"/>
-                                <constraint firstAttribute="width" constant="20" id="BCi-gK-VHv"/>
-                            </constraints>
-                        </imageView>
-                        <imageView contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="call-gray" translatesAutoresizingMaskIntoConstraints="NO" id="cJd-fb-MZu">
-                            <rect key="frame" x="342" y="159" width="25" height="25"/>
-                            <constraints>
-                                <constraint firstAttribute="height" constant="25" id="miE-Fr-zkr"/>
-                                <constraint firstAttribute="width" constant="25" id="xW7-nM-ja7"/>
-                            </constraints>
-                        </imageView>
-                    </subviews>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <constraints>
-                        <constraint firstItem="YHa-Hz-Wbm" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="9" id="31m-82-vsQ"/>
-                        <constraint firstItem="5om-iF-rnT" firstAttribute="top" secondItem="ej9-dX-Ui8" secondAttribute="bottom" constant="5" id="3kJ-3h-4wD"/>
-                        <constraint firstItem="NUx-yp-pQt" firstAttribute="top" secondItem="mr3-vS-KA3" secondAttribute="bottom" constant="1" id="51o-bH-aSB"/>
-                        <constraint firstItem="ej9-dX-Ui8" firstAttribute="top" secondItem="bbn-ft-Jy2" secondAttribute="bottom" constant="10" id="65z-QJ-Fnb"/>
-                        <constraint firstItem="h47-5W-Ndm" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="7b0-TO-QQM"/>
-                        <constraint firstItem="ej9-dX-Ui8" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="8DC-Ke-XpK"/>
-                        <constraint firstItem="bbn-ft-Jy2" firstAttribute="top" secondItem="NUx-yp-pQt" secondAttribute="bottom" constant="1" id="BsU-PQ-grF"/>
-                        <constraint firstItem="mr3-vS-KA3" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="C3i-H0-oJq"/>
-                        <constraint firstItem="XMI-n2-oX4" firstAttribute="leading" secondItem="YHa-Hz-Wbm" secondAttribute="trailing" constant="13" id="Caf-us-Ocr"/>
-                        <constraint firstItem="FN9-Ix-E4X" firstAttribute="top" secondItem="sMK-Ta-LV4" secondAttribute="top" constant="36" id="CeR-cS-cFm"/>
-                        <constraint firstItem="KaX-3x-6wG" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="Dtt-6P-nDQ"/>
-                        <constraint firstAttribute="trailing" secondItem="ej9-dX-Ui8" secondAttribute="trailing" id="Fj8-cm-Imv"/>
-                        <constraint firstItem="TPx-1b-Ida" firstAttribute="top" secondItem="ej9-dX-Ui8" secondAttribute="bottom" constant="16" id="Fwn-kn-OB1"/>
-                        <constraint firstItem="iuS-Dw-7Fc" firstAttribute="top" secondItem="ej9-dX-Ui8" secondAttribute="bottom" constant="13" id="Kfi-Og-mMl"/>
-                        <constraint firstItem="TPx-1b-Ida" firstAttribute="leading" secondItem="iuS-Dw-7Fc" secondAttribute="trailing" constant="15" id="LoD-tk-ayk"/>
-                        <constraint firstItem="mr3-vS-KA3" firstAttribute="top" secondItem="sMK-Ta-LV4" secondAttribute="top" constant="10" id="Mlu-6P-582"/>
-                        <constraint firstItem="5om-iF-rnT" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="9" id="NWz-Y7-SYz"/>
-                        <constraint firstItem="XMI-n2-oX4" firstAttribute="top" secondItem="KaX-3x-6wG" secondAttribute="bottom" constant="14" id="QIt-Uq-UF1"/>
-                        <constraint firstItem="iuS-Dw-7Fc" firstAttribute="leading" secondItem="S4E-Ye-PKY" secondAttribute="trailing" constant="13" id="Qda-tX-lRz"/>
-                        <constraint firstItem="bbn-ft-Jy2" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="Qiu-Ow-isA"/>
-                        <constraint firstAttribute="trailing" secondItem="FN9-Ix-E4X" secondAttribute="trailing" constant="8" id="Rcq-Rq-J7h"/>
-                        <constraint firstItem="XMI-n2-oX4" firstAttribute="leading" secondItem="h47-5W-Ndm" secondAttribute="trailing" constant="13" id="b1C-Kv-Mp4"/>
-                        <constraint firstAttribute="trailing" secondItem="KaX-3x-6wG" secondAttribute="trailing" id="c3R-1y-Y0c"/>
-                        <constraint firstAttribute="trailing" secondItem="cJd-fb-MZu" secondAttribute="trailing" constant="8" id="clP-gA-a8m"/>
-                        <constraint firstAttribute="trailing" secondItem="TPx-1b-Ida" secondAttribute="trailing" constant="8" id="ggL-4w-fRO"/>
-                        <constraint firstItem="YHa-Hz-Wbm" firstAttribute="top" secondItem="KaX-3x-6wG" secondAttribute="bottom" constant="5" id="k6s-Io-9Zo"/>
-                        <constraint firstItem="cJd-fb-MZu" firstAttribute="leading" secondItem="XMI-n2-oX4" secondAttribute="trailing" constant="15" id="lBg-Wo-FQS"/>
-                        <constraint firstItem="KaX-3x-6wG" firstAttribute="top" secondItem="S4E-Ye-PKY" secondAttribute="bottom" constant="10" id="p6c-8S-fYn"/>
-                        <constraint firstItem="cJd-fb-MZu" firstAttribute="top" secondItem="KaX-3x-6wG" secondAttribute="bottom" constant="16" id="pfX-cN-XKj"/>
-                        <constraint firstItem="S4E-Ye-PKY" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="qDK-8w-LCF"/>
-                        <constraint firstAttribute="trailing" secondItem="mr3-vS-KA3" secondAttribute="trailing" constant="37" id="qNJ-dI-GH9"/>
-                        <constraint firstItem="iuS-Dw-7Fc" firstAttribute="leading" secondItem="5om-iF-rnT" secondAttribute="trailing" constant="13" id="two-wV-5OE"/>
-                        <constraint firstAttribute="trailing" secondItem="bbn-ft-Jy2" secondAttribute="trailing" constant="37" id="txe-0A-xoD"/>
-                        <constraint firstItem="h47-5W-Ndm" firstAttribute="top" secondItem="KaX-3x-6wG" secondAttribute="bottom" constant="24" id="uf8-MK-S7w"/>
-                        <constraint firstItem="NUx-yp-pQt" firstAttribute="leading" secondItem="sMK-Ta-LV4" secondAttribute="leading" constant="8" id="wHL-Ia-GDv"/>
-                        <constraint firstItem="S4E-Ye-PKY" firstAttribute="top" secondItem="ej9-dX-Ui8" secondAttribute="bottom" constant="25" id="yh6-yD-H8H"/>
-                        <constraint firstItem="FN9-Ix-E4X" firstAttribute="leading" secondItem="NUx-yp-pQt" secondAttribute="trailing" constant="19" id="ziL-Vo-cZN"/>
-                    </constraints>
-                </view>
-            </subviews>
-            <constraints>
-                <constraint firstAttribute="trailing" secondItem="sMK-Ta-LV4" secondAttribute="trailing" id="5eI-i0-qHg"/>
-                <constraint firstItem="sMK-Ta-LV4" firstAttribute="top" secondItem="owQ-FA-h7I" secondAttribute="bottom" id="6NC-57-gIW"/>
-                <constraint firstItem="owQ-FA-h7I" firstAttribute="top" secondItem="LRr-bJ-2sh" secondAttribute="top" id="BHw-t3-Q62"/>
-                <constraint firstAttribute="bottom" secondItem="sMK-Ta-LV4" secondAttribute="bottom" id="Gfo-2O-m5t"/>
-                <constraint firstItem="owQ-FA-h7I" firstAttribute="leading" secondItem="LRr-bJ-2sh" secondAttribute="leading" constant="8" id="dda-Sj-dCK"/>
-                <constraint firstItem="sMK-Ta-LV4" firstAttribute="leading" secondItem="LRr-bJ-2sh" secondAttribute="leading" id="vMO-s6-hSh"/>
-            </constraints>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <connections>
-                <outlet property="arrowImageView" destination="FN9-Ix-E4X" id="uPN-FM-mVS"/>
-                <outlet property="dateLabel" destination="NUx-yp-pQt" id="aQD-AA-WWa"/>
-                <outlet property="deliveryCall" destination="cJd-fb-MZu" id="dAC-zn-0Zz"/>
-                <outlet property="deliveryRiderLabel" destination="YHa-Hz-Wbm" id="Z0k-xm-SmZ"/>
-                <outlet property="deliverySms" destination="XMI-n2-oX4" id="aZq-HQ-McT"/>
-                <outlet property="nameAndPlaceLabel" destination="bbn-ft-Jy2" id="cA7-Z7-mh8"/>
-                <outlet property="pickupCall" destination="TPx-1b-Ida" id="zby-Cl-B90"/>
-                <outlet property="pickupRiderLabel" destination="S4E-Ye-PKY" id="oqO-NU-hXj"/>
-                <outlet property="pickupSms" destination="iuS-Dw-7Fc" id="uAV-PB-rFL"/>
-            </connections>
-            <point key="canvasLocation" x="361.5" y="844.5"/>
-        </view>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="ZbA-3d-E5y" userLabel="Product Images" customClass="TransactionProductImagesView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="238"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Beats Studio" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="WhE-Kk-m4c">
-                    <rect key="frame" x="8" y="27" width="194" height="22"/>
-                    <fontDescription key="fontDescription" type="system" weight="medium" pointSize="18"/>
-                    <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="The Beats Acoustic Engine makes your listening experience intimate, personal, and real." lineBreakMode="tailTruncation" numberOfLines="2" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="9R9-EM-KOM">
-                    <rect key="frame" x="8" y="57" width="367" height="38"/>
-                    <fontDescription key="fontDescription" type="system" pointSize="13"/>
-                    <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <collectionView clipsSubviews="YES" clearsContextBeforeDrawing="NO" multipleTouchEnabled="YES" contentMode="scaleToFill" fixedFrame="YES" showsHorizontalScrollIndicator="NO" showsVerticalScrollIndicator="NO" dataMode="none" translatesAutoresizingMaskIntoConstraints="NO" id="170-Pq-xcf">
-                    <rect key="frame" x="0.0" y="110" width="375" height="100"/>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <collectionViewFlowLayout key="collectionViewLayout" scrollDirection="horizontal" minimumLineSpacing="10" minimumInteritemSpacing="10" id="HVM-qI-ZuR">
-                        <size key="itemSize" width="100" height="100"/>
-                        <size key="headerReferenceSize" width="0.0" height="0.0"/>
-                        <size key="footerReferenceSize" width="0.0" height="0.0"/>
-                        <inset key="sectionInset" minX="10" minY="0.0" maxX="0.0" maxY="0.0"/>
-                    </collectionViewFlowLayout>
-                </collectionView>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <point key="canvasLocation" x="896.5" y="-77"/>
-        </view>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="Fk7-wz-MaE" userLabel="Product Purchase" customClass="TransactionPurchaseDetailsView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="174"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Purchase Details" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="kpH-dG-Fyi">
-                    <rect key="frame" x="8" y="0.0" width="367" height="42"/>
-                    <fontDescription key="fontDescription" type="system" pointSize="15"/>
-                    <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="8c9-sE-GfM" userLabel="Separator">
-                    <rect key="frame" x="0.0" y="41" width="375" height="1"/>
-                    <color key="backgroundColor" red="0.7019608021" green="0.7019608021" blue="0.7019608021" alpha="1" colorSpace="calibratedRGB"/>
-                </view>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Quantity" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="cXH-uQ-i0g">
-                    <rect key="frame" x="8" y="41" width="89" height="43"/>
-                    <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                    <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="3x" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="LH8-16-ORE">
-                    <rect key="frame" x="183" y="41" width="184" height="42"/>
-                    <fontDescription key="fontDescription" type="system" weight="medium" pointSize="15"/>
-                    <color key="textColor" white="0.33333333333333331" alpha="1" colorSpace="calibratedWhite"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="6HO-eM-3iX" userLabel="Separator">
-                    <rect key="frame" x="0.0" y="83" width="375" height="1"/>
-                    <color key="backgroundColor" red="0.7019608021" green="0.7019608021" blue="0.7019608021" alpha="1" colorSpace="calibratedRGB"/>
-                </view>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Price" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="bMj-V6-Aqc">
-                    <rect key="frame" x="8" y="83" width="89" height="43"/>
-                    <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                    <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="P18,000" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Mt9-WX-Xay">
-                    <rect key="frame" x="183" y="83" width="184" height="42"/>
-                    <fontDescription key="fontDescription" type="system" weight="medium" pointSize="15"/>
-                    <color key="textColor" white="0.33333333333333331" alpha="1" colorSpace="calibratedWhite"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="bRU-O1-z6h" userLabel="Separator">
-                    <rect key="frame" x="0.0" y="125" width="375" height="1"/>
-                    <color key="backgroundColor" red="0.7019608021" green="0.7019608021" blue="0.7019608021" alpha="1" colorSpace="calibratedRGB"/>
-                </view>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Total Cost" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Mby-OV-re4">
-                    <rect key="frame" x="8" y="125" width="89" height="43"/>
-                    <fontDescription key="fontDescription" type="system" weight="light" pointSize="15"/>
-                    <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="P54,000" textAlignment="right" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="gej-q6-EGy">
-                    <rect key="frame" x="183" y="125" width="184" height="42"/>
-                    <fontDescription key="fontDescription" type="system" weight="medium" pointSize="25"/>
-                    <color key="textColor" red="0.50122048590000001" green="0.0" blue="0.7202493687" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <point key="canvasLocation" x="896.5" y="206"/>
-        </view>
-        <view clearsContextBeforeDrawing="NO" contentMode="scaleToFill" id="CIA-nt-QAA" userLabel="Product Description" customClass="TransactionDescriptionView" customModule="YiLinkerOnlineBuyer" customModuleProvider="target">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="116"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Description" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="N8e-iL-fXN">
-                    <rect key="frame" x="8" y="0.0" width="359" height="42"/>
-                    <fontDescription key="fontDescription" type="system" pointSize="15"/>
-                    <color key="textColor" red="0.20000000300000001" green="0.20000000300000001" blue="0.20000000300000001" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <view contentMode="scaleToFill" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="XwX-un-xTz" userLabel="Separator">
-                    <rect key="frame" x="0.0" y="41" width="375" height="1"/>
-                    <color key="backgroundColor" red="0.7019608021" green="0.7019608021" blue="0.7019608021" alpha="1" colorSpace="calibratedRGB"/>
-                </view>
-                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="1000" verticalCompressionResistancePriority="1000" fixedFrame="YES" text="Description Text Here" lineBreakMode="tailTruncation" numberOfLines="0" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="R0O-Uw-d5G">
-                    <rect key="frame" x="10" y="57" width="357" height="16"/>
-                    <fontDescription key="fontDescription" type="system" weight="light" pointSize="13"/>
-                    <color key="textColor" red="0.29803922770000002" green="0.29803922770000002" blue="0.29803922770000002" alpha="1" colorSpace="calibratedRGB"/>
-                    <nil key="highlightedColor"/>
-                </label>
-                <button opaque="NO" contentMode="scaleToFill" fixedFrame="YES" contentHorizontalAlignment="center" contentVerticalAlignment="center" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="Igm-SQ-z6s">
-                    <rect key="frame" x="0.0" y="0.0" width="375" height="35"/>
-                    <fontDescription key="fontDescription" type="system" pointSize="15"/>
-                    <inset key="titleEdgeInsets" minX="-120" minY="0.0" maxX="0.0" maxY="0.0"/>
-                    <inset key="imageEdgeInsets" minX="225" minY="10" maxX="140" maxY="10"/>
-                    <state key="normal" title="SEE MORE" image="seeMoreViolet">
-                        <color key="titleColor" red="0.50122048590000001" green="0.0" blue="0.7202493687" alpha="1" colorSpace="calibratedRGB"/>
-                        <color key="titleShadowColor" white="0.5" alpha="1" colorSpace="calibratedWhite"/>
-                    </state>
-                </button>
-                <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="pFq-RL-00A">
-                    <rect key="frame" x="83" y="81" width="209" height="35"/>
-                    <subviews>
-                        <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="SEE MORE" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Bh6-I0-cm7">
-                            <rect key="frame" x="55" y="0.0" width="90" height="35"/>
-                            <fontDescription key="fontDescription" type="system" pointSize="15"/>
-                            <color key="textColor" red="0.50122048590000001" green="0.0" blue="0.7202493687" alpha="1" colorSpace="calibratedRGB"/>
-                            <nil key="highlightedColor"/>
-                        </label>
-                        <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" image="seeMoreViolet" translatesAutoresizingMaskIntoConstraints="NO" id="RdB-FR-DEJ">
-                            <rect key="frame" x="144" y="10" width="10" height="15"/>
-                        </imageView>
-                    </subviews>
-                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-                    <constraints>
-                        <constraint firstAttribute="height" constant="35" id="cOv-1c-2c1"/>
-                        <constraint firstAttribute="width" constant="209" id="wfX-eY-KUk"/>
-                    </constraints>
-                </view>
-            </subviews>
-            <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
-            <constraints>
-                <constraint firstAttribute="centerX" secondItem="pFq-RL-00A" secondAttribute="centerX" id="RTy-L8-9Vf"/>
-                <constraint firstAttribute="bottom" secondItem="pFq-RL-00A" secondAttribute="bottom" id="ZgU-MS-UnH"/>
-            </constraints>
-            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
-            <point key="canvasLocation" x="896.5" y="421"/>
-        </view>
-    </objects>
-    <resources>
-        <image name="call-gray" width="200" height="200"/>
-        <image name="right2" width="97" height="200"/>
-        <image name="seeMoreViolet" width="100" height="200"/>
-        <image name="sms" width="134" height="200"/>
-    </resources>
-</document>
diff --git a/YiLinkerOnlineBuyer/resources/Xib/ViewController/WishlistViewController.swift b/YiLinkerOnlineBuyer/resources/Xib/ViewController/WishlistViewController.swift
deleted file mode 100644
index 7a4acb3..0000000
--- a/YiLinkerOnlineBuyer/resources/Xib/ViewController/WishlistViewController.swift
+++ /dev/null
@@ -1,226 +0,0 @@
-//
-//  WishlistViewController.swift
-//  YiLinkerOnlineBuyer
-//
-//  Created by Alvin John Tandoc on 7/28/15.
-//  Copyright (c) 2015 yiLinker-online-buyer. All rights reserved.
-//
-
-import UIKit
-
-class WishlistViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, WishlistTableViewCellDelegate {
-    
-    let manager = APIManager.sharedInstance
-    
-    @IBOutlet var wishlistTableView: UITableView!
-    
-    @IBOutlet var wishListCounterLabel: UILabel!
-    
-    let viewControllerIndex = 2
-    
-    var tableData: [WishlistModel] = []
-    
-    //formatter of Text to remove trailing decimal
-    let formatter = NSNumberFormatter()
-    
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        
-        wishlistTableView.delegate = self;
-        wishlistTableView.dataSource = self;
-        
-        wishlistTableView.tableFooterView = UIView()
-        
-        var nib = UINib(nibName: "WishlistTableViewCell", bundle: nil)
-        wishlistTableView.registerNib(nib, forCellReuseIdentifier: "WishlistTableViewCell")
-        
-        self.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: UIColor.whiteColor()]
-        
-        formatter.minimumFractionDigits = 0
-        formatter.maximumFractionDigits = 2
-    }
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-        // Dispose of any resources that can be recreated.
-    }
-    
-    override func viewDidAppear(animated: Bool) {
-        super.viewDidAppear(true)
-    NSNotificationCenter.defaultCenter().postNotificationName("SwipeForOptionsCellEnclosingTableViewDidBeginScrollingNotification", object: self)
-        populateWishListTableView()
-    }
-    
-    //REST API request
-    //
-    func fireDeleteCartItem(url: String, params: NSDictionary!) {
-        showLoader()
-        manager.DELETE(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            print(responseObject as! NSDictionary)
-            self.updateCounterLabel()
-            self.dismissLoader()
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.dismissLoader()
-        })
-    }
-    
-    func fireAddToCartItem(url: String, params: NSDictionary!) {
-        showLoader()
-        manager.DELETE(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            print(responseObject as! NSDictionary)
-            self.updateCounterLabel()
-            self.dismissLoader()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.dismissLoader()
-        })
-    }
-    
-    func requestProductDetails(url: String, params: NSDictionary!) {
-        showLoader()
-        
-        manager.GET(url, parameters: params, success: {
-            (task: NSURLSessionDataTask!, responseObject: AnyObject!) in
-            if let value: AnyObject = responseObject["data"] {
-                for subValue in value["cartItems"] as! NSArray {
-                    println(subValue)
-                    let model: WishlistModel = WishlistModel.parseDataWithDictionary(subValue as! NSDictionary)
-                    
-                    self.tableData.append(model)
-                }
-                self.wishlistTableView.reloadData()
-            }
-            self.updateCounterLabel()
-            self.dismissLoader()
-            
-            }, failure: {
-                (task: NSURLSessionDataTask!, error: NSError!) in
-                println("failed: \(error)")
-                self.updateCounterLabel()
-                self.dismissLoader()
-        })
-    }
-    
-    
-    //Loader function
-    func showLoader() {
-        SVProgressHUD.show()
-        SVProgressHUD.setBackgroundColor(UIColor.whiteColor())
-    }
-    
-    func dismissLoader() {
-        SVProgressHUD.dismiss()
-    }
-    
-    // MARK: Methods Updating Values
-    func populateWishListTableView () {
-        tableData = []
-        //requestProductDetails(APIAtlas.wishlistUrl, params: NSDictionary(dictionary: ["access_token": SessionManager.accessToken(), "wishlist": "true"]))
-        
-        requestProductDetails("http://demo3526363.mockable.io/api/v1/auth/cart/getCart", params: nil)
-    }
-    
-    func updateCounterLabel() {
-        if tableData.count < 2 {
-            wishListCounterLabel.text = "You have \(tableData.count) item in your wishlist"
-        } else {
-            wishListCounterLabel.text = "You have \(tableData.count) items in your wishlist"
-        }
-    }
-    
-    // MARK: - Table View Delegate
-    
-    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return self.tableData.count
-    }
-    
-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell 	{
-        var cell:WishlistTableViewCell = self.wishlistTableView.dequeueReusableCellWithIdentifier("WishlistTableViewCell") as! WishlistTableViewCell
-        
-        //Set cell data
-        var tempModel: WishlistModel = tableData[indexPath.row]
-        
-        for selectedProductUnit in tempModel.selectedAttributes {
-            for tempProductUnit in tempModel.productDetails.productUnits {
-                if selectedProductUnit == tempProductUnit.productUnitId.toInt() {
-                    if tempProductUnit.imageIds.count == 0 {
-                        cell.productItemImageView.sd_setImageWithURL(NSURL(string: tempModel.productDetails.image), placeholderImage: UIImage(named: "dummy-placeholder"))
-                    } else {
-                        cell.productItemImageView.sd_setImageWithURL(NSURL(string: tempProductUnit.imageIds[0]), placeholderImage: UIImage(named: "dummy-placeholder"))
-                    }
-                    
-                    var tempAttributesText: String = ""
-                    for tempId in tempProductUnit.combination {
-                        for tempAttributes in tempModel.productDetails.attributes {
-                            if let index = find(tempAttributes.valueId, tempId) {
-                                if tempAttributesText.isEmpty {
-                                    tempAttributesText = tempAttributes.valueName[index]
-                                } else {
-                                    tempAttributesText += " | " + tempAttributes.valueName[index]
-                                }
-                            }
-                        }
-                    }
-                    cell.productDetailsLabel?.text = tempAttributesText
-                    
-                    
-                    cell.productPriceLabel.text = "P" + tempProductUnit.discountedPrice + " x\(tempModel.quantity)"
-                }
-            }
-        }
-        
-        cell.productNameLabel.text = tempModel.productDetails.title
-        
-        cell.delegate = self
-        return cell
-    }
-    
-    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
-        println("Row \(indexPath.row) selected")
-    }
-    
-    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
-        return 105
-    }
-    
-    // MARK: - Wishlist Table View Delegate
-    func scrollViewWillBeginDragging(scrollView: UIScrollView) {
-        NSNotificationCenter.defaultCenter().postNotificationName("SwipeForOptionsCellEnclosingTableViewDidBeginScrollingNotification", object: scrollView)
-    }
-    
-    // MARK: - Wishlist Table View Delegate
-    func deleteButtonActionForIndex(sender: AnyObject){
-        var pathOfTheCell: NSIndexPath = wishlistTableView.indexPathForCell(sender as! UITableViewCell)!
-        var rowOfTheCell: Int = pathOfTheCell.row
-        tableData.removeAtIndex(pathOfTheCell.row);
-        wishlistTableView.deleteRowsAtIndexPaths([pathOfTheCell], withRowAnimation: UITableViewRowAnimation.Fade)
-        NSLog("rowofthecell %d", rowOfTheCell);
-        updateCounterLabel()
-        
-        //No API yet
-        //fireDeleteCartItem(<#url: String#>, params: <#NSDictionary!#>)
-    }
-    
-    func addToCartButtonActionForIndex(sender: AnyObject){
-        var pathOfTheCell: NSIndexPath = wishlistTableView.indexPathForCell(sender as! UITableViewCell)!
-        var rowOfTheCell: Int = pathOfTheCell.row
-        tableData.removeAtIndex(pathOfTheCell.row);
-        wishlistTableView.deleteRowsAtIndexPaths([pathOfTheCell], withRowAnimation: UITableViewRowAnimation.Fade)
-        NSLog("rowofthecell %d", rowOfTheCell);
-        updateCounterLabel()
-        
-        //No API yet
-        //fireAddToßCartItem(<#url: String#>, params: <#NSDictionary!#>)
-    }
-    
-    func swipeViewDidScroll(sender: AnyObject) {
-        NSNotificationCenter.defaultCenter().postNotificationName("SwipeForOptionsCellEnclosingTableViewDidBeginScrollingNotification", object: self)
-    }
-    
-}
-- 
2.3.2 (Apple Git-55)

